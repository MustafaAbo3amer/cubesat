
cubesat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008020  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08008130  08008130  00009130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008260  08008260  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008260  08008260  00009260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008268  08008268  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008268  08008268  00009268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800826c  0800826c  0000926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008270  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000005c  080082cc  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  080082cc  0000a50c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010392  00000000  00000000  0000a085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002306  00000000  00000000  0001a417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001c720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfc  00000000  00000000  0001d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c28  00000000  00000000  0001e47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135a5  00000000  00000000  000370a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009270e  00000000  00000000  0004a649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcd57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005254  00000000  00000000  000dcd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000e1ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008118 	.word	0x08008118

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08008118 	.word	0x08008118

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <MPU6050_Init>:
int16_t ax, ay, az, gx, gy, gz;
int pitch, roll;
int ax_mps2, ay_mps2, az_mps2;
I2C_HandleTypeDef hi2c1;
/* USER CODE END 0 */
void MPU6050_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data;

	// Check if the MPU6050 is connected
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &check, 1, HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2275      	movs	r2, #117	@ 0x75
 8001160:	21d0      	movs	r1, #208	@ 0xd0
 8001162:	480c      	ldr	r0, [pc, #48]	@ (8001194 <MPU6050_Init+0x4c>)
 8001164:	f002 fd68 	bl	8003c38 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b68      	cmp	r3, #104	@ 0x68
 800116c:	d10e      	bne.n	800118c <MPU6050_Init+0x44>
		// Power Management 1 register: wake up MPU6050
		data = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	226b      	movs	r2, #107	@ 0x6b
 8001184:	21d0      	movs	r1, #208	@ 0xd0
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MPU6050_Init+0x4c>)
 8001188:	f002 fc5c 	bl	8003a44 <HAL_I2C_Mem_Write>
	}
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000094 	.word	0x20000094

08001198 <MPU6050_Read_Calculate>:
	*az = (int16_t)((data[4] << 8) | data[5]);
	*gx = (int16_t)((data[8] << 8) | data[9]);
	*gy = (int16_t)((data[10] << 8) | data[11]);
	*gz = (int16_t)((data[12] << 8) | data[13]);
}
void MPU6050_Read_Calculate(int *ax_mps2, int *ay_mps2, int *az_mps2, int *pitch, int *roll, int16_t *gx, int16_t *gy, int16_t *gz) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b093      	sub	sp, #76	@ 0x4c
 800119c:	af04      	add	r7, sp, #16
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
    uint8_t data[14];

    // Read 14 bytes of data from the MPU6050
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 14, HAL_MAX_DELAY);
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	230e      	movs	r3, #14
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	223b      	movs	r2, #59	@ 0x3b
 80011ba:	21d0      	movs	r1, #208	@ 0xd0
 80011bc:	4892      	ldr	r0, [pc, #584]	@ (8001408 <MPU6050_Read_Calculate+0x270>)
 80011be:	f002 fd3b 	bl	8003c38 <HAL_I2C_Mem_Read>

    // Convert the data for accelerometer and gyroscope
    int16_t ax = (int16_t)((data[0] << 8) | data[1]);
 80011c2:	7d3b      	ldrb	r3, [r7, #20]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7d7b      	ldrb	r3, [r7, #21]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    int16_t ay = (int16_t)((data[2] << 8) | data[3]);
 80011d2:	7dbb      	ldrb	r3, [r7, #22]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    int16_t az = (int16_t)((data[4] << 8) | data[5]);
 80011e2:	7e3b      	ldrb	r3, [r7, #24]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7e7b      	ldrb	r3, [r7, #25]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	867b      	strh	r3, [r7, #50]	@ 0x32
    *gx = (int16_t)((data[8] << 8) | data[9]);
 80011f2:	7f3b      	ldrb	r3, [r7, #28]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7f7b      	ldrb	r3, [r7, #29]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001204:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)((data[10] << 8) | data[11]);
 8001206:	7fbb      	ldrb	r3, [r7, #30]
 8001208:	b21b      	sxth	r3, r3
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001218:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)((data[12] << 8) | data[13]);
 800121a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800121e:	b21b      	sxth	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21a      	sxth	r2, r3
 800122e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001230:	801a      	strh	r2, [r3, #0]

    // Calculate acceleration in m/s² (assuming ±2g sensitivity)
    *ax_mps2 = (ax * 9.81 / 16384.0);
 8001232:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8e4 	bl	8000404 <__aeabi_i2d>
 800123c:	a36e      	add	r3, pc, #440	@ (adr r3, 80013f8 <MPU6050_Read_Calculate+0x260>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f949 	bl	80004d8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b6e      	ldr	r3, [pc, #440]	@ (800140c <MPU6050_Read_Calculate+0x274>)
 8001254:	f7ff fa6a 	bl	800072c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fbea 	bl	8000a38 <__aeabi_d2iz>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	601a      	str	r2, [r3, #0]
    *ay_mps2 = (ay * 9.81 / 16384.0);
 800126a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8c8 	bl	8000404 <__aeabi_i2d>
 8001274:	a360      	add	r3, pc, #384	@ (adr r3, 80013f8 <MPU6050_Read_Calculate+0x260>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f92d 	bl	80004d8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b60      	ldr	r3, [pc, #384]	@ (800140c <MPU6050_Read_Calculate+0x274>)
 800128c:	f7ff fa4e 	bl	800072c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fbce 	bl	8000a38 <__aeabi_d2iz>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	601a      	str	r2, [r3, #0]
    *az_mps2 = (az * 9.81 / 16384.0);
 80012a2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8ac 	bl	8000404 <__aeabi_i2d>
 80012ac:	a352      	add	r3, pc, #328	@ (adr r3, 80013f8 <MPU6050_Read_Calculate+0x260>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f911 	bl	80004d8 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b52      	ldr	r3, [pc, #328]	@ (800140c <MPU6050_Read_Calculate+0x274>)
 80012c4:	f7ff fa32 	bl	800072c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fbb2 	bl	8000a38 <__aeabi_d2iz>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]

    // Convert to g for pitch and roll calculations
    float ax_g = ax / 16384.0;
 80012da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f890 	bl	8000404 <__aeabi_i2d>
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b48      	ldr	r3, [pc, #288]	@ (800140c <MPU6050_Read_Calculate+0x274>)
 80012ea:	f7ff fa1f 	bl	800072c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fbc7 	bl	8000a88 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float ay_g = ay / 16384.0;
 80012fe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f87e 	bl	8000404 <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b3f      	ldr	r3, [pc, #252]	@ (800140c <MPU6050_Read_Calculate+0x274>)
 800130e:	f7ff fa0d 	bl	800072c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fbb5 	bl	8000a88 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
    float az_g = az / 16384.0;
 8001322:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f86c 	bl	8000404 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b36      	ldr	r3, [pc, #216]	@ (800140c <MPU6050_Read_Calculate+0x274>)
 8001332:	f7ff f9fb 	bl	800072c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fba3 	bl	8000a88 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculate pitch and roll
    *pitch = (atan2f(ay_g, sqrtf(ax_g * ax_g + az_g * az_g)) * 180.0 / M_PI);
 8001346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001348:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800134a:	f7ff fcfb 	bl	8000d44 <__aeabi_fmul>
 800134e:	4603      	mov	r3, r0
 8001350:	461c      	mov	r4, r3
 8001352:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001354:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001356:	f7ff fcf5 	bl	8000d44 <__aeabi_fmul>
 800135a:	4603      	mov	r3, r0
 800135c:	4619      	mov	r1, r3
 800135e:	4620      	mov	r0, r4
 8001360:	f7ff fbe8 	bl	8000b34 <__addsf3>
 8001364:	4603      	mov	r3, r0
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fe12 	bl	8006f90 <sqrtf>
 800136c:	4603      	mov	r3, r0
 800136e:	4619      	mov	r1, r3
 8001370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001372:	f005 fe0b 	bl	8006f8c <atan2f>
 8001376:	4603      	mov	r3, r0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f855 	bl	8000428 <__aeabi_f2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <MPU6050_Read_Calculate+0x278>)
 8001384:	f7ff f8a8 	bl	80004d8 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	a31b      	add	r3, pc, #108	@ (adr r3, 8001400 <MPU6050_Read_Calculate+0x268>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f9c9 	bl	800072c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb49 	bl	8000a38 <__aeabi_d2iz>
 80013a6:	4602      	mov	r2, r0
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	601a      	str	r2, [r3, #0]
    *roll = (atan2f(-ax_g, az_g) * 180.0 / M_PI);
 80013ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80013b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fde9 	bl	8006f8c <atan2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f833 	bl	8000428 <__aeabi_f2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MPU6050_Read_Calculate+0x278>)
 80013c8:	f7ff f886 	bl	80004d8 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001400 <MPU6050_Read_Calculate+0x268>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f9a7 	bl	800072c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fb27 	bl	8000a38 <__aeabi_d2iz>
 80013ea:	4602      	mov	r2, r0
 80013ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	373c      	adds	r7, #60	@ 0x3c
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	51eb851f 	.word	0x51eb851f
 80013fc:	40239eb8 	.word	0x40239eb8
 8001400:	54442d18 	.word	0x54442d18
 8001404:	400921fb 	.word	0x400921fb
 8001408:	20000094 	.word	0x20000094
 800140c:	40d00000 	.word	0x40d00000
 8001410:	40668000 	.word	0x40668000

08001414 <DHT22_Start>:
int tFahrenheit = 0;
int RH = 0;


uint8_t DHT22_Start (void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 800142a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800142e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	482d      	ldr	r0, [pc, #180]	@ (80014f8 <DHT22_Start+0xe4>)
 8001442:	f002 f807 	bl	8003454 <HAL_GPIO_Init>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800144c:	482a      	ldr	r0, [pc, #168]	@ (80014f8 <DHT22_Start+0xe4>)
 800144e:	f002 f99c 	bl	800378a <HAL_GPIO_WritePin>
	microDelay (1300);   // wait for 1300us
 8001452:	f240 5014 	movw	r0, #1300	@ 0x514
 8001456:	f000 f9e7 	bl	8001828 <microDelay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001460:	4825      	ldr	r0, [pc, #148]	@ (80014f8 <DHT22_Start+0xe4>)
 8001462:	f002 f992 	bl	800378a <HAL_GPIO_WritePin>
	microDelay (30);   // wait for 30us
 8001466:	201e      	movs	r0, #30
 8001468:	f000 f9de 	bl	8001828 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	481f      	ldr	r0, [pc, #124]	@ (80014f8 <DHT22_Start+0xe4>)
 800147a:	f001 ffeb 	bl	8003454 <HAL_GPIO_Init>
	microDelay (40);
 800147e:	2028      	movs	r0, #40	@ 0x28
 8001480:	f000 f9d2 	bl	8001828 <microDelay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8001484:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001488:	481b      	ldr	r0, [pc, #108]	@ (80014f8 <DHT22_Start+0xe4>)
 800148a:	f002 f967 	bl	800375c <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10c      	bne.n	80014ae <DHT22_Start+0x9a>
	{
		microDelay (80);
 8001494:	2050      	movs	r0, #80	@ 0x50
 8001496:	f000 f9c7 	bl	8001828 <microDelay>
		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 800149a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800149e:	4816      	ldr	r0, [pc, #88]	@ (80014f8 <DHT22_Start+0xe4>)
 80014a0:	f002 f95c 	bl	800375c <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <DHT22_Start+0x9a>
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 80014ae:	f001 f9b7 	bl	8002820 <HAL_GetTick>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <DHT22_Start+0xe8>)
 80014b6:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 80014b8:	f001 f9b2 	bl	8002820 <HAL_GetTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a10      	ldr	r2, [pc, #64]	@ (8001500 <DHT22_Start+0xec>)
 80014c0:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80014c2:	e004      	b.n	80014ce <DHT22_Start+0xba>
	{
		cMillis = HAL_GetTick();
 80014c4:	f001 f9ac 	bl	8002820 <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <DHT22_Start+0xec>)
 80014cc:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80014ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <DHT22_Start+0xe4>)
 80014d4:	f002 f942 	bl	800375c <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <DHT22_Start+0xd8>
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <DHT22_Start+0xe8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1c9a      	adds	r2, r3, #2
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <DHT22_Start+0xec>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8eb      	bhi.n	80014c4 <DHT22_Start+0xb0>
	}
	return Response;
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	20000180 	.word	0x20000180
 8001500:	20000184 	.word	0x20000184

08001504 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	uint8_t a,b;
	for (a=0;a<8;a++)
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	e066      	b.n	80015de <DHT22_Read+0xda>
	{
		pMillis = HAL_GetTick();
 8001510:	f001 f986 	bl	8002820 <HAL_GetTick>
 8001514:	4603      	mov	r3, r0
 8001516:	4a36      	ldr	r2, [pc, #216]	@ (80015f0 <DHT22_Read+0xec>)
 8001518:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 800151a:	f001 f981 	bl	8002820 <HAL_GetTick>
 800151e:	4603      	mov	r3, r0
 8001520:	4a34      	ldr	r2, [pc, #208]	@ (80015f4 <DHT22_Read+0xf0>)
 8001522:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001524:	e004      	b.n	8001530 <DHT22_Read+0x2c>
		{  // wait for the pin to go high
			cMillis = HAL_GetTick();
 8001526:	f001 f97b 	bl	8002820 <HAL_GetTick>
 800152a:	4603      	mov	r3, r0
 800152c:	4a31      	ldr	r2, [pc, #196]	@ (80015f4 <DHT22_Read+0xf0>)
 800152e:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001530:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001534:	4830      	ldr	r0, [pc, #192]	@ (80015f8 <DHT22_Read+0xf4>)
 8001536:	f002 f911 	bl	800375c <HAL_GPIO_ReadPin>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d106      	bne.n	800154e <DHT22_Read+0x4a>
 8001540:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <DHT22_Read+0xec>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1c9a      	adds	r2, r3, #2
 8001546:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <DHT22_Read+0xf0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d8eb      	bhi.n	8001526 <DHT22_Read+0x22>
		}
		microDelay (40);   // wait for 40 us
 800154e:	2028      	movs	r0, #40	@ 0x28
 8001550:	f000 f96a 	bl	8001828 <microDelay>
		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001558:	4827      	ldr	r0, [pc, #156]	@ (80015f8 <DHT22_Read+0xf4>)
 800155a:	f002 f8ff 	bl	800375c <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10e      	bne.n	8001582 <DHT22_Read+0x7e>
			b&= ~(1<<(7-a));
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2201      	movs	r2, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	b25b      	sxtb	r3, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	b25a      	sxtb	r2, r3
 8001576:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800157a:	4013      	ands	r3, r2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	71bb      	strb	r3, [r7, #6]
 8001580:	e00b      	b.n	800159a <DHT22_Read+0x96>
		else
			b|= (1<<(7-a));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f1c3 0307 	rsb	r3, r3, #7
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	b25a      	sxtb	r2, r3
 8001590:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001594:	4313      	orrs	r3, r2
 8001596:	b25b      	sxtb	r3, r3
 8001598:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 800159a:	f001 f941 	bl	8002820 <HAL_GetTick>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <DHT22_Read+0xec>)
 80015a2:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 80015a4:	f001 f93c 	bl	8002820 <HAL_GetTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <DHT22_Read+0xf0>)
 80015ac:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80015ae:	e004      	b.n	80015ba <DHT22_Read+0xb6>
		{  // wait for the pin to go low
			cMillis = HAL_GetTick();
 80015b0:	f001 f936 	bl	8002820 <HAL_GetTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <DHT22_Read+0xf0>)
 80015b8:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80015ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <DHT22_Read+0xf4>)
 80015c0:	f002 f8cc 	bl	800375c <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <DHT22_Read+0xd4>
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <DHT22_Read+0xec>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1c9a      	adds	r2, r3, #2
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <DHT22_Read+0xf0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8eb      	bhi.n	80015b0 <DHT22_Read+0xac>
	for (a=0;a<8;a++)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	3301      	adds	r3, #1
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b07      	cmp	r3, #7
 80015e2:	d995      	bls.n	8001510 <DHT22_Read+0xc>
		}
	}
	return b;
 80015e4:	79bb      	ldrb	r3, [r7, #6]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000180 	.word	0x20000180
 80015f4:	20000184 	.word	0x20000184
 80015f8:	40010c00 	.word	0x40010c00

080015fc <BMP180_Read16>:
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART1_UART_Init(void);
int16_t BMP180_Read16(uint8_t reg) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af04      	add	r7, sp, #16
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, reg, 1, data, 2, HAL_MAX_DELAY);
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	b29a      	uxth	r2, r3
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	2302      	movs	r3, #2
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	21ee      	movs	r1, #238	@ 0xee
 800161e:	4807      	ldr	r0, [pc, #28]	@ (800163c <BMP180_Read16+0x40>)
 8001620:	f002 fb0a 	bl	8003c38 <HAL_I2C_Mem_Read>
	return (int16_t)((data[0] << 8) | data[1]);
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	b21b      	sxth	r3, r3
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7b7b      	ldrb	r3, [r7, #13]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21b      	sxth	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000094 	.word	0x20000094

08001640 <BMP180_ReadU16>:

// Read 16-bit unsigned value
uint16_t BMP180_ReadU16(uint8_t reg) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af04      	add	r7, sp, #16
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, reg, 1, data, 2, HAL_MAX_DELAY);
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2302      	movs	r3, #2
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	21ee      	movs	r1, #238	@ 0xee
 8001662:	4808      	ldr	r0, [pc, #32]	@ (8001684 <BMP180_ReadU16+0x44>)
 8001664:	f002 fae8 	bl	8003c38 <HAL_I2C_Mem_Read>
	return (uint16_t)((data[0] << 8) | data[1]);
 8001668:	7b3b      	ldrb	r3, [r7, #12]
 800166a:	b21b      	sxth	r3, r3
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b21a      	sxth	r2, r3
 8001670:	7b7b      	ldrb	r3, [r7, #13]
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	b29b      	uxth	r3, r3
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000094 	.word	0x20000094

08001688 <BMP180_ReadCalibrationData>:

// Read calibration data
void BMP180_ReadCalibrationData(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	AC1 = BMP180_Read16(0xAA);
 800168c:	20aa      	movs	r0, #170	@ 0xaa
 800168e:	f7ff ffb5 	bl	80015fc <BMP180_Read16>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b25      	ldr	r3, [pc, #148]	@ (800172c <BMP180_ReadCalibrationData+0xa4>)
 8001698:	801a      	strh	r2, [r3, #0]
	AC2 = BMP180_Read16(0xAC);
 800169a:	20ac      	movs	r0, #172	@ 0xac
 800169c:	f7ff ffae 	bl	80015fc <BMP180_Read16>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <BMP180_ReadCalibrationData+0xa8>)
 80016a6:	801a      	strh	r2, [r3, #0]
	AC3 = BMP180_Read16(0xAE);
 80016a8:	20ae      	movs	r0, #174	@ 0xae
 80016aa:	f7ff ffa7 	bl	80015fc <BMP180_Read16>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <BMP180_ReadCalibrationData+0xac>)
 80016b4:	801a      	strh	r2, [r3, #0]
	AC4 = BMP180_ReadU16(0xB0);
 80016b6:	20b0      	movs	r0, #176	@ 0xb0
 80016b8:	f7ff ffc2 	bl	8001640 <BMP180_ReadU16>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <BMP180_ReadCalibrationData+0xb0>)
 80016c2:	801a      	strh	r2, [r3, #0]
	AC5 = BMP180_ReadU16(0xB2);
 80016c4:	20b2      	movs	r0, #178	@ 0xb2
 80016c6:	f7ff ffbb 	bl	8001640 <BMP180_ReadU16>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <BMP180_ReadCalibrationData+0xb4>)
 80016d0:	801a      	strh	r2, [r3, #0]
	AC6 = BMP180_ReadU16(0xB4);
 80016d2:	20b4      	movs	r0, #180	@ 0xb4
 80016d4:	f7ff ffb4 	bl	8001640 <BMP180_ReadU16>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <BMP180_ReadCalibrationData+0xb8>)
 80016de:	801a      	strh	r2, [r3, #0]
	B1 = BMP180_Read16(0xB6);
 80016e0:	20b6      	movs	r0, #182	@ 0xb6
 80016e2:	f7ff ff8b 	bl	80015fc <BMP180_Read16>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <BMP180_ReadCalibrationData+0xbc>)
 80016ec:	801a      	strh	r2, [r3, #0]
	B2 = BMP180_Read16(0xB8);
 80016ee:	20b8      	movs	r0, #184	@ 0xb8
 80016f0:	f7ff ff84 	bl	80015fc <BMP180_Read16>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <BMP180_ReadCalibrationData+0xc0>)
 80016fa:	801a      	strh	r2, [r3, #0]
	MB = BMP180_Read16(0xBA);
 80016fc:	20ba      	movs	r0, #186	@ 0xba
 80016fe:	f7ff ff7d 	bl	80015fc <BMP180_Read16>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <BMP180_ReadCalibrationData+0xc4>)
 8001708:	801a      	strh	r2, [r3, #0]
	MC = BMP180_Read16(0xBC);
 800170a:	20bc      	movs	r0, #188	@ 0xbc
 800170c:	f7ff ff76 	bl	80015fc <BMP180_Read16>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <BMP180_ReadCalibrationData+0xc8>)
 8001716:	801a      	strh	r2, [r3, #0]
	MD = BMP180_Read16(0xBE);
 8001718:	20be      	movs	r0, #190	@ 0xbe
 800171a:	f7ff ff6f 	bl	80015fc <BMP180_Read16>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <BMP180_ReadCalibrationData+0xcc>)
 8001724:	801a      	strh	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000198 	.word	0x20000198
 8001730:	2000019a 	.word	0x2000019a
 8001734:	2000019c 	.word	0x2000019c
 8001738:	200001a8 	.word	0x200001a8
 800173c:	200001aa 	.word	0x200001aa
 8001740:	200001ac 	.word	0x200001ac
 8001744:	2000019e 	.word	0x2000019e
 8001748:	200001a0 	.word	0x200001a0
 800174c:	200001a2 	.word	0x200001a2
 8001750:	200001a4 	.word	0x200001a4
 8001754:	200001a6 	.word	0x200001a6

08001758 <BMP180_StartTemperature>:
char co2[30];
char temp_bmp[30];
char pressure_bmp[30];
char alttitude_bmp[30];
/* USER CODE END PFP */
void BMP180_StartTemperature(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af04      	add	r7, sp, #16
	uint8_t cmd = 0x2E;
 800175e:	232e      	movs	r3, #46	@ 0x2e
 8001760:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, 0xF4, 1, &cmd, 1, HAL_MAX_DELAY);
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	2301      	movs	r3, #1
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	22f4      	movs	r2, #244	@ 0xf4
 8001774:	21ee      	movs	r1, #238	@ 0xee
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <BMP180_StartTemperature+0x34>)
 8001778:	f002 f964 	bl	8003a44 <HAL_I2C_Mem_Write>
	HAL_Delay(5); // Wait for conversion
 800177c:	2005      	movs	r0, #5
 800177e:	f001 f859 	bl	8002834 <HAL_Delay>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000094 	.word	0x20000094

08001790 <BMP180_ReadUT>:

// Read uncompensated temperature
void BMP180_ReadUT(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	UT = BMP180_ReadU16(0xF6);
 8001794:	20f6      	movs	r0, #246	@ 0xf6
 8001796:	f7ff ff53 	bl	8001640 <BMP180_ReadU16>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b02      	ldr	r3, [pc, #8]	@ (80017a8 <BMP180_ReadUT+0x18>)
 80017a0:	601a      	str	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001b0 	.word	0x200001b0

080017ac <BMP180_StartPressure>:

// Start pressure conversion
void BMP180_StartPressure(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af04      	add	r7, sp, #16
	uint8_t cmd = 0x34;
 80017b2:	2334      	movs	r3, #52	@ 0x34
 80017b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDR, 0xF4, 1, &cmd, 1, HAL_MAX_DELAY);
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2301      	movs	r3, #1
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	22f4      	movs	r2, #244	@ 0xf4
 80017c8:	21ee      	movs	r1, #238	@ 0xee
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <BMP180_StartPressure+0x34>)
 80017cc:	f002 f93a 	bl	8003a44 <HAL_I2C_Mem_Write>
	HAL_Delay(8); // Wait for conversion
 80017d0:	2008      	movs	r0, #8
 80017d2:	f001 f82f 	bl	8002834 <HAL_Delay>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000094 	.word	0x20000094

080017e4 <BMP180_ReadUP>:

// Read uncompensated pressure
void BMP180_ReadUP(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDR, 0xF6, 1, data, 3, HAL_MAX_DELAY);
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2303      	movs	r3, #3
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2301      	movs	r3, #1
 80017fa:	22f6      	movs	r2, #246	@ 0xf6
 80017fc:	21ee      	movs	r1, #238	@ 0xee
 80017fe:	4808      	ldr	r0, [pc, #32]	@ (8001820 <BMP180_ReadUP+0x3c>)
 8001800:	f002 fa1a 	bl	8003c38 <HAL_I2C_Mem_Read>
	UP = ((data[0] << 16) | (data[1] << 8) | data[2]) >> (8);
 8001804:	793b      	ldrb	r3, [r7, #4]
 8001806:	041a      	lsls	r2, r3, #16
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	4313      	orrs	r3, r2
 800180e:	79ba      	ldrb	r2, [r7, #6]
 8001810:	4313      	orrs	r3, r2
 8001812:	121b      	asrs	r3, r3, #8
 8001814:	4a03      	ldr	r2, [pc, #12]	@ (8001824 <BMP180_ReadUP+0x40>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000094 	.word	0x20000094
 8001824:	200001b4 	.word	0x200001b4

08001828 <microDelay>:
}
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void microDelay (uint16_t delay){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <microDelay+0x2c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 800183a:	bf00      	nop
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <microDelay+0x2c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	429a      	cmp	r2, r3
 8001846:	d3f9      	bcc.n	800183c <microDelay+0x14>

}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	200000e8 	.word	0x200000e8

08001858 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	@ 0x30
 800185c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800185e:	f000 ff87 	bl	8002770 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001862:	f000 fba5 	bl	8001fb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001866:	f000 fd23 	bl	80022b0 <MX_GPIO_Init>
	MX_ADC1_Init();
 800186a:	f000 fbfd 	bl	8002068 <MX_ADC1_Init>
	MX_ADC2_Init();
 800186e:	f000 fc39 	bl	80020e4 <MX_ADC2_Init>
	MX_I2C1_Init();
 8001872:	f000 fc75 	bl	8002160 <MX_I2C1_Init>


	MX_TIM1_Init();
 8001876:	f000 fca1 	bl	80021bc <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800187a:	f000 fcef 	bl	800225c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 800187e:	4890      	ldr	r0, [pc, #576]	@ (8001ac0 <main+0x268>)
 8001880:	f003 fdce 	bl	8005420 <HAL_TIM_Base_Start>
	MPU6050_Init();
 8001884:	f7ff fc60 	bl	8001148 <MPU6050_Init>
	/* USER CODE END 2 */
	HAL_ADC_Start(&hadc1);
 8001888:	488e      	ldr	r0, [pc, #568]	@ (8001ac4 <main+0x26c>)
 800188a:	f001 f8cf 	bl	8002a2c <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 800188e:	488e      	ldr	r0, [pc, #568]	@ (8001ac8 <main+0x270>)
 8001890:	f001 f8cc 	bl	8002a2c <HAL_ADC_Start>
	BMP180_ReadCalibrationData();
 8001894:	f7ff fef8 	bl	8001688 <BMP180_ReadCalibrationData>
	/* USER CODE BEGIN WHILE */
	while (1)
	{


		if(DHT22_Start())
 8001898:	f7ff fdbc 	bl	8001414 <DHT22_Start>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 808e 	beq.w	80019c0 <main+0x168>
		{
			//sensor read temperature and humidity in 8-bit form and store them in variables:
			RH1 = DHT22_Read();
 80018a4:	f7ff fe2e 	bl	8001504 <DHT22_Read>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b87      	ldr	r3, [pc, #540]	@ (8001acc <main+0x274>)
 80018ae:	701a      	strb	r2, [r3, #0]
			RH2 = DHT22_Read();
 80018b0:	f7ff fe28 	bl	8001504 <DHT22_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b85      	ldr	r3, [pc, #532]	@ (8001ad0 <main+0x278>)
 80018ba:	701a      	strb	r2, [r3, #0]

			TC1 = DHT22_Read();
 80018bc:	f7ff fe22 	bl	8001504 <DHT22_Read>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b83      	ldr	r3, [pc, #524]	@ (8001ad4 <main+0x27c>)
 80018c6:	701a      	strb	r2, [r3, #0]
			TC2 = DHT22_Read();
 80018c8:	f7ff fe1c 	bl	8001504 <DHT22_Read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b81      	ldr	r3, [pc, #516]	@ (8001ad8 <main+0x280>)
 80018d2:	701a      	strb	r2, [r3, #0]

			//then sensor read the sum of humidity and temperature
			SUM = DHT22_Read();
 80018d4:	f7ff fe16 	bl	8001504 <DHT22_Read>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	4b7f      	ldr	r3, [pc, #508]	@ (8001adc <main+0x284>)
 80018de:	701a      	strb	r2, [r3, #0]

			//variable to store the sum of humidity and temperature without sensor read
			CHECK = RH1 + RH2 + TC1 + TC2;
 80018e0:	4b7a      	ldr	r3, [pc, #488]	@ (8001acc <main+0x274>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ad0 <main+0x278>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b79      	ldr	r3, [pc, #484]	@ (8001ad4 <main+0x27c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b78      	ldr	r3, [pc, #480]	@ (8001ad8 <main+0x280>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b78      	ldr	r3, [pc, #480]	@ (8001ae0 <main+0x288>)
 80018fe:	701a      	strb	r2, [r3, #0]

			//check if the sum of the sensor equal to the sum created by me
			if(CHECK == SUM)
 8001900:	4b77      	ldr	r3, [pc, #476]	@ (8001ae0 <main+0x288>)
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	4b75      	ldr	r3, [pc, #468]	@ (8001adc <main+0x284>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d155      	bne.n	80019b8 <main+0x160>
			{

				RH = (int)((RH1<<8)|RH2)/10;                       //division by 10 to give me percentage
 800190c:	4b6f      	ldr	r3, [pc, #444]	@ (8001acc <main+0x274>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	4a6f      	ldr	r2, [pc, #444]	@ (8001ad0 <main+0x278>)
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	4a72      	ldr	r2, [pc, #456]	@ (8001ae4 <main+0x28c>)
 800191a:	fb82 1203 	smull	r1, r2, r2, r3
 800191e:	1092      	asrs	r2, r2, #2
 8001920:	17db      	asrs	r3, r3, #31
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a70      	ldr	r2, [pc, #448]	@ (8001ae8 <main+0x290>)
 8001926:	6013      	str	r3, [r2, #0]
				snprintf(hum,sizeof(hum), ":%d",RH);      //store humidity in the "msg" variable
 8001928:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae8 <main+0x290>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6f      	ldr	r2, [pc, #444]	@ (8001aec <main+0x294>)
 800192e:	211c      	movs	r1, #28
 8001930:	486f      	ldr	r0, [pc, #444]	@ (8001af0 <main+0x298>)
 8001932:	f004 fdff 	bl	8006534 <sniprintf>
				//display humidity on the screen

				if(TC1>127)                                        //negative temperature
 8001936:	4b67      	ldr	r3, [pc, #412]	@ (8001ad4 <main+0x27c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b25b      	sxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	da11      	bge.n	8001964 <main+0x10c>
				{
					tCelsius = (int)(TC2/10)*(-1);
 8001940:	4b65      	ldr	r3, [pc, #404]	@ (8001ad8 <main+0x280>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4a6b      	ldr	r2, [pc, #428]	@ (8001af4 <main+0x29c>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	425b      	negs	r3, r3
 8001950:	4a69      	ldr	r2, [pc, #420]	@ (8001af8 <main+0x2a0>)
 8001952:	6013      	str	r3, [r2, #0]
					snprintf(temp_c,sizeof(temp_c), ",%d", tCelsius);
 8001954:	4b68      	ldr	r3, [pc, #416]	@ (8001af8 <main+0x2a0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a68      	ldr	r2, [pc, #416]	@ (8001afc <main+0x2a4>)
 800195a:	211c      	movs	r1, #28
 800195c:	4868      	ldr	r0, [pc, #416]	@ (8001b00 <main+0x2a8>)
 800195e:	f004 fde9 	bl	8006534 <sniprintf>
 8001962:	e014      	b.n	800198e <main+0x136>
					//display temp in  Celsius on the screen

				}
				else                                                            //positive temperature
				{
					tCelsius = (int)((TC1<<8)|TC2)/10;
 8001964:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <main+0x27c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad8 <main+0x280>)
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	4a5c      	ldr	r2, [pc, #368]	@ (8001ae4 <main+0x28c>)
 8001972:	fb82 1203 	smull	r1, r2, r2, r3
 8001976:	1092      	asrs	r2, r2, #2
 8001978:	17db      	asrs	r3, r3, #31
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4a5e      	ldr	r2, [pc, #376]	@ (8001af8 <main+0x2a0>)
 800197e:	6013      	str	r3, [r2, #0]
					snprintf(temp_c,sizeof(temp_c), ",%d", tCelsius);
 8001980:	4b5d      	ldr	r3, [pc, #372]	@ (8001af8 <main+0x2a0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a5d      	ldr	r2, [pc, #372]	@ (8001afc <main+0x2a4>)
 8001986:	211c      	movs	r1, #28
 8001988:	485d      	ldr	r0, [pc, #372]	@ (8001b00 <main+0x2a8>)
 800198a:	f004 fdd3 	bl	8006534 <sniprintf>
					//display temp in  Celsius on the screen

				}
				tFahrenheit = tCelsius * 9/5 + 32;
 800198e:	4b5a      	ldr	r3, [pc, #360]	@ (8001af8 <main+0x2a0>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	4a52      	ldr	r2, [pc, #328]	@ (8001ae4 <main+0x28c>)
 800199a:	fb82 1203 	smull	r1, r2, r2, r3
 800199e:	1052      	asrs	r2, r2, #1
 80019a0:	17db      	asrs	r3, r3, #31
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	3320      	adds	r3, #32
 80019a6:	4a57      	ldr	r2, [pc, #348]	@ (8001b04 <main+0x2ac>)
 80019a8:	6013      	str	r3, [r2, #0]
				snprintf(temp_f,sizeof(temp_f), ",%d", tFahrenheit);                                          //display temp in  Fahrenheit  on the screen
 80019aa:	4b56      	ldr	r3, [pc, #344]	@ (8001b04 <main+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a53      	ldr	r2, [pc, #332]	@ (8001afc <main+0x2a4>)
 80019b0:	211c      	movs	r1, #28
 80019b2:	4855      	ldr	r0, [pc, #340]	@ (8001b08 <main+0x2b0>)
 80019b4:	f004 fdbe 	bl	8006534 <sniprintf>

			}

			HAL_Delay(1000);
 80019b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019bc:	f000 ff3a 	bl	8002834 <HAL_Delay>
		}

		/* USER CODE END WHILE */
		MPU6050_Read_Calculate(&ax_mps2, &ay_mps2, &az_mps2, &pitch, &roll, &gx, &gy, &gz);
 80019c0:	4b52      	ldr	r3, [pc, #328]	@ (8001b0c <main+0x2b4>)
 80019c2:	9303      	str	r3, [sp, #12]
 80019c4:	4b52      	ldr	r3, [pc, #328]	@ (8001b10 <main+0x2b8>)
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	4b52      	ldr	r3, [pc, #328]	@ (8001b14 <main+0x2bc>)
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	4b52      	ldr	r3, [pc, #328]	@ (8001b18 <main+0x2c0>)
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4b52      	ldr	r3, [pc, #328]	@ (8001b1c <main+0x2c4>)
 80019d2:	4a53      	ldr	r2, [pc, #332]	@ (8001b20 <main+0x2c8>)
 80019d4:	4953      	ldr	r1, [pc, #332]	@ (8001b24 <main+0x2cc>)
 80019d6:	4854      	ldr	r0, [pc, #336]	@ (8001b28 <main+0x2d0>)
 80019d8:	f7ff fbde 	bl	8001198 <MPU6050_Read_Calculate>
		if (ax_mps2<0)
 80019dc:	4b52      	ldr	r3, [pc, #328]	@ (8001b28 <main+0x2d0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da0c      	bge.n	80019fe <main+0x1a6>
		{
			ax_mps2=ax_mps2*(-1);
 80019e4:	4b50      	ldr	r3, [pc, #320]	@ (8001b28 <main+0x2d0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	425b      	negs	r3, r3
 80019ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001b28 <main+0x2d0>)
 80019ec:	6013      	str	r3, [r2, #0]
			snprintf(msg,sizeof(msg),"*-%u",ax_mps2);
 80019ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <main+0x2d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a4e      	ldr	r2, [pc, #312]	@ (8001b2c <main+0x2d4>)
 80019f4:	211e      	movs	r1, #30
 80019f6:	484e      	ldr	r0, [pc, #312]	@ (8001b30 <main+0x2d8>)
 80019f8:	f004 fd9c 	bl	8006534 <sniprintf>
 80019fc:	e006      	b.n	8001a0c <main+0x1b4>
		}
		else{
			snprintf(msg,sizeof(msg),"*%u",ax_mps2);
 80019fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <main+0x2d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a4c      	ldr	r2, [pc, #304]	@ (8001b34 <main+0x2dc>)
 8001a04:	211e      	movs	r1, #30
 8001a06:	484a      	ldr	r0, [pc, #296]	@ (8001b30 <main+0x2d8>)
 8001a08:	f004 fd94 	bl	8006534 <sniprintf>
		}
		if (ay_mps2<0)
 8001a0c:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <main+0x2cc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da0c      	bge.n	8001a2e <main+0x1d6>
		{
			ay_mps2=ay_mps2*(-1);
 8001a14:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <main+0x2cc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	425b      	negs	r3, r3
 8001a1a:	4a42      	ldr	r2, [pc, #264]	@ (8001b24 <main+0x2cc>)
 8001a1c:	6013      	str	r3, [r2, #0]
			snprintf(msg1,sizeof(msg1),",-%u",ay_mps2);
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <main+0x2cc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a45      	ldr	r2, [pc, #276]	@ (8001b38 <main+0x2e0>)
 8001a24:	211e      	movs	r1, #30
 8001a26:	4845      	ldr	r0, [pc, #276]	@ (8001b3c <main+0x2e4>)
 8001a28:	f004 fd84 	bl	8006534 <sniprintf>
 8001a2c:	e006      	b.n	8001a3c <main+0x1e4>
		}
		else{
			snprintf(msg1,sizeof(msg1),",%u",ay_mps2);
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <main+0x2cc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a43      	ldr	r2, [pc, #268]	@ (8001b40 <main+0x2e8>)
 8001a34:	211e      	movs	r1, #30
 8001a36:	4841      	ldr	r0, [pc, #260]	@ (8001b3c <main+0x2e4>)
 8001a38:	f004 fd7c 	bl	8006534 <sniprintf>
		}
		if (az_mps2<0)
 8001a3c:	4b38      	ldr	r3, [pc, #224]	@ (8001b20 <main+0x2c8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da0c      	bge.n	8001a5e <main+0x206>
		{
			az_mps2=az_mps2*(-1);
 8001a44:	4b36      	ldr	r3, [pc, #216]	@ (8001b20 <main+0x2c8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	425b      	negs	r3, r3
 8001a4a:	4a35      	ldr	r2, [pc, #212]	@ (8001b20 <main+0x2c8>)
 8001a4c:	6013      	str	r3, [r2, #0]
			snprintf(msg2,sizeof(msg2),",-%u",az_mps2);
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <main+0x2c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a39      	ldr	r2, [pc, #228]	@ (8001b38 <main+0x2e0>)
 8001a54:	211e      	movs	r1, #30
 8001a56:	483b      	ldr	r0, [pc, #236]	@ (8001b44 <main+0x2ec>)
 8001a58:	f004 fd6c 	bl	8006534 <sniprintf>
 8001a5c:	e006      	b.n	8001a6c <main+0x214>
		}
		else{
			snprintf(msg2,sizeof(msg2),",%u",az_mps2);
 8001a5e:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <main+0x2c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a37      	ldr	r2, [pc, #220]	@ (8001b40 <main+0x2e8>)
 8001a64:	211e      	movs	r1, #30
 8001a66:	4837      	ldr	r0, [pc, #220]	@ (8001b44 <main+0x2ec>)
 8001a68:	f004 fd64 	bl	8006534 <sniprintf>
		}
		if (pitch<0)
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b1c <main+0x2c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da0c      	bge.n	8001a8e <main+0x236>
		{
			pitch=pitch*(-1);
 8001a74:	4b29      	ldr	r3, [pc, #164]	@ (8001b1c <main+0x2c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	425b      	negs	r3, r3
 8001a7a:	4a28      	ldr	r2, [pc, #160]	@ (8001b1c <main+0x2c4>)
 8001a7c:	6013      	str	r3, [r2, #0]
			snprintf(msg3,sizeof(msg3),",-%d",pitch);
 8001a7e:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <main+0x2c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <main+0x2f0>)
 8001a84:	211e      	movs	r1, #30
 8001a86:	4831      	ldr	r0, [pc, #196]	@ (8001b4c <main+0x2f4>)
 8001a88:	f004 fd54 	bl	8006534 <sniprintf>
 8001a8c:	e006      	b.n	8001a9c <main+0x244>
		}
		else{
			snprintf(msg3,sizeof(msg3),",%d",pitch);
 8001a8e:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <main+0x2c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <main+0x2a4>)
 8001a94:	211e      	movs	r1, #30
 8001a96:	482d      	ldr	r0, [pc, #180]	@ (8001b4c <main+0x2f4>)
 8001a98:	f004 fd4c 	bl	8006534 <sniprintf>
		}
		if (roll<0)
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <main+0x2c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da57      	bge.n	8001b54 <main+0x2fc>
		{
			roll=roll*(-1);
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <main+0x2c0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	425b      	negs	r3, r3
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <main+0x2c0>)
 8001aac:	6013      	str	r3, [r2, #0]
			snprintf(msg4,sizeof(msg4),",-%d",roll);
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <main+0x2c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a25      	ldr	r2, [pc, #148]	@ (8001b48 <main+0x2f0>)
 8001ab4:	211e      	movs	r1, #30
 8001ab6:	4826      	ldr	r0, [pc, #152]	@ (8001b50 <main+0x2f8>)
 8001ab8:	f004 fd3c 	bl	8006534 <sniprintf>
 8001abc:	e051      	b.n	8001b62 <main+0x30a>
 8001abe:	bf00      	nop
 8001ac0:	200000e8 	.word	0x200000e8
 8001ac4:	200001c8 	.word	0x200001c8
 8001ac8:	200001f8 	.word	0x200001f8
 8001acc:	20000178 	.word	0x20000178
 8001ad0:	20000179 	.word	0x20000179
 8001ad4:	2000017a 	.word	0x2000017a
 8001ad8:	2000017b 	.word	0x2000017b
 8001adc:	2000017c 	.word	0x2000017c
 8001ae0:	2000017d 	.word	0x2000017d
 8001ae4:	66666667 	.word	0x66666667
 8001ae8:	20000190 	.word	0x20000190
 8001aec:	08008130 	.word	0x08008130
 8001af0:	20000260 	.word	0x20000260
 8001af4:	cccccccd 	.word	0xcccccccd
 8001af8:	20000188 	.word	0x20000188
 8001afc:	08008134 	.word	0x08008134
 8001b00:	20000228 	.word	0x20000228
 8001b04:	2000018c 	.word	0x2000018c
 8001b08:	20000244 	.word	0x20000244
 8001b0c:	2000007c 	.word	0x2000007c
 8001b10:	2000007a 	.word	0x2000007a
 8001b14:	20000078 	.word	0x20000078
 8001b18:	20000084 	.word	0x20000084
 8001b1c:	20000080 	.word	0x20000080
 8001b20:	20000090 	.word	0x20000090
 8001b24:	2000008c 	.word	0x2000008c
 8001b28:	20000088 	.word	0x20000088
 8001b2c:	08008138 	.word	0x08008138
 8001b30:	2000027c 	.word	0x2000027c
 8001b34:	08008140 	.word	0x08008140
 8001b38:	08008144 	.word	0x08008144
 8001b3c:	2000029c 	.word	0x2000029c
 8001b40:	0800814c 	.word	0x0800814c
 8001b44:	200002bc 	.word	0x200002bc
 8001b48:	08008150 	.word	0x08008150
 8001b4c:	200002dc 	.word	0x200002dc
 8001b50:	200002fc 	.word	0x200002fc
		}
		else{
			snprintf(msg4,sizeof(msg4),",%d",roll);
 8001b54:	4b6a      	ldr	r3, [pc, #424]	@ (8001d00 <main+0x4a8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6a      	ldr	r2, [pc, #424]	@ (8001d04 <main+0x4ac>)
 8001b5a:	211e      	movs	r1, #30
 8001b5c:	486a      	ldr	r0, [pc, #424]	@ (8001d08 <main+0x4b0>)
 8001b5e:	f004 fce9 	bl	8006534 <sniprintf>
		/* USER CODE BEGIN 3 */



		/* USER CODE END WHILE */
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b66:	4869      	ldr	r0, [pc, #420]	@ (8001d0c <main+0x4b4>)
 8001b68:	f001 f80e 	bl	8002b88 <HAL_ADC_PollForConversion>

		// Get the ADC value from the sensor
		readValue = HAL_ADC_GetValue(&hadc1);
 8001b6c:	4867      	ldr	r0, [pc, #412]	@ (8001d0c <main+0x4b4>)
 8001b6e:	f001 f911 	bl	8002d94 <HAL_ADC_GetValue>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <main+0x4b8>)
 8001b78:	801a      	strh	r2, [r3, #0]
		snprintf(IR,sizeof(IR),"/,%d",readValue);
 8001b7a:	4b65      	ldr	r3, [pc, #404]	@ (8001d10 <main+0x4b8>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	4a65      	ldr	r2, [pc, #404]	@ (8001d14 <main+0x4bc>)
 8001b80:	211e      	movs	r1, #30
 8001b82:	4865      	ldr	r0, [pc, #404]	@ (8001d18 <main+0x4c0>)
 8001b84:	f004 fcd6 	bl	8006534 <sniprintf>
		HAL_Delay(1000);
 8001b88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b8c:	f000 fe52 	bl	8002834 <HAL_Delay>

		// Poll for ADC conversion result
		HAL_ADC_PollForConversion(&hadc2, 1000);
 8001b90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b94:	4861      	ldr	r0, [pc, #388]	@ (8001d1c <main+0x4c4>)
 8001b96:	f000 fff7 	bl	8002b88 <HAL_ADC_PollForConversion>

		// Get the ADC value from the sensor
		readValue2 = HAL_ADC_GetValue(&hadc2);
 8001b9a:	4860      	ldr	r0, [pc, #384]	@ (8001d1c <main+0x4c4>)
 8001b9c:	f001 f8fa 	bl	8002d94 <HAL_ADC_GetValue>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d20 <main+0x4c8>)
 8001ba6:	801a      	strh	r2, [r3, #0]
		snprintf(co2,sizeof(co2),"@%d",readValue2);
 8001ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d20 <main+0x4c8>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	4a5d      	ldr	r2, [pc, #372]	@ (8001d24 <main+0x4cc>)
 8001bae:	211e      	movs	r1, #30
 8001bb0:	485d      	ldr	r0, [pc, #372]	@ (8001d28 <main+0x4d0>)
 8001bb2:	f004 fcbf 	bl	8006534 <sniprintf>

		HAL_Delay(1000);
 8001bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bba:	f000 fe3b 	bl	8002834 <HAL_Delay>

		BMP180_StartTemperature();
 8001bbe:	f7ff fdcb 	bl	8001758 <BMP180_StartTemperature>
		BMP180_ReadUT();
 8001bc2:	f7ff fde5 	bl	8001790 <BMP180_ReadUT>

		BMP180_StartPressure();
 8001bc6:	f7ff fdf1 	bl	80017ac <BMP180_StartPressure>
		BMP180_ReadUP();
 8001bca:	f7ff fe0b 	bl	80017e4 <BMP180_ReadUP>

		// Calculate true temperature
		int32_t X1 = ((UT - (int32_t)AC6) * (int32_t)AC5) >> 15;
 8001bce:	4b57      	ldr	r3, [pc, #348]	@ (8001d2c <main+0x4d4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a57      	ldr	r2, [pc, #348]	@ (8001d30 <main+0x4d8>)
 8001bd4:	8812      	ldrh	r2, [r2, #0]
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	4a56      	ldr	r2, [pc, #344]	@ (8001d34 <main+0x4dc>)
 8001bda:	8812      	ldrh	r2, [r2, #0]
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	13db      	asrs	r3, r3, #15
 8001be2:	61fb      	str	r3, [r7, #28]
		int32_t X2 = ((int32_t)MC << 11) / (X1 + (int32_t)MD);
 8001be4:	4b54      	ldr	r3, [pc, #336]	@ (8001d38 <main+0x4e0>)
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	02da      	lsls	r2, r3, #11
 8001bec:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <main+0x4e4>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	440b      	add	r3, r1
 8001bf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bfc:	61bb      	str	r3, [r7, #24]
		B5 = X1 + X2;
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a4e      	ldr	r2, [pc, #312]	@ (8001d40 <main+0x4e8>)
 8001c06:	6013      	str	r3, [r2, #0]
		temperature = ((B5 + 8) >> 4) / 10.0f;
 8001c08:	4b4d      	ldr	r3, [pc, #308]	@ (8001d40 <main+0x4e8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	111b      	asrs	r3, r3, #4
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f843 	bl	8000c9c <__aeabi_i2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	494a      	ldr	r1, [pc, #296]	@ (8001d44 <main+0x4ec>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f946 	bl	8000eac <__aeabi_fdiv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fa6a 	bl	80010fc <__aeabi_f2iz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a47      	ldr	r2, [pc, #284]	@ (8001d48 <main+0x4f0>)
 8001c2c:	6013      	str	r3, [r2, #0]
		snprintf(temp_bmp,sizeof(temp_bmp), "%d", temperature);
 8001c2e:	4b46      	ldr	r3, [pc, #280]	@ (8001d48 <main+0x4f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a46      	ldr	r2, [pc, #280]	@ (8001d4c <main+0x4f4>)
 8001c34:	211e      	movs	r1, #30
 8001c36:	4846      	ldr	r0, [pc, #280]	@ (8001d50 <main+0x4f8>)
 8001c38:	f004 fc7c 	bl	8006534 <sniprintf>

		// Calculate true pressure
		int32_t B6 = B5 - 4000;
 8001c3c:	4b40      	ldr	r3, [pc, #256]	@ (8001d40 <main+0x4e8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001c44:	617b      	str	r3, [r7, #20]
		X1 = ((int32_t)B2 * ((B6 * B6) >> 12)) >> 11;
 8001c46:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <main+0x4fc>)
 8001c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fb03 f303 	mul.w	r3, r3, r3
 8001c54:	131b      	asrs	r3, r3, #12
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	12db      	asrs	r3, r3, #11
 8001c5c:	61fb      	str	r3, [r7, #28]
		X2 = ((int32_t)AC2 * B6) >> 11;
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d58 <main+0x500>)
 8001c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c64:	461a      	mov	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	12db      	asrs	r3, r3, #11
 8001c6e:	61bb      	str	r3, [r7, #24]
		int32_t X3 = X1 + X2;
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4413      	add	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
		int32_t B3 = (((int32_t)AC1 * 4 + X3) + 2) >> 2;
 8001c78:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <main+0x504>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	009a      	lsls	r2, r3, #2
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	3302      	adds	r3, #2
 8001c86:	109b      	asrs	r3, r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]

		X1 = ((int32_t)AC3 * B6) >> 13;
 8001c8a:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <main+0x508>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	461a      	mov	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	135b      	asrs	r3, r3, #13
 8001c9a:	61fb      	str	r3, [r7, #28]
		X2 = ((B1 * ((B6 * B6) >> 12))) >> 16;
 8001c9c:	4b31      	ldr	r3, [pc, #196]	@ (8001d64 <main+0x50c>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fb03 f303 	mul.w	r3, r3, r3
 8001caa:	131b      	asrs	r3, r3, #12
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	141b      	asrs	r3, r3, #16
 8001cb2:	61bb      	str	r3, [r7, #24]
		X3 = ((X1 + X2) + 2) >> 2;
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4413      	add	r3, r2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	109b      	asrs	r3, r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]

		uint32_t B4 = ((uint32_t)AC4 * (uint32_t)(X3 + 32768)) >> 15;
 8001cc0:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <main+0x510>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	0bdb      	lsrs	r3, r3, #15
 8001cd2:	60bb      	str	r3, [r7, #8]
		uint32_t B7 = ((uint32_t)UP - B3) * 50000;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <main+0x514>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	607b      	str	r3, [r7, #4]

		if (B7 < 0x80000000) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db42      	blt.n	8001d74 <main+0x51c>
			pressure = (B7 * 2) / B4;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	005a      	lsls	r2, r3, #1
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <main+0x518>)
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e041      	b.n	8001d84 <main+0x52c>
 8001d00:	20000084 	.word	0x20000084
 8001d04:	08008134 	.word	0x08008134
 8001d08:	200002fc 	.word	0x200002fc
 8001d0c:	200001c8 	.word	0x200001c8
 8001d10:	20000194 	.word	0x20000194
 8001d14:	08008158 	.word	0x08008158
 8001d18:	2000031c 	.word	0x2000031c
 8001d1c:	200001f8 	.word	0x200001f8
 8001d20:	20000196 	.word	0x20000196
 8001d24:	08008160 	.word	0x08008160
 8001d28:	2000033c 	.word	0x2000033c
 8001d2c:	200001b0 	.word	0x200001b0
 8001d30:	200001ac 	.word	0x200001ac
 8001d34:	200001aa 	.word	0x200001aa
 8001d38:	200001a4 	.word	0x200001a4
 8001d3c:	200001a6 	.word	0x200001a6
 8001d40:	200001b8 	.word	0x200001b8
 8001d44:	41200000 	.word	0x41200000
 8001d48:	200001bc 	.word	0x200001bc
 8001d4c:	08008164 	.word	0x08008164
 8001d50:	2000035c 	.word	0x2000035c
 8001d54:	200001a0 	.word	0x200001a0
 8001d58:	2000019a 	.word	0x2000019a
 8001d5c:	20000198 	.word	0x20000198
 8001d60:	2000019c 	.word	0x2000019c
 8001d64:	2000019e 	.word	0x2000019e
 8001d68:	200001a8 	.word	0x200001a8
 8001d6c:	200001b4 	.word	0x200001b4
 8001d70:	200001c0 	.word	0x200001c0
		} else {
			pressure = (B7 / B4) * 2;
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b77      	ldr	r3, [pc, #476]	@ (8001f60 <main+0x708>)
 8001d82:	601a      	str	r2, [r3, #0]
		}

		X1 = (pressure >> 8) * (pressure >> 8);
 8001d84:	4b76      	ldr	r3, [pc, #472]	@ (8001f60 <main+0x708>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	121b      	asrs	r3, r3, #8
 8001d8a:	4a75      	ldr	r2, [pc, #468]	@ (8001f60 <main+0x708>)
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	1212      	asrs	r2, r2, #8
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	61fb      	str	r3, [r7, #28]
		X1 = (X1 * 3038) >> 16;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f640 32de 	movw	r2, #3038	@ 0xbde
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	141b      	asrs	r3, r3, #16
 8001da2:	61fb      	str	r3, [r7, #28]
		X2 = ((-7357) * (int32_t)pressure) >> 16;
 8001da4:	4b6e      	ldr	r3, [pc, #440]	@ (8001f60 <main+0x708>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a6e      	ldr	r2, [pc, #440]	@ (8001f64 <main+0x70c>)
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	141b      	asrs	r3, r3, #16
 8001db0:	61bb      	str	r3, [r7, #24]
		pressure = (pressure + ((X1 + X2 + 3791) >> 4));
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4413      	add	r3, r2
 8001db8:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001dbc:	111a      	asrs	r2, r3, #4
 8001dbe:	4b68      	ldr	r3, [pc, #416]	@ (8001f60 <main+0x708>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a66      	ldr	r2, [pc, #408]	@ (8001f60 <main+0x708>)
 8001dc6:	6013      	str	r3, [r2, #0]
		snprintf(pressure_bmp,sizeof(pressure_bmp), "#%d",pressure);
 8001dc8:	4b65      	ldr	r3, [pc, #404]	@ (8001f60 <main+0x708>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a66      	ldr	r2, [pc, #408]	@ (8001f68 <main+0x710>)
 8001dce:	211e      	movs	r1, #30
 8001dd0:	4866      	ldr	r0, [pc, #408]	@ (8001f6c <main+0x714>)
 8001dd2:	f004 fbaf 	bl	8006534 <sniprintf>

		// Calculate altitude
		altitude = 44330.0f * (1.0f - pow((float)pressure / 101325.0f, 0.1903f));
 8001dd6:	4b62      	ldr	r3, [pc, #392]	@ (8001f60 <main+0x708>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe ff5e 	bl	8000c9c <__aeabi_i2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4963      	ldr	r1, [pc, #396]	@ (8001f70 <main+0x718>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f861 	bl	8000eac <__aeabi_fdiv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb1b 	bl	8000428 <__aeabi_f2d>
 8001df2:	a357      	add	r3, pc, #348	@ (adr r3, 8001f50 <main+0x6f8>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f005 f860 	bl	8006ebc <pow>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	f04f 0000 	mov.w	r0, #0
 8001e04:	495b      	ldr	r1, [pc, #364]	@ (8001f74 <main+0x71c>)
 8001e06:	f7fe f9af 	bl	8000168 <__aeabi_dsub>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	a351      	add	r3, pc, #324	@ (adr r3, 8001f58 <main+0x700>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fb5e 	bl	80004d8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe08 	bl	8000a38 <__aeabi_d2iz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a53      	ldr	r2, [pc, #332]	@ (8001f78 <main+0x720>)
 8001e2c:	6013      	str	r3, [r2, #0]
		snprintf(alttitude_bmp,sizeof(alttitude_bmp), ",%d",altitude);
 8001e2e:	4b52      	ldr	r3, [pc, #328]	@ (8001f78 <main+0x720>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a52      	ldr	r2, [pc, #328]	@ (8001f7c <main+0x724>)
 8001e34:	211e      	movs	r1, #30
 8001e36:	4852      	ldr	r0, [pc, #328]	@ (8001f80 <main+0x728>)
 8001e38:	f004 fb7c 	bl	8006534 <sniprintf>





		HAL_UART_Transmit(&huart1, (uint8_t *)&hum,strlen(hum), HAL_MAX_DELAY);
 8001e3c:	4851      	ldr	r0, [pc, #324]	@ (8001f84 <main+0x72c>)
 8001e3e:	f7fe f987 	bl	8000150 <strlen>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	494e      	ldr	r1, [pc, #312]	@ (8001f84 <main+0x72c>)
 8001e4c:	484e      	ldr	r0, [pc, #312]	@ (8001f88 <main+0x730>)
 8001e4e:	f003 fdab 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&temp_c,strlen(temp_c), HAL_MAX_DELAY);
 8001e52:	484e      	ldr	r0, [pc, #312]	@ (8001f8c <main+0x734>)
 8001e54:	f7fe f97c 	bl	8000150 <strlen>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	494a      	ldr	r1, [pc, #296]	@ (8001f8c <main+0x734>)
 8001e62:	4849      	ldr	r0, [pc, #292]	@ (8001f88 <main+0x730>)
 8001e64:	f003 fda0 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&temp_f,strlen(temp_f), HAL_MAX_DELAY);
 8001e68:	4849      	ldr	r0, [pc, #292]	@ (8001f90 <main+0x738>)
 8001e6a:	f7fe f971 	bl	8000150 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	4946      	ldr	r1, [pc, #280]	@ (8001f90 <main+0x738>)
 8001e78:	4843      	ldr	r0, [pc, #268]	@ (8001f88 <main+0x730>)
 8001e7a:	f003 fd95 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), HAL_MAX_DELAY);
 8001e7e:	4845      	ldr	r0, [pc, #276]	@ (8001f94 <main+0x73c>)
 8001e80:	f7fe f966 	bl	8000150 <strlen>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	4941      	ldr	r1, [pc, #260]	@ (8001f94 <main+0x73c>)
 8001e8e:	483e      	ldr	r0, [pc, #248]	@ (8001f88 <main+0x730>)
 8001e90:	f003 fd8a 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&msg1, strlen(msg1), HAL_MAX_DELAY);
 8001e94:	4840      	ldr	r0, [pc, #256]	@ (8001f98 <main+0x740>)
 8001e96:	f7fe f95b 	bl	8000150 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	493d      	ldr	r1, [pc, #244]	@ (8001f98 <main+0x740>)
 8001ea4:	4838      	ldr	r0, [pc, #224]	@ (8001f88 <main+0x730>)
 8001ea6:	f003 fd7f 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&msg2, strlen(msg2), HAL_MAX_DELAY);
 8001eaa:	483c      	ldr	r0, [pc, #240]	@ (8001f9c <main+0x744>)
 8001eac:	f7fe f950 	bl	8000150 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	4938      	ldr	r1, [pc, #224]	@ (8001f9c <main+0x744>)
 8001eba:	4833      	ldr	r0, [pc, #204]	@ (8001f88 <main+0x730>)
 8001ebc:	f003 fd74 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&msg3, strlen(msg3), HAL_MAX_DELAY);
 8001ec0:	4837      	ldr	r0, [pc, #220]	@ (8001fa0 <main+0x748>)
 8001ec2:	f7fe f945 	bl	8000150 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	4934      	ldr	r1, [pc, #208]	@ (8001fa0 <main+0x748>)
 8001ed0:	482d      	ldr	r0, [pc, #180]	@ (8001f88 <main+0x730>)
 8001ed2:	f003 fd69 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&msg4, strlen(msg4), HAL_MAX_DELAY);
 8001ed6:	4833      	ldr	r0, [pc, #204]	@ (8001fa4 <main+0x74c>)
 8001ed8:	f7fe f93a 	bl	8000150 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	492f      	ldr	r1, [pc, #188]	@ (8001fa4 <main+0x74c>)
 8001ee6:	4828      	ldr	r0, [pc, #160]	@ (8001f88 <main+0x730>)
 8001ee8:	f003 fd5e 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&IR, strlen(IR), HAL_MAX_DELAY);
 8001eec:	482e      	ldr	r0, [pc, #184]	@ (8001fa8 <main+0x750>)
 8001eee:	f7fe f92f 	bl	8000150 <strlen>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	492b      	ldr	r1, [pc, #172]	@ (8001fa8 <main+0x750>)
 8001efc:	4822      	ldr	r0, [pc, #136]	@ (8001f88 <main+0x730>)
 8001efe:	f003 fd53 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&co2, strlen(co2), HAL_MAX_DELAY);
 8001f02:	482a      	ldr	r0, [pc, #168]	@ (8001fac <main+0x754>)
 8001f04:	f7fe f924 	bl	8000150 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	4926      	ldr	r1, [pc, #152]	@ (8001fac <main+0x754>)
 8001f12:	481d      	ldr	r0, [pc, #116]	@ (8001f88 <main+0x730>)
 8001f14:	f003 fd48 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&pressure_bmp,strlen(pressure_bmp), HAL_MAX_DELAY);
 8001f18:	4814      	ldr	r0, [pc, #80]	@ (8001f6c <main+0x714>)
 8001f1a:	f7fe f919 	bl	8000150 <strlen>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	4911      	ldr	r1, [pc, #68]	@ (8001f6c <main+0x714>)
 8001f28:	4817      	ldr	r0, [pc, #92]	@ (8001f88 <main+0x730>)
 8001f2a:	f003 fd3d 	bl	80059a8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&alttitude_bmp,strlen(alttitude_bmp), HAL_MAX_DELAY);
 8001f2e:	4814      	ldr	r0, [pc, #80]	@ (8001f80 <main+0x728>)
 8001f30:	f7fe f90e 	bl	8000150 <strlen>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	4910      	ldr	r1, [pc, #64]	@ (8001f80 <main+0x728>)
 8001f3e:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <main+0x730>)
 8001f40:	f003 fd32 	bl	80059a8 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001f44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f48:	f000 fc74 	bl	8002834 <HAL_Delay>
	{
 8001f4c:	e4a4      	b.n	8001898 <main+0x40>
 8001f4e:	bf00      	nop
 8001f50:	20000000 	.word	0x20000000
 8001f54:	3fc85bc0 	.word	0x3fc85bc0
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40e5a540 	.word	0x40e5a540
 8001f60:	200001c0 	.word	0x200001c0
 8001f64:	ffffe343 	.word	0xffffe343
 8001f68:	08008168 	.word	0x08008168
 8001f6c:	2000037c 	.word	0x2000037c
 8001f70:	47c5e680 	.word	0x47c5e680
 8001f74:	3ff00000 	.word	0x3ff00000
 8001f78:	200001c4 	.word	0x200001c4
 8001f7c:	08008134 	.word	0x08008134
 8001f80:	2000039c 	.word	0x2000039c
 8001f84:	20000260 	.word	0x20000260
 8001f88:	20000130 	.word	0x20000130
 8001f8c:	20000228 	.word	0x20000228
 8001f90:	20000244 	.word	0x20000244
 8001f94:	2000027c 	.word	0x2000027c
 8001f98:	2000029c 	.word	0x2000029c
 8001f9c:	200002bc 	.word	0x200002bc
 8001fa0:	200002dc 	.word	0x200002dc
 8001fa4:	200002fc 	.word	0x200002fc
 8001fa8:	2000031c 	.word	0x2000031c
 8001fac:	2000033c 	.word	0x2000033c

08001fb0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b094      	sub	sp, #80	@ 0x50
 8001fb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fba:	2228      	movs	r2, #40	@ 0x28
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 faee 	bl	80065a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ffc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002000:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fc3e 	bl	8004888 <HAL_RCC_OscConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8002012:	f000 f999 	bl	8002348 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
 8002018:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002026:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2102      	movs	r1, #2
 8002032:	4618      	mov	r0, r3
 8002034:	f002 feaa 	bl	8004d8c <HAL_RCC_ClockConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0x92>
	{
		Error_Handler();
 800203e:	f000 f983 	bl	8002348 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002042:	2302      	movs	r3, #2
 8002044:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800204a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f003 f82a 	bl	80050a8 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800205a:	f000 f975 	bl	8002348 <Error_Handler>
	}
}
 800205e:	bf00      	nop
 8002060:	3750      	adds	r7, #80	@ 0x50
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <MX_ADC1_Init+0x74>)
 800207a:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <MX_ADC1_Init+0x78>)
 800207c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800207e:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <MX_ADC1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <MX_ADC1_Init+0x74>)
 8002086:	2201      	movs	r2, #1
 8002088:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800208a:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <MX_ADC1_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <MX_ADC1_Init+0x74>)
 8002092:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002096:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_ADC1_Init+0x74>)
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <MX_ADC1_Init+0x74>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a4:	480d      	ldr	r0, [pc, #52]	@ (80020dc <MX_ADC1_Init+0x74>)
 80020a6:	f000 fbe9 	bl	800287c <HAL_ADC_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 80020b0:	f000 f94a 	bl	8002348 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_ADC1_Init+0x74>)
 80020c6:	f000 fe71 	bl	8002dac <HAL_ADC_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 80020d0:	f000 f93a 	bl	8002348 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200001c8 	.word	0x200001c8
 80020e0:	40012400 	.word	0x40012400

080020e4 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <MX_ADC2_Init+0x74>)
 80020f6:	4a19      	ldr	r2, [pc, #100]	@ (800215c <MX_ADC2_Init+0x78>)
 80020f8:	601a      	str	r2, [r3, #0]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <MX_ADC2_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8002100:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <MX_ADC2_Init+0x74>)
 8002102:	2201      	movs	r2, #1
 8002104:	731a      	strb	r2, [r3, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002106:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <MX_ADC2_Init+0x74>)
 8002108:	2200      	movs	r2, #0
 800210a:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <MX_ADC2_Init+0x74>)
 800210e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002112:	61da      	str	r2, [r3, #28]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002114:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <MX_ADC2_Init+0x74>)
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
	hadc2.Init.NbrOfConversion = 1;
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <MX_ADC2_Init+0x74>)
 800211c:	2201      	movs	r2, #1
 800211e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002120:	480d      	ldr	r0, [pc, #52]	@ (8002158 <MX_ADC2_Init+0x74>)
 8002122:	f000 fbab 	bl	800287c <HAL_ADC_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_ADC2_Init+0x4c>
	{
		Error_Handler();
 800212c:	f000 f90c 	bl	8002348 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8002130:	2302      	movs	r3, #2
 8002132:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002134:	2301      	movs	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_ADC2_Init+0x74>)
 8002142:	f000 fe33 	bl	8002dac <HAL_ADC_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_ADC2_Init+0x6c>
	{
		Error_Handler();
 800214c:	f000 f8fc 	bl	8002348 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200001f8 	.word	0x200001f8
 800215c:	40012800 	.word	0x40012800

08002160 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <MX_I2C1_Init+0x50>)
 8002166:	4a13      	ldr	r2, [pc, #76]	@ (80021b4 <MX_I2C1_Init+0x54>)
 8002168:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <MX_I2C1_Init+0x50>)
 800216c:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <MX_I2C1_Init+0x58>)
 800216e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002170:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <MX_I2C1_Init+0x50>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002176:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <MX_I2C1_Init+0x50>)
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <MX_I2C1_Init+0x50>)
 800217e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002182:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002184:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <MX_I2C1_Init+0x50>)
 8002186:	2200      	movs	r2, #0
 8002188:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <MX_I2C1_Init+0x50>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002190:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <MX_I2C1_Init+0x50>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <MX_I2C1_Init+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <MX_I2C1_Init+0x50>)
 800219e:	f001 fb0d 	bl	80037bc <HAL_I2C_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80021a8:	f000 f8ce 	bl	8002348 <Error_Handler>

	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000094 	.word	0x20000094
 80021b4:	40005400 	.word	0x40005400
 80021b8:	000186a0 	.word	0x000186a0

080021bc <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	463b      	mov	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <MX_TIM1_Init+0x98>)
 80021da:	4a1f      	ldr	r2, [pc, #124]	@ (8002258 <MX_TIM1_Init+0x9c>)
 80021dc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 80021de:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <MX_TIM1_Init+0x98>)
 80021e0:	2247      	movs	r2, #71	@ 0x47
 80021e2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <MX_TIM1_Init+0x98>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <MX_TIM1_Init+0x98>)
 80021ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f2:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <MX_TIM1_Init+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80021f8:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <MX_TIM1_Init+0x98>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <MX_TIM1_Init+0x98>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002204:	4813      	ldr	r0, [pc, #76]	@ (8002254 <MX_TIM1_Init+0x98>)
 8002206:	f003 f8bb 	bl	8005380 <HAL_TIM_Base_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8002210:	f000 f89a 	bl	8002348 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002218:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4619      	mov	r1, r3
 8002220:	480c      	ldr	r0, [pc, #48]	@ (8002254 <MX_TIM1_Init+0x98>)
 8002222:	f003 f947 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 800222c:	f000 f88c 	bl	8002348 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002238:	463b      	mov	r3, r7
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <MX_TIM1_Init+0x98>)
 800223e:	f003 fb05 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8002248:	f000 f87e 	bl	8002348 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200000e8 	.word	0x200000e8
 8002258:	40012c00 	.word	0x40012c00

0800225c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 8002262:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <MX_USART1_UART_Init+0x50>)
 8002264:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 8002268:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800226c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800227a:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 8002282:	220c      	movs	r2, #12
 8002284:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002286:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002292:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <MX_USART1_UART_Init+0x4c>)
 8002294:	f003 fb38 	bl	8005908 <HAL_UART_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800229e:	f000 f853 	bl	8002348 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000130 	.word	0x20000130
 80022ac:	40013800 	.word	0x40013800

080022b0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022ca:	f043 0320 	orr.w	r3, r3, #32
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a11      	ldr	r2, [pc, #68]	@ (8002340 <MX_GPIO_Init+0x90>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <MX_GPIO_Init+0x90>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002312:	480c      	ldr	r0, [pc, #48]	@ (8002344 <MX_GPIO_Init+0x94>)
 8002314:	f001 fa39 	bl	800378a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800231c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2302      	movs	r3, #2
 8002328:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4619      	mov	r1, r3
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <MX_GPIO_Init+0x94>)
 8002332:	f001 f88f 	bl	8003454 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	40010c00 	.word	0x40010c00

08002348 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <Error_Handler+0x8>

08002354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_MspInit+0x5c>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <HAL_MspInit+0x5c>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6193      	str	r3, [r2, #24]
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_MspInit+0x5c>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <HAL_MspInit+0x5c>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a0e      	ldr	r2, [pc, #56]	@ (80023b0 <HAL_MspInit+0x5c>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <HAL_MspInit+0x5c>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <HAL_MspInit+0x60>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_MspInit+0x60>)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000

080023b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a28      	ldr	r2, [pc, #160]	@ (8002474 <HAL_ADC_MspInit+0xbc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d122      	bne.n	800241e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023d8:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a26      	ldr	r2, [pc, #152]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 80023de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a20      	ldr	r2, [pc, #128]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240c:	2303      	movs	r3, #3
 800240e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0318 	add.w	r3, r7, #24
 8002414:	4619      	mov	r1, r3
 8002416:	4819      	ldr	r0, [pc, #100]	@ (800247c <HAL_ADC_MspInit+0xc4>)
 8002418:	f001 f81c 	bl	8003454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800241c:	e026      	b.n	800246c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a17      	ldr	r2, [pc, #92]	@ (8002480 <HAL_ADC_MspInit+0xc8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d121      	bne.n	800246c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002428:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4a12      	ldr	r2, [pc, #72]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002432:	6193      	str	r3, [r2, #24]
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a0c      	ldr	r2, [pc, #48]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_ADC_MspInit+0xc0>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002458:	2304      	movs	r3, #4
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245c:	2303      	movs	r3, #3
 800245e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 0318 	add.w	r3, r7, #24
 8002464:	4619      	mov	r1, r3
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <HAL_ADC_MspInit+0xc4>)
 8002468:	f000 fff4 	bl	8003454 <HAL_GPIO_Init>
}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	@ 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40012400 	.word	0x40012400
 8002478:	40021000 	.word	0x40021000
 800247c:	40010800 	.word	0x40010800
 8002480:	40012800 	.word	0x40012800

08002484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	@ 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0318 	add.w	r3, r7, #24
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <HAL_I2C_MspInit+0xc8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d124      	bne.n	80024ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a29      	ldr	r2, [pc, #164]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024aa:	f043 0308 	orr.w	r3, r3, #8
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024bc:	23c0      	movs	r3, #192	@ 0xc0
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c0:	2312      	movs	r3, #18
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 0318 	add.w	r3, r7, #24
 80024cc:	4619      	mov	r1, r3
 80024ce:	4821      	ldr	r0, [pc, #132]	@ (8002554 <HAL_I2C_MspInit+0xd0>)
 80024d0:	f000 ffc0 	bl	8003454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024de:	61d3      	str	r3, [r2, #28]
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024ec:	e029      	b.n	8002542 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a19      	ldr	r2, [pc, #100]	@ (8002558 <HAL_I2C_MspInit+0xd4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d124      	bne.n	8002542 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002510:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002516:	2312      	movs	r3, #18
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0318 	add.w	r3, r7, #24
 8002522:	4619      	mov	r1, r3
 8002524:	480b      	ldr	r0, [pc, #44]	@ (8002554 <HAL_I2C_MspInit+0xd0>)
 8002526:	f000 ff95 	bl	8003454 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 8002530:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_I2C_MspInit+0xcc>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	@ 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40005400 	.word	0x40005400
 8002550:	40021000 	.word	0x40021000
 8002554:	40010c00 	.word	0x40010c00
 8002558:	40005800 	.word	0x40005800

0800255c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_TIM_Base_MspInit+0x34>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d10b      	bne.n	8002586 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_TIM_Base_MspInit+0x38>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <HAL_TIM_Base_MspInit+0x38>)
 8002574:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_TIM_Base_MspInit+0x38>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a20      	ldr	r2, [pc, #128]	@ (8002634 <HAL_UART_MspInit+0x9c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d139      	bne.n	800262c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <HAL_UART_MspInit+0xa0>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002638 <HAL_UART_MspInit+0xa0>)
 80025be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c2:	6193      	str	r3, [r2, #24]
 80025c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <HAL_UART_MspInit+0xa0>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_UART_MspInit+0xa0>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a18      	ldr	r2, [pc, #96]	@ (8002638 <HAL_UART_MspInit+0xa0>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_UART_MspInit+0xa0>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4619      	mov	r1, r3
 80025fc:	480f      	ldr	r0, [pc, #60]	@ (800263c <HAL_UART_MspInit+0xa4>)
 80025fe:	f000 ff29 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	4619      	mov	r1, r3
 8002616:	4809      	ldr	r0, [pc, #36]	@ (800263c <HAL_UART_MspInit+0xa4>)
 8002618:	f000 ff1c 	bl	8003454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	2025      	movs	r0, #37	@ 0x25
 8002622:	f000 fe2e 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002626:	2025      	movs	r0, #37	@ 0x25
 8002628:	f000 fe47 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40013800 	.word	0x40013800
 8002638:	40021000 	.word	0x40021000
 800263c:	40010800 	.word	0x40010800

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <NMI_Handler+0x4>

08002648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <HardFault_Handler+0x4>

08002650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <MemManage_Handler+0x4>

08002658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <UsageFault_Handler+0x4>

08002668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002690:	f000 f8b4 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}

08002698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <USART1_IRQHandler+0x10>)
 800269e:	f003 fa0f 	bl	8005ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000130 	.word	0x20000130

080026ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b4:	4a14      	ldr	r2, [pc, #80]	@ (8002708 <_sbrk+0x5c>)
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <_sbrk+0x60>)
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c0:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c8:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <_sbrk+0x64>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	@ (8002714 <_sbrk+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d207      	bcs.n	80026ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026dc:	f003 ff68 	bl	80065b0 <__errno>
 80026e0:	4603      	mov	r3, r0
 80026e2:	220c      	movs	r2, #12
 80026e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	e009      	b.n	8002700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ec:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <_sbrk+0x64>)
 80026fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20005000 	.word	0x20005000
 800270c:	00000400 	.word	0x00000400
 8002710:	200003bc 	.word	0x200003bc
 8002714:	20000510 	.word	0x20000510

08002718 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002724:	f7ff fff8 	bl	8002718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002728:	480b      	ldr	r0, [pc, #44]	@ (8002758 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800272a:	490c      	ldr	r1, [pc, #48]	@ (800275c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800272c:	4a0c      	ldr	r2, [pc, #48]	@ (8002760 <LoopFillZerobss+0x16>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002740:	4c09      	ldr	r4, [pc, #36]	@ (8002768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274e:	f003 ff35 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002752:	f7ff f881 	bl	8001858 <main>
  bx lr
 8002756:	4770      	bx	lr
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002760:	08008270 	.word	0x08008270
  ldr r2, =_sbss
 8002764:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002768:	2000050c 	.word	0x2000050c

0800276c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC1_2_IRQHandler>
	...

08002770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <HAL_Init+0x28>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <HAL_Init+0x28>)
 800277a:	f043 0310 	orr.w	r3, r3, #16
 800277e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002780:	2003      	movs	r0, #3
 8002782:	f000 fd73 	bl	800326c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002786:	200f      	movs	r0, #15
 8002788:	f000 f808 	bl	800279c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800278c:	f7ff fde2 	bl	8002354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40022000 	.word	0x40022000

0800279c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_InitTick+0x54>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_InitTick+0x58>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fd8b 	bl	80032d6 <HAL_SYSTICK_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00e      	b.n	80027e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d80a      	bhi.n	80027e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d0:	2200      	movs	r2, #0
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f000 fd53 	bl	8003282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027dc:	4a06      	ldr	r2, [pc, #24]	@ (80027f8 <HAL_InitTick+0x5c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000000 	.word	0x20000000
 80027f4:	20000008 	.word	0x20000008
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_IncTick+0x1c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_IncTick+0x20>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a03      	ldr	r2, [pc, #12]	@ (800281c <HAL_IncTick+0x20>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	20000008 	.word	0x20000008
 800281c:	200003c0 	.word	0x200003c0

08002820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b02      	ldr	r3, [pc, #8]	@ (8002830 <HAL_GetTick+0x10>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	200003c0 	.word	0x200003c0

08002834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff fff0 	bl	8002820 <HAL_GetTick>
 8002840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d005      	beq.n	800285a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <HAL_Delay+0x44>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285a:	bf00      	nop
 800285c:	f7ff ffe0 	bl	8002820 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d8f7      	bhi.n	800285c <HAL_Delay+0x28>
  {
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000008 	.word	0x20000008

0800287c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0be      	b.n	8002a1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fd7c 	bl	80023b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fbc5 	bl	8003050 <ADC_ConversionStop_Disable>
 80028c6:	4603      	mov	r3, r0
 80028c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8099 	bne.w	8002a0a <HAL_ADC_Init+0x18e>
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 8095 	bne.w	8002a0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028e8:	f023 0302 	bic.w	r3, r3, #2
 80028ec:	f043 0202 	orr.w	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7b1b      	ldrb	r3, [r3, #12]
 8002902:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002904:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002914:	d003      	beq.n	800291e <HAL_ADC_Init+0xa2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <HAL_ADC_Init+0xa8>
 800291e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002922:	e000      	b.n	8002926 <HAL_ADC_Init+0xaa>
 8002924:	2300      	movs	r3, #0
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7d1b      	ldrb	r3, [r3, #20]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d119      	bne.n	8002968 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7b1b      	ldrb	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	3b01      	subs	r3, #1
 8002942:	035a      	lsls	r2, r3, #13
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e00b      	b.n	8002968 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_ADC_Init+0x1a8>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002998:	d003      	beq.n	80029a2 <HAL_ADC_Init+0x126>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d104      	bne.n	80029ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	051b      	lsls	r3, r3, #20
 80029aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	430a      	orrs	r2, r1
 80029be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_ADC_Init+0x1ac>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029e6:	e018      	b.n	8002a1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	f023 0312 	bic.w	r3, r3, #18
 80029f0:	f043 0210 	orr.w	r2, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a08:	e007      	b.n	8002a1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	ffe1f7fd 	.word	0xffe1f7fd
 8002a28:	ff1f0efe 	.word	0xff1f0efe

08002a2c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Start+0x1a>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e098      	b.n	8002b78 <HAL_ADC_Start+0x14c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 faa4 	bl	8002f9c <ADC_Enable>
 8002a54:	4603      	mov	r3, r0
 8002a56:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 8087 	bne.w	8002b6e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a41      	ldr	r2, [pc, #260]	@ (8002b80 <HAL_ADC_Start+0x154>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d105      	bne.n	8002a8a <HAL_ADC_Start+0x5e>
 8002a7e:	4b41      	ldr	r3, [pc, #260]	@ (8002b84 <HAL_ADC_Start+0x158>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d026      	beq.n	8002af2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ab4:	e01d      	b.n	8002af2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b84 <HAL_ADC_Start+0x158>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_ADC_Start+0xaa>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <HAL_ADC_Start+0x154>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10d      	bne.n	8002af2 <HAL_ADC_Start+0xc6>
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b84 <HAL_ADC_Start+0x158>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	f023 0206 	bic.w	r2, r3, #6
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b0a:	e002      	b.n	8002b12 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0202 	mvn.w	r2, #2
 8002b22:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b2e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b32:	d113      	bne.n	8002b5c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b38:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <HAL_ADC_Start+0x154>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d105      	bne.n	8002b4a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b3e:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_ADC_Start+0x158>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d108      	bne.n	8002b5c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	e00c      	b.n	8002b76 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40012800 	.word	0x40012800
 8002b84:	40012400 	.word	0x40012400

08002b88 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b9e:	f7ff fe3f 	bl	8002820 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0d3      	b.n	8002d72 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d131      	bne.n	8002c3c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d12a      	bne.n	8002c3c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002be6:	e021      	b.n	8002c2c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d01d      	beq.n	8002c2c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_ADC_PollForConversion+0x7e>
 8002bf6:	f7ff fe13 	bl	8002820 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d212      	bcs.n	8002c2c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0a2      	b.n	8002d72 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0d6      	beq.n	8002be8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c3a:	e070      	b.n	8002d1e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d7c <HAL_ADC_PollForConversion+0x1f4>)
 8002c3e:	681c      	ldr	r4, [r3, #0]
 8002c40:	2002      	movs	r0, #2
 8002c42:	f002 fae7 	bl	8005214 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c46:	4603      	mov	r3, r0
 8002c48:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	4b4b      	ldr	r3, [pc, #300]	@ (8002d80 <HAL_ADC_PollForConversion+0x1f8>)
 8002c54:	400b      	ands	r3, r1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_ADC_PollForConversion+0x104>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68d9      	ldr	r1, [r3, #12]
 8002c60:	4b48      	ldr	r3, [pc, #288]	@ (8002d84 <HAL_ADC_PollForConversion+0x1fc>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <HAL_ADC_PollForConversion+0x104>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6919      	ldr	r1, [r3, #16]
 8002c6e:	4b46      	ldr	r3, [pc, #280]	@ (8002d88 <HAL_ADC_PollForConversion+0x200>)
 8002c70:	400b      	ands	r3, r1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x100>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <HAL_ADC_PollForConversion+0x204>)
 8002c7e:	400b      	ands	r3, r1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x100>
 8002c84:	2314      	movs	r3, #20
 8002c86:	e020      	b.n	8002cca <HAL_ADC_PollForConversion+0x142>
 8002c88:	2329      	movs	r3, #41	@ 0x29
 8002c8a:	e01e      	b.n	8002cca <HAL_ADC_PollForConversion+0x142>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6919      	ldr	r1, [r3, #16]
 8002c92:	4b3d      	ldr	r3, [pc, #244]	@ (8002d88 <HAL_ADC_PollForConversion+0x200>)
 8002c94:	400b      	ands	r3, r1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_ADC_PollForConversion+0x120>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68d9      	ldr	r1, [r3, #12]
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8002d8c <HAL_ADC_PollForConversion+0x204>)
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_ADC_PollForConversion+0x13c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6919      	ldr	r1, [r3, #16]
 8002cae:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <HAL_ADC_PollForConversion+0x208>)
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <HAL_ADC_PollForConversion+0x140>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68d9      	ldr	r1, [r3, #12]
 8002cbc:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <HAL_ADC_PollForConversion+0x208>)
 8002cbe:	400b      	ands	r3, r1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_PollForConversion+0x140>
 8002cc4:	2354      	movs	r3, #84	@ 0x54
 8002cc6:	e000      	b.n	8002cca <HAL_ADC_PollForConversion+0x142>
 8002cc8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cd0:	e021      	b.n	8002d16 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d01a      	beq.n	8002d10 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_ADC_PollForConversion+0x168>
 8002ce0:	f7ff fd9e 	bl	8002820 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d20f      	bcs.n	8002d10 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d90b      	bls.n	8002d10 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	f043 0204 	orr.w	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e030      	b.n	8002d72 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d8d9      	bhi.n	8002cd2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0212 	mvn.w	r2, #18
 8002d26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002d3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d42:	d115      	bne.n	8002d70 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d111      	bne.n	8002d70 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	24924924 	.word	0x24924924
 8002d84:	00924924 	.word	0x00924924
 8002d88:	12492492 	.word	0x12492492
 8002d8c:	00492492 	.word	0x00492492
 8002d90:	00249249 	.word	0x00249249

08002d94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x20>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e0dc      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x1da>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d81c      	bhi.n	8002e16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b05      	subs	r3, #5
 8002dee:	221f      	movs	r2, #31
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4019      	ands	r1, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3b05      	subs	r3, #5
 8002e08:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e14:	e03c      	b.n	8002e90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d81c      	bhi.n	8002e58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b23      	subs	r3, #35	@ 0x23
 8002e30:	221f      	movs	r2, #31
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	4019      	ands	r1, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	3b23      	subs	r3, #35	@ 0x23
 8002e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e56:	e01b      	b.n	8002e90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b41      	subs	r3, #65	@ 0x41
 8002e6a:	221f      	movs	r2, #31
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	4019      	ands	r1, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	3b41      	subs	r3, #65	@ 0x41
 8002e84:	fa00 f203 	lsl.w	r2, r0, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d91c      	bls.n	8002ed2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b1e      	subs	r3, #30
 8002eaa:	2207      	movs	r2, #7
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	4019      	ands	r1, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6898      	ldr	r0, [r3, #8]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3b1e      	subs	r3, #30
 8002ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]
 8002ed0:	e019      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6919      	ldr	r1, [r3, #16]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	4019      	ands	r1, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6898      	ldr	r0, [r3, #8]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	fa00 f203 	lsl.w	r2, r0, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d003      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f12:	2b11      	cmp	r3, #17
 8002f14:	d132      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d125      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d126      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002f3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d11a      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f46:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	0c9a      	lsrs	r2, r3, #18
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f9      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x1b2>
 8002f6a:	e007      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012400 	.word	0x40012400
 8002f94:	20000000 	.word	0x20000000
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d040      	beq.n	800303c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fca:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <ADC_Enable+0xac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1f      	ldr	r2, [pc, #124]	@ (800304c <ADC_Enable+0xb0>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	0c9b      	lsrs	r3, r3, #18
 8002fd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fd8:	e002      	b.n	8002fe0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fe6:	f7ff fc1b 	bl	8002820 <HAL_GetTick>
 8002fea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fec:	e01f      	b.n	800302e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fee:	f7ff fc17 	bl	8002820 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d918      	bls.n	800302e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d011      	beq.n	800302e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d1d8      	bne.n	8002fee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000
 800304c:	431bde83 	.word	0x431bde83

08003050 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d12e      	bne.n	80030c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800307a:	f7ff fbd1 	bl	8002820 <HAL_GetTick>
 800307e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003080:	e01b      	b.n	80030ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003082:	f7ff fbcd 	bl	8002820 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d914      	bls.n	80030ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10d      	bne.n	80030ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	f043 0210 	orr.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e007      	b.n	80030ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d0dc      	beq.n	8003082 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003106:	4a04      	ldr	r2, [pc, #16]	@ (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60d3      	str	r3, [r2, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	db0b      	blt.n	8003162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4906      	ldr	r1, [pc, #24]	@ (800316c <__NVIC_EnableIRQ+0x34>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2001      	movs	r0, #1
 800315a:	fa00 f202 	lsl.w	r2, r0, r2
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	@ (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	@ (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	@ 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003238:	d301      	bcc.n	800323e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323a:	2301      	movs	r3, #1
 800323c:	e00f      	b.n	800325e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323e:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <SysTick_Config+0x40>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003246:	210f      	movs	r1, #15
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f7ff ff90 	bl	8003170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <SysTick_Config+0x40>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003256:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <SysTick_Config+0x40>)
 8003258:	2207      	movs	r2, #7
 800325a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000e010 	.word	0xe000e010

0800326c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff2d 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003294:	f7ff ff42 	bl	800311c <__NVIC_GetPriorityGrouping>
 8003298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7ff ff90 	bl	80031c4 <NVIC_EncodePriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff5f 	bl	8003170 <__NVIC_SetPriority>
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff35 	bl	8003138 <__NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ffa2 	bl	8003228 <SysTick_Config>
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d008      	beq.n	8003318 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2204      	movs	r2, #4
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e020      	b.n	800335a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020e 	bic.w	r2, r2, #14
 8003326:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d005      	beq.n	8003388 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2204      	movs	r2, #4
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e051      	b.n	800342c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 020e 	bic.w	r2, r2, #14
 8003396:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	@ (8003438 <HAL_DMA_Abort_IT+0xd4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d029      	beq.n	8003406 <HAL_DMA_Abort_IT+0xa2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	@ (800343c <HAL_DMA_Abort_IT+0xd8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_Abort_IT+0x9e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <HAL_DMA_Abort_IT+0xdc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01a      	beq.n	80033fc <HAL_DMA_Abort_IT+0x98>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003444 <HAL_DMA_Abort_IT+0xe0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d012      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x92>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <HAL_DMA_Abort_IT+0xe4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00a      	beq.n	80033f0 <HAL_DMA_Abort_IT+0x8c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	@ (800344c <HAL_DMA_Abort_IT+0xe8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d102      	bne.n	80033ea <HAL_DMA_Abort_IT+0x86>
 80033e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80033e8:	e00e      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ee:	e00b      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033f4:	e008      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033fa:	e005      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 80033fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003400:	e002      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 8003402:	2310      	movs	r3, #16
 8003404:	e000      	b.n	8003408 <HAL_DMA_Abort_IT+0xa4>
 8003406:	2301      	movs	r3, #1
 8003408:	4a11      	ldr	r2, [pc, #68]	@ (8003450 <HAL_DMA_Abort_IT+0xec>)
 800340a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
    } 
  }
  return status;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40020008 	.word	0x40020008
 800343c:	4002001c 	.word	0x4002001c
 8003440:	40020030 	.word	0x40020030
 8003444:	40020044 	.word	0x40020044
 8003448:	40020058 	.word	0x40020058
 800344c:	4002006c 	.word	0x4002006c
 8003450:	40020000 	.word	0x40020000

08003454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003454:	b480      	push	{r7}
 8003456:	b08b      	sub	sp, #44	@ 0x2c
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003466:	e169      	b.n	800373c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003468:	2201      	movs	r2, #1
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	429a      	cmp	r2, r3
 8003482:	f040 8158 	bne.w	8003736 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a9a      	ldr	r2, [pc, #616]	@ (80036f4 <HAL_GPIO_Init+0x2a0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d05e      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 8003490:	4a98      	ldr	r2, [pc, #608]	@ (80036f4 <HAL_GPIO_Init+0x2a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d875      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 8003496:	4a98      	ldr	r2, [pc, #608]	@ (80036f8 <HAL_GPIO_Init+0x2a4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d058      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 800349c:	4a96      	ldr	r2, [pc, #600]	@ (80036f8 <HAL_GPIO_Init+0x2a4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d86f      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034a2:	4a96      	ldr	r2, [pc, #600]	@ (80036fc <HAL_GPIO_Init+0x2a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d052      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034a8:	4a94      	ldr	r2, [pc, #592]	@ (80036fc <HAL_GPIO_Init+0x2a8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d869      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ae:	4a94      	ldr	r2, [pc, #592]	@ (8003700 <HAL_GPIO_Init+0x2ac>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04c      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034b4:	4a92      	ldr	r2, [pc, #584]	@ (8003700 <HAL_GPIO_Init+0x2ac>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d863      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ba:	4a92      	ldr	r2, [pc, #584]	@ (8003704 <HAL_GPIO_Init+0x2b0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d046      	beq.n	800354e <HAL_GPIO_Init+0xfa>
 80034c0:	4a90      	ldr	r2, [pc, #576]	@ (8003704 <HAL_GPIO_Init+0x2b0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d85d      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d82a      	bhi.n	8003520 <HAL_GPIO_Init+0xcc>
 80034ca:	2b12      	cmp	r3, #18
 80034cc:	d859      	bhi.n	8003582 <HAL_GPIO_Init+0x12e>
 80034ce:	a201      	add	r2, pc, #4	@ (adr r2, 80034d4 <HAL_GPIO_Init+0x80>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	0800354f 	.word	0x0800354f
 80034d8:	08003529 	.word	0x08003529
 80034dc:	0800353b 	.word	0x0800353b
 80034e0:	0800357d 	.word	0x0800357d
 80034e4:	08003583 	.word	0x08003583
 80034e8:	08003583 	.word	0x08003583
 80034ec:	08003583 	.word	0x08003583
 80034f0:	08003583 	.word	0x08003583
 80034f4:	08003583 	.word	0x08003583
 80034f8:	08003583 	.word	0x08003583
 80034fc:	08003583 	.word	0x08003583
 8003500:	08003583 	.word	0x08003583
 8003504:	08003583 	.word	0x08003583
 8003508:	08003583 	.word	0x08003583
 800350c:	08003583 	.word	0x08003583
 8003510:	08003583 	.word	0x08003583
 8003514:	08003583 	.word	0x08003583
 8003518:	08003531 	.word	0x08003531
 800351c:	08003545 	.word	0x08003545
 8003520:	4a79      	ldr	r2, [pc, #484]	@ (8003708 <HAL_GPIO_Init+0x2b4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003526:	e02c      	b.n	8003582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	623b      	str	r3, [r7, #32]
          break;
 800352e:	e029      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	3304      	adds	r3, #4
 8003536:	623b      	str	r3, [r7, #32]
          break;
 8003538:	e024      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	3308      	adds	r3, #8
 8003540:	623b      	str	r3, [r7, #32]
          break;
 8003542:	e01f      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	330c      	adds	r3, #12
 800354a:	623b      	str	r3, [r7, #32]
          break;
 800354c:	e01a      	b.n	8003584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003556:	2304      	movs	r3, #4
 8003558:	623b      	str	r3, [r7, #32]
          break;
 800355a:	e013      	b.n	8003584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003564:	2308      	movs	r3, #8
 8003566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	611a      	str	r2, [r3, #16]
          break;
 800356e:	e009      	b.n	8003584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003570:	2308      	movs	r3, #8
 8003572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	615a      	str	r2, [r3, #20]
          break;
 800357a:	e003      	b.n	8003584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
          break;
 8003580:	e000      	b.n	8003584 <HAL_GPIO_Init+0x130>
          break;
 8003582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2bff      	cmp	r3, #255	@ 0xff
 8003588:	d801      	bhi.n	800358e <HAL_GPIO_Init+0x13a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	e001      	b.n	8003592 <HAL_GPIO_Init+0x13e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2bff      	cmp	r3, #255	@ 0xff
 8003598:	d802      	bhi.n	80035a0 <HAL_GPIO_Init+0x14c>
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	e002      	b.n	80035a6 <HAL_GPIO_Init+0x152>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	3b08      	subs	r3, #8
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	210f      	movs	r1, #15
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	431a      	orrs	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80b1 	beq.w	8003736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035d4:	4b4d      	ldr	r3, [pc, #308]	@ (800370c <HAL_GPIO_Init+0x2b8>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <HAL_GPIO_Init+0x2b8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6193      	str	r3, [r2, #24]
 80035e0:	4b4a      	ldr	r3, [pc, #296]	@ (800370c <HAL_GPIO_Init+0x2b8>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035ec:	4a48      	ldr	r2, [pc, #288]	@ (8003710 <HAL_GPIO_Init+0x2bc>)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	220f      	movs	r2, #15
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a40      	ldr	r2, [pc, #256]	@ (8003714 <HAL_GPIO_Init+0x2c0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d013      	beq.n	8003640 <HAL_GPIO_Init+0x1ec>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3f      	ldr	r2, [pc, #252]	@ (8003718 <HAL_GPIO_Init+0x2c4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00d      	beq.n	800363c <HAL_GPIO_Init+0x1e8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3e      	ldr	r2, [pc, #248]	@ (800371c <HAL_GPIO_Init+0x2c8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d007      	beq.n	8003638 <HAL_GPIO_Init+0x1e4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3d      	ldr	r2, [pc, #244]	@ (8003720 <HAL_GPIO_Init+0x2cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_GPIO_Init+0x1e0>
 8003630:	2303      	movs	r3, #3
 8003632:	e006      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003634:	2304      	movs	r3, #4
 8003636:	e004      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003638:	2302      	movs	r3, #2
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_GPIO_Init+0x1ee>
 8003640:	2300      	movs	r3, #0
 8003642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003644:	f002 0203 	and.w	r2, r2, #3
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	4093      	lsls	r3, r2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003652:	492f      	ldr	r1, [pc, #188]	@ (8003710 <HAL_GPIO_Init+0x2bc>)
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800366c:	4b2d      	ldr	r3, [pc, #180]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	492c      	ldr	r1, [pc, #176]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	43db      	mvns	r3, r3
 8003682:	4928      	ldr	r1, [pc, #160]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 8003684:	4013      	ands	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003694:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4922      	ldr	r1, [pc, #136]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036a2:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	491e      	ldr	r1, [pc, #120]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d006      	beq.n	80036ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036bc:	4b19      	ldr	r3, [pc, #100]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4918      	ldr	r1, [pc, #96]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036ca:	4b16      	ldr	r3, [pc, #88]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	4914      	ldr	r1, [pc, #80]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d021      	beq.n	8003728 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	490e      	ldr	r1, [pc, #56]	@ (8003724 <HAL_GPIO_Init+0x2d0>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e021      	b.n	8003736 <HAL_GPIO_Init+0x2e2>
 80036f2:	bf00      	nop
 80036f4:	10320000 	.word	0x10320000
 80036f8:	10310000 	.word	0x10310000
 80036fc:	10220000 	.word	0x10220000
 8003700:	10210000 	.word	0x10210000
 8003704:	10120000 	.word	0x10120000
 8003708:	10110000 	.word	0x10110000
 800370c:	40021000 	.word	0x40021000
 8003710:	40010000 	.word	0x40010000
 8003714:	40010800 	.word	0x40010800
 8003718:	40010c00 	.word	0x40010c00
 800371c:	40011000 	.word	0x40011000
 8003720:	40011400 	.word	0x40011400
 8003724:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_GPIO_Init+0x304>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	43db      	mvns	r3, r3
 8003730:	4909      	ldr	r1, [pc, #36]	@ (8003758 <HAL_GPIO_Init+0x304>)
 8003732:	4013      	ands	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	3301      	adds	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	f47f ae8e 	bne.w	8003468 <HAL_GPIO_Init+0x14>
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	372c      	adds	r7, #44	@ 0x2c
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40010400 	.word	0x40010400

0800375c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	e001      	b.n	800377e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	807b      	strh	r3, [r7, #2]
 8003796:	4613      	mov	r3, r2
 8003798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800379a:	787b      	ldrb	r3, [r7, #1]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a0:	887a      	ldrh	r2, [r7, #2]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037a6:	e003      	b.n	80037b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	041a      	lsls	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	611a      	str	r2, [r3, #16]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e12b      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe fe4e 	bl	8002484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	@ 0x24
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800380e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800381e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003820:	f001 fbfc 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 8003824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a81      	ldr	r2, [pc, #516]	@ (8003a30 <HAL_I2C_Init+0x274>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d807      	bhi.n	8003840 <HAL_I2C_Init+0x84>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a80      	ldr	r2, [pc, #512]	@ (8003a34 <HAL_I2C_Init+0x278>)
 8003834:	4293      	cmp	r3, r2
 8003836:	bf94      	ite	ls
 8003838:	2301      	movls	r3, #1
 800383a:	2300      	movhi	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e006      	b.n	800384e <HAL_I2C_Init+0x92>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a7d      	ldr	r2, [pc, #500]	@ (8003a38 <HAL_I2C_Init+0x27c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	bf94      	ite	ls
 8003848:	2301      	movls	r3, #1
 800384a:	2300      	movhi	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0e7      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a78      	ldr	r2, [pc, #480]	@ (8003a3c <HAL_I2C_Init+0x280>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0c9b      	lsrs	r3, r3, #18
 8003860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a6a      	ldr	r2, [pc, #424]	@ (8003a30 <HAL_I2C_Init+0x274>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d802      	bhi.n	8003890 <HAL_I2C_Init+0xd4>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3301      	adds	r3, #1
 800388e:	e009      	b.n	80038a4 <HAL_I2C_Init+0xe8>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a69      	ldr	r2, [pc, #420]	@ (8003a40 <HAL_I2C_Init+0x284>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	3301      	adds	r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	495c      	ldr	r1, [pc, #368]	@ (8003a30 <HAL_I2C_Init+0x274>)
 80038c0:	428b      	cmp	r3, r1
 80038c2:	d819      	bhi.n	80038f8 <HAL_I2C_Init+0x13c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038d8:	400b      	ands	r3, r1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_I2C_Init+0x138>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e59      	subs	r1, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f2:	e051      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e04f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <HAL_I2C_Init+0x168>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e012      	b.n	800394a <HAL_I2C_Init+0x18e>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Init+0x196>
 800394e:	2301      	movs	r3, #1
 8003950:	e022      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <HAL_I2C_Init+0x1bc>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1e58      	subs	r0, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	440b      	add	r3, r1
 8003968:	fbb0 f3f3 	udiv	r3, r0, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	0099      	lsls	r1, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	3301      	adds	r3, #1
 8003990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	6809      	ldr	r1, [r1, #0]
 800399c:	4313      	orrs	r3, r2
 800399e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6911      	ldr	r1, [r2, #16]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	430b      	orrs	r3, r1
 80039da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	000186a0 	.word	0x000186a0
 8003a34:	001e847f 	.word	0x001e847f
 8003a38:	003d08ff 	.word	0x003d08ff
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	10624dd3 	.word	0x10624dd3

08003a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	817b      	strh	r3, [r7, #10]
 8003a56:	460b      	mov	r3, r1
 8003a58:	813b      	strh	r3, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5e:	f7fe fedf 	bl	8002820 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	f040 80d9 	bne.w	8003c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2319      	movs	r3, #25
 8003a78:	2201      	movs	r2, #1
 8003a7a:	496d      	ldr	r1, [pc, #436]	@ (8003c30 <HAL_I2C_Mem_Write+0x1ec>)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fccd 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0cc      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Mem_Write+0x56>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0c5      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	@ 0x21
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	@ 0x40
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a4d      	ldr	r2, [pc, #308]	@ (8003c34 <HAL_I2C_Mem_Write+0x1f0>)
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b02:	88f8      	ldrh	r0, [r7, #6]
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fb04 	bl	8004120 <I2C_RequestMemoryWrite>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d052      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e081      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fd92 	bl	8004650 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d107      	bne.n	8003b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e06b      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1aa      	bne.n	8003b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fd85 	bl	80046e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e016      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00100002 	.word	0x00100002
 8003c34:	ffff0000 	.word	0xffff0000

08003c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	@ 0x30
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7fe fde3 	bl	8002820 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	f040 8250 	bne.w	800410a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2319      	movs	r3, #25
 8003c70:	2201      	movs	r2, #1
 8003c72:	4982      	ldr	r1, [pc, #520]	@ (8003e7c <HAL_I2C_Mem_Read+0x244>)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fbd1 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
 8003c82:	e243      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x5a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e23c      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d007      	beq.n	8003cb8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2222      	movs	r2, #34	@ 0x22
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	@ 0x40
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a62      	ldr	r2, [pc, #392]	@ (8003e80 <HAL_I2C_Mem_Read+0x248>)
 8003cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cfa:	88f8      	ldrh	r0, [r7, #6]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	8979      	ldrh	r1, [r7, #10]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4603      	mov	r3, r0
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fa9e 	bl	800424c <I2C_RequestMemoryRead>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1f8      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d113      	bne.n	8003d4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e1cc      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d11e      	bne.n	8003d90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d62:	b672      	cpsid	i
}
 8003d64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d8c:	b662      	cpsie	i
}
 8003d8e:	e035      	b.n	8003dfc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11e      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003da8:	b672      	cpsid	i
}
 8003daa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd2:	b662      	cpsie	i
}
 8003dd4:	e012      	b.n	8003dfc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003de4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003dfc:	e172      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f200 811f 	bhi.w	8004046 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d123      	bne.n	8003e58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fcab 	bl	8004770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e173      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e56:	e145      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d152      	bne.n	8003f06 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	2200      	movs	r2, #0
 8003e68:	4906      	ldr	r1, [pc, #24]	@ (8003e84 <HAL_I2C_Mem_Read+0x24c>)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fad6 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e148      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
 8003e7a:	bf00      	nop
 8003e7c:	00100002 	.word	0x00100002
 8003e80:	ffff0000 	.word	0xffff0000
 8003e84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e88:	b672      	cpsid	i
}
 8003e8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ece:	b662      	cpsie	i
}
 8003ed0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f04:	e0ee      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4981      	ldr	r1, [pc, #516]	@ (8004114 <HAL_I2C_Mem_Read+0x4dc>)
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa83 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0f5      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f30:	b672      	cpsid	i
}
 8003f32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f66:	4b6c      	ldr	r3, [pc, #432]	@ (8004118 <HAL_I2C_Mem_Read+0x4e0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	08db      	lsrs	r3, r3, #3
 8003f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800411c <HAL_I2C_Mem_Read+0x4e4>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0a1a      	lsrs	r2, r3, #8
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00da      	lsls	r2, r3, #3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d118      	bne.n	8003fbe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003fae:	b662      	cpsie	i
}
 8003fb0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0a6      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d1d9      	bne.n	8003f80 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800400e:	b662      	cpsie	i
}
 8004010:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004044:	e04e      	b.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fb90 	bl	8004770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e058      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d124      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d107      	bne.n	80040b2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f ae88 	bne.w	8003dfe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	@ 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	00010004 	.word	0x00010004
 8004118:	20000000 	.word	0x20000000
 800411c:	14f8b589 	.word	0x14f8b589

08004120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	461a      	mov	r2, r3
 800412e:	4603      	mov	r3, r0
 8004130:	817b      	strh	r3, [r7, #10]
 8004132:	460b      	mov	r3, r1
 8004134:	813b      	strh	r3, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	2200      	movs	r2, #0
 8004152:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f960 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004170:	d103      	bne.n	800417a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004178:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e05f      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800417e:	897b      	ldrh	r3, [r7, #10]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800418c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	6a3a      	ldr	r2, [r7, #32]
 8004192:	492d      	ldr	r1, [pc, #180]	@ (8004248 <I2C_RequestMemoryWrite+0x128>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f9bb 	bl	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e04c      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041bc:	6a39      	ldr	r1, [r7, #32]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fa46 	bl	8004650 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d107      	bne.n	80041e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e02b      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	e021      	b.n	800423c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041f8:	893b      	ldrh	r3, [r7, #8]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004208:	6a39      	ldr	r1, [r7, #32]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fa20 	bl	8004650 <I2C_WaitOnTXEFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	2b04      	cmp	r3, #4
 800421c:	d107      	bne.n	800422e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e005      	b.n	800423e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004232:	893b      	ldrh	r3, [r7, #8]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	00010002 	.word	0x00010002

0800424c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004274:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004284:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	2200      	movs	r2, #0
 800428e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8c2 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ac:	d103      	bne.n	80042b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0aa      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ba:	897b      	ldrh	r3, [r7, #10]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	4952      	ldr	r1, [pc, #328]	@ (8004418 <I2C_RequestMemoryRead+0x1cc>)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f91d 	bl	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e097      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f8:	6a39      	ldr	r1, [r7, #32]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f9a8 	bl	8004650 <I2C_WaitOnTXEFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	2b04      	cmp	r3, #4
 800430c:	d107      	bne.n	800431e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e076      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004328:	893b      	ldrh	r3, [r7, #8]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]
 8004332:	e021      	b.n	8004378 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	b29b      	uxth	r3, r3
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004344:	6a39      	ldr	r1, [r7, #32]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f982 	bl	8004650 <I2C_WaitOnTXEFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2b04      	cmp	r3, #4
 8004358:	d107      	bne.n	800436a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004368:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e050      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800436e:	893b      	ldrh	r3, [r7, #8]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437a:	6a39      	ldr	r1, [r7, #32]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f967 	bl	8004650 <I2C_WaitOnTXEFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	2b04      	cmp	r3, #4
 800438e:	d107      	bne.n	80043a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e035      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f82b 	bl	800441c <I2C_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043da:	d103      	bne.n	80043e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e013      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	4906      	ldr	r1, [pc, #24]	@ (8004418 <I2C_RequestMemoryRead+0x1cc>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f886 	bl	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	00010002 	.word	0x00010002

0800441c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800442c:	e048      	b.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d044      	beq.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fe f9f3 	bl	8002820 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d139      	bne.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	0c1b      	lsrs	r3, r3, #16
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d10d      	bne.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	e00c      	b.n	800448c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	43da      	mvns	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	429a      	cmp	r2, r3
 8004490:	d116      	bne.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f043 0220 	orr.w	r2, r3, #32
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e023      	b.n	8004508 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	0c1b      	lsrs	r3, r3, #16
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d10d      	bne.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	43da      	mvns	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4013      	ands	r3, r2
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	e00c      	b.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	d093      	beq.n	800442e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800451e:	e071      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452e:	d123      	bne.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004548:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e067      	b.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d041      	beq.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fe f94e 	bl	8002820 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d136      	bne.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10c      	bne.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	43da      	mvns	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e00b      	b.n	80045d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e021      	b.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d10c      	bne.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	43da      	mvns	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4013      	ands	r3, r2
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e00b      	b.n	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	43da      	mvns	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf14      	ite	ne
 800463a:	2301      	movne	r3, #1
 800463c:	2300      	moveq	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	f47f af6d 	bne.w	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800465c:	e034      	b.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f8e3 	bl	800482a <I2C_IsAcknowledgeFailed>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d028      	beq.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fe f8d3 	bl	8002820 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11d      	bne.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d016      	beq.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	2b80      	cmp	r3, #128	@ 0x80
 80046d4:	d1c3      	bne.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046ec:	e034      	b.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f89b 	bl	800482a <I2C_IsAcknowledgeFailed>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e034      	b.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d028      	beq.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fe f88b 	bl	8002820 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11d      	bne.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d016      	beq.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e007      	b.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b04      	cmp	r3, #4
 8004764:	d1c3      	bne.n	80046ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800477c:	e049      	b.n	8004812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b10      	cmp	r3, #16
 800478a:	d119      	bne.n	80047c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0210 	mvn.w	r2, #16
 8004794:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e030      	b.n	8004822 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7fe f82e 	bl	8002820 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11d      	bne.n	8004812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e0:	2b40      	cmp	r3, #64	@ 0x40
 80047e2:	d016      	beq.n	8004812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e007      	b.n	8004822 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d1ae      	bne.n	800477e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004840:	d11b      	bne.n	800487a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800484a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
	...

08004888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e272      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8087 	beq.w	80049b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048a8:	4b92      	ldr	r3, [pc, #584]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d00c      	beq.n	80048ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048b4:	4b8f      	ldr	r3, [pc, #572]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d112      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e>
 80048c0:	4b8c      	ldr	r3, [pc, #560]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ce:	4b89      	ldr	r3, [pc, #548]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d06c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x12c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d168      	bne.n	80049b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e24c      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x76>
 80048f0:	4b80      	ldr	r3, [pc, #512]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a7f      	ldr	r2, [pc, #508]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e02e      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x98>
 8004906:	4b7b      	ldr	r3, [pc, #492]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7a      	ldr	r2, [pc, #488]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800490c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b78      	ldr	r3, [pc, #480]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a77      	ldr	r2, [pc, #476]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004918:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e01d      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0xbc>
 800492a:	4b72      	ldr	r3, [pc, #456]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a71      	ldr	r2, [pc, #452]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b6f      	ldr	r3, [pc, #444]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6e      	ldr	r2, [pc, #440]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00b      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 8004944:	4b6b      	ldr	r3, [pc, #428]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a6a      	ldr	r2, [pc, #424]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 800494a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b68      	ldr	r3, [pc, #416]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a67      	ldr	r2, [pc, #412]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800495a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd ff5c 	bl	8002820 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800496c:	f7fd ff58 	bl	8002820 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	@ 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e200      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b5d      	ldr	r3, [pc, #372]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0xe4>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fd ff48 	bl	8002820 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd ff44 	bl	8002820 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	@ 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e1ec      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	4b53      	ldr	r3, [pc, #332]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x10c>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c2:	4b4c      	ldr	r3, [pc, #304]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049ce:	4b49      	ldr	r3, [pc, #292]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d11c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x18c>
 80049da:	4b46      	ldr	r3, [pc, #280]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	4b43      	ldr	r3, [pc, #268]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_RCC_OscConfig+0x176>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e1c0      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b3d      	ldr	r3, [pc, #244]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4939      	ldr	r1, [pc, #228]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	e03a      	b.n	8004a8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1c:	4b36      	ldr	r3, [pc, #216]	@ (8004af8 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fd fefd 	bl	8002820 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fef9 	bl	8002820 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1a1      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b2a      	ldr	r3, [pc, #168]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4927      	ldr	r1, [pc, #156]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b26      	ldr	r3, [pc, #152]	@ (8004af8 <HAL_RCC_OscConfig+0x270>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd fedc 	bl	8002820 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7fd fed8 	bl	8002820 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e180      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d03a      	beq.n	8004b0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d019      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	4b17      	ldr	r3, [pc, #92]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fd febc 	bl	8002820 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fd feb8 	bl	8002820 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e160      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aca:	2001      	movs	r0, #1
 8004acc:	f000 face 	bl	800506c <RCC_Delay>
 8004ad0:	e01c      	b.n	8004b0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <HAL_RCC_OscConfig+0x274>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7fd fea2 	bl	8002820 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ade:	e00f      	b.n	8004b00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fd fe9e 	bl	8002820 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d908      	bls.n	8004b00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e146      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	42420000 	.word	0x42420000
 8004afc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b92      	ldr	r3, [pc, #584]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e9      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a6 	beq.w	8004c66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10d      	bne.n	8004b46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	4b88      	ldr	r3, [pc, #544]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	4a87      	ldr	r2, [pc, #540]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	61d3      	str	r3, [r2, #28]
 8004b36:	4b85      	ldr	r3, [pc, #532]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b46:	4b82      	ldr	r3, [pc, #520]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d118      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b52:	4b7f      	ldr	r3, [pc, #508]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a7e      	ldr	r2, [pc, #504]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fe5f 	bl	8002820 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fd fe5b 	bl	8002820 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	@ 0x64
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e103      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b78:	4b75      	ldr	r3, [pc, #468]	@ (8004d50 <HAL_RCC_OscConfig+0x4c8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x312>
 8004b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4a6e      	ldr	r2, [pc, #440]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6213      	str	r3, [r2, #32]
 8004b98:	e02d      	b.n	8004bf6 <HAL_RCC_OscConfig+0x36e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x334>
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4a69      	ldr	r2, [pc, #420]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6213      	str	r3, [r2, #32]
 8004bae:	4b67      	ldr	r3, [pc, #412]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4a66      	ldr	r2, [pc, #408]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6213      	str	r3, [r2, #32]
 8004bba:	e01c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x36e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d10c      	bne.n	8004bde <HAL_RCC_OscConfig+0x356>
 8004bc4:	4b61      	ldr	r3, [pc, #388]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4a60      	ldr	r2, [pc, #384]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	f043 0304 	orr.w	r3, r3, #4
 8004bce:	6213      	str	r3, [r2, #32]
 8004bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6213      	str	r3, [r2, #32]
 8004bdc:	e00b      	b.n	8004bf6 <HAL_RCC_OscConfig+0x36e>
 8004bde:	4b5b      	ldr	r3, [pc, #364]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4a5a      	ldr	r2, [pc, #360]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	6213      	str	r3, [r2, #32]
 8004bea:	4b58      	ldr	r3, [pc, #352]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4a57      	ldr	r2, [pc, #348]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	f023 0304 	bic.w	r3, r3, #4
 8004bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d015      	beq.n	8004c2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfe:	f7fd fe0f 	bl	8002820 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd fe0b 	bl	8002820 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0b1      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ee      	beq.n	8004c06 <HAL_RCC_OscConfig+0x37e>
 8004c28:	e014      	b.n	8004c54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd fdf9 	bl	8002820 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fd fdf5 	bl	8002820 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e09b      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ee      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8087 	beq.w	8004d7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 030c 	and.w	r3, r3, #12
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d061      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d146      	bne.n	8004d12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c84:	4b33      	ldr	r3, [pc, #204]	@ (8004d54 <HAL_RCC_OscConfig+0x4cc>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fd fdc9 	bl	8002820 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fd fdc5 	bl	8002820 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e06d      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca4:	4b29      	ldr	r3, [pc, #164]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb8:	d108      	bne.n	8004ccc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cba:	4b24      	ldr	r3, [pc, #144]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4921      	ldr	r1, [pc, #132]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a19      	ldr	r1, [r3, #32]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	491b      	ldr	r1, [pc, #108]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d54 <HAL_RCC_OscConfig+0x4cc>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cea:	f7fd fd99 	bl	8002820 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fd fd95 	bl	8002820 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e03d      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x46a>
 8004d10:	e035      	b.n	8004d7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <HAL_RCC_OscConfig+0x4cc>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fd fd82 	bl	8002820 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd fd7e 	bl	8002820 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e026      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x498>
 8004d3e:	e01e      	b.n	8004d7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e019      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
 8004d54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_OscConfig+0x500>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d001      	beq.n	8004d7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000

08004d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0d0      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d910      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b67      	ldr	r3, [pc, #412]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 0207 	bic.w	r2, r3, #7
 8004db6:	4965      	ldr	r1, [pc, #404]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	4b63      	ldr	r3, [pc, #396]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0b8      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de8:	4b59      	ldr	r3, [pc, #356]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a58      	ldr	r2, [pc, #352]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e00:	4b53      	ldr	r3, [pc, #332]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4a52      	ldr	r2, [pc, #328]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b50      	ldr	r3, [pc, #320]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	494d      	ldr	r1, [pc, #308]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d040      	beq.n	8004eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b47      	ldr	r3, [pc, #284]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d115      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e07f      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b41      	ldr	r3, [pc, #260]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e073      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06b      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b39      	ldr	r3, [pc, #228]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4936      	ldr	r1, [pc, #216]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fd fcd0 	bl	8002820 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd fccc 	bl	8002820 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e053      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b27      	ldr	r3, [pc, #156]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d210      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b24      	ldr	r3, [pc, #144]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 0207 	bic.w	r2, r3, #7
 8004ec2:	4922      	ldr	r1, [pc, #136]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b20      	ldr	r3, [pc, #128]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e032      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee8:	4b19      	ldr	r3, [pc, #100]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4916      	ldr	r1, [pc, #88]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f06:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	490e      	ldr	r1, [pc, #56]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f1a:	f000 f821 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	490a      	ldr	r1, [pc, #40]	@ (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	5ccb      	ldrb	r3, [r1, r3]
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	4a09      	ldr	r2, [pc, #36]	@ (8004f58 <HAL_RCC_ClockConfig+0x1cc>)
 8004f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f36:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <HAL_RCC_ClockConfig+0x1d0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fd fc2e 	bl	800279c <HAL_InitTick>

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40022000 	.word	0x40022000
 8004f50:	40021000 	.word	0x40021000
 8004f54:	0800816c 	.word	0x0800816c
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	20000004 	.word	0x20000004

08004f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x30>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x36>
 8004f8e:	e027      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f92:	613b      	str	r3, [r7, #16]
      break;
 8004f94:	e027      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	0c9b      	lsrs	r3, r3, #18
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fa0:	5cd3      	ldrb	r3, [r2, r3]
 8004fa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fae:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0c5b      	lsrs	r3, r3, #17
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	4a11      	ldr	r2, [pc, #68]	@ (8005000 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fc2:	fb03 f202 	mul.w	r2, r3, r2
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e004      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fd4:	fb02 f303 	mul.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	613b      	str	r3, [r7, #16]
      break;
 8004fde:	e002      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fe2:	613b      	str	r3, [r7, #16]
      break;
 8004fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe6:	693b      	ldr	r3, [r7, #16]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	007a1200 	.word	0x007a1200
 8004ffc:	08008184 	.word	0x08008184
 8005000:	08008194 	.word	0x08008194
 8005004:	003d0900 	.word	0x003d0900

08005008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800500c:	4b02      	ldr	r3, [pc, #8]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x10>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr
 8005018:	20000000 	.word	0x20000000

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005020:	f7ff fff2 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	@ (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	0800817c 	.word	0x0800817c

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005048:	f7ff ffde 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	0adb      	lsrs	r3, r3, #11
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4903      	ldr	r1, [pc, #12]	@ (8005068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000
 8005068:	0800817c 	.word	0x0800817c

0800506c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005074:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <RCC_Delay+0x34>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0a      	ldr	r2, [pc, #40]	@ (80050a4 <RCC_Delay+0x38>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	0a5b      	lsrs	r3, r3, #9
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005088:	bf00      	nop
  }
  while (Delay --);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	60fa      	str	r2, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f9      	bne.n	8005088 <RCC_Delay+0x1c>
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	20000000 	.word	0x20000000
 80050a4:	10624dd3 	.word	0x10624dd3

080050a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d07d      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80050c4:	2300      	movs	r3, #0
 80050c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10d      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050de:	61d3      	str	r3, [r2, #28]
 80050e0:	4b49      	ldr	r3, [pc, #292]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	4b46      	ldr	r3, [pc, #280]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d118      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fc:	4b43      	ldr	r3, [pc, #268]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a42      	ldr	r2, [pc, #264]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005108:	f7fd fb8a 	bl	8002820 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510e:	e008      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005110:	f7fd fb86 	bl	8002820 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e06d      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b3a      	ldr	r3, [pc, #232]	@ (800520c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800512e:	4b36      	ldr	r3, [pc, #216]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005136:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02e      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	d027      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800514c:	4b2e      	ldr	r3, [pc, #184]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005154:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005156:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800515c:	4b2c      	ldr	r3, [pc, #176]	@ (8005210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005162:	4a29      	ldr	r2, [pc, #164]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d014      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005172:	f7fd fb55 	bl	8002820 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	e00a      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fd fb51 	bl	8002820 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e036      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005190:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ee      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800519c:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4917      	ldr	r1, [pc, #92]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d105      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b4:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4a13      	ldr	r2, [pc, #76]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	490b      	ldr	r1, [pc, #44]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ea:	4b07      	ldr	r3, [pc, #28]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4904      	ldr	r1, [pc, #16]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	40007000 	.word	0x40007000
 8005210:	42420440 	.word	0x42420440

08005214 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	2300      	movs	r3, #0
 8005226:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b10      	cmp	r3, #16
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b10      	cmp	r3, #16
 800523a:	f200 808a 	bhi.w	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d045      	beq.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d075      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800524a:	e082      	b.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800524c:	4b46      	ldr	r3, [pc, #280]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005252:	4b45      	ldr	r3, [pc, #276]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d07b      	beq.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	0c9b      	lsrs	r3, r3, #18
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	4a41      	ldr	r2, [pc, #260]	@ (800536c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005268:	5cd3      	ldrb	r3, [r2, r3]
 800526a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d015      	beq.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005276:	4b3c      	ldr	r3, [pc, #240]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	0c5b      	lsrs	r3, r3, #17
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	4a3b      	ldr	r2, [pc, #236]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005290:	4a38      	ldr	r2, [pc, #224]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	fbb2 f2f3 	udiv	r2, r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	e004      	b.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4a34      	ldr	r2, [pc, #208]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80052ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052b8:	d102      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	61bb      	str	r3, [r7, #24]
      break;
 80052be:	e04a      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4a2d      	ldr	r2, [pc, #180]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]
      break;
 80052ce:	e042      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80052d0:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e0:	d108      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80052ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	e01f      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052fe:	d109      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005300:	4b19      	ldr	r3, [pc, #100]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800530c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e00f      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800531a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800531e:	d11c      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005320:	4b11      	ldr	r3, [pc, #68]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d016      	beq.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800532c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005330:	61bb      	str	r3, [r7, #24]
      break;
 8005332:	e012      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005334:	e011      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005336:	f7ff fe85 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 800533a:	4602      	mov	r2, r0
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	0b9b      	lsrs	r3, r3, #14
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	3301      	adds	r3, #1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	61bb      	str	r3, [r7, #24]
      break;
 8005350:	e004      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005352:	bf00      	nop
 8005354:	e002      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005356:	bf00      	nop
 8005358:	e000      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800535a:	bf00      	nop
    }
  }
  return (frequency);
 800535c:	69bb      	ldr	r3, [r7, #24]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	08008198 	.word	0x08008198
 8005370:	080081a8 	.word	0x080081a8
 8005374:	007a1200 	.word	0x007a1200
 8005378:	003d0900 	.word	0x003d0900
 800537c:	aaaaaaab 	.word	0xaaaaaaab

08005380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e041      	b.n	8005416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fd f8d8 	bl	800255c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 f940 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e032      	b.n	800549e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a18      	ldr	r2, [pc, #96]	@ (80054a8 <HAL_TIM_Base_Start+0x88>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_TIM_Base_Start+0x48>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d009      	beq.n	8005468 <HAL_TIM_Base_Start+0x48>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a14      	ldr	r2, [pc, #80]	@ (80054ac <HAL_TIM_Base_Start+0x8c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIM_Base_Start+0x48>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a13      	ldr	r2, [pc, #76]	@ (80054b0 <HAL_TIM_Base_Start+0x90>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d111      	bne.n	800548c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d010      	beq.n	800549c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548a:	e007      	b.n	800549c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800

080054b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_ConfigClockSource+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e0b4      	b.n	800563a <HAL_TIM_ConfigClockSource+0x186>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005508:	d03e      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0xd4>
 800550a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550e:	f200 8087 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005516:	f000 8086 	beq.w	8005626 <HAL_TIM_ConfigClockSource+0x172>
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551e:	d87f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b70      	cmp	r3, #112	@ 0x70
 8005522:	d01a      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xa6>
 8005524:	2b70      	cmp	r3, #112	@ 0x70
 8005526:	d87b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b60      	cmp	r3, #96	@ 0x60
 800552a:	d050      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x11a>
 800552c:	2b60      	cmp	r3, #96	@ 0x60
 800552e:	d877      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b50      	cmp	r3, #80	@ 0x50
 8005532:	d03c      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xfa>
 8005534:	2b50      	cmp	r3, #80	@ 0x50
 8005536:	d873      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	d058      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x13a>
 800553c:	2b40      	cmp	r3, #64	@ 0x40
 800553e:	d86f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b30      	cmp	r3, #48	@ 0x30
 8005542:	d064      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	2b30      	cmp	r3, #48	@ 0x30
 8005546:	d86b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d060      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d867      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05c      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005554:	2b10      	cmp	r3, #16
 8005556:	d05a      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	e062      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556a:	f000 f950 	bl	800580e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800557c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	609a      	str	r2, [r3, #8]
      break;
 8005586:	e04f      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005598:	f000 f939 	bl	800580e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e03c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f8b0 	bl	8005720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2150      	movs	r1, #80	@ 0x50
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f907 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80055cc:	e02c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 f8ce 	bl	800577c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2160      	movs	r1, #96	@ 0x60
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f8f7 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80055ec:	e01c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 f890 	bl	8005720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	@ 0x40
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f8e7 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 800560c:	e00c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 f8de 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 800561e:	e003      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
      break;
 8005624:	e000      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a2f      	ldr	r2, [pc, #188]	@ (8005714 <TIM_Base_SetConfig+0xd0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0x30>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x30>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a2c      	ldr	r2, [pc, #176]	@ (8005718 <TIM_Base_SetConfig+0xd4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x30>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a2b      	ldr	r2, [pc, #172]	@ (800571c <TIM_Base_SetConfig+0xd8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a22      	ldr	r2, [pc, #136]	@ (8005714 <TIM_Base_SetConfig+0xd0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_Base_SetConfig+0x62>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d007      	beq.n	80056a6 <TIM_Base_SetConfig+0x62>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1f      	ldr	r2, [pc, #124]	@ (8005718 <TIM_Base_SetConfig+0xd4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_Base_SetConfig+0x62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <TIM_Base_SetConfig+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0d      	ldr	r2, [pc, #52]	@ (8005714 <TIM_Base_SetConfig+0xd0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d103      	bne.n	80056ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]
  }
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800

08005720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 030a 	bic.w	r3, r3, #10
 800575c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0210 	bic.w	r2, r3, #16
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	031b      	lsls	r3, r3, #12
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f043 0307 	orr.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580e:	b480      	push	{r7}
 8005810:	b087      	sub	sp, #28
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005828:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	021a      	lsls	r2, r3, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	431a      	orrs	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	609a      	str	r2, [r3, #8]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e046      	b.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a16      	ldr	r2, [pc, #88]	@ (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d009      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a12      	ldr	r2, [pc, #72]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a10      	ldr	r2, [pc, #64]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d10c      	bne.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800

08005908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e042      	b.n	80059a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc fe32 	bl	8002598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2224      	movs	r2, #36	@ 0x24
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800594a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fd63 	bl	8006418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	@ 0x28
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d175      	bne.n	8005ab4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_Transmit+0x2c>
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e06e      	b.n	8005ab6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2221      	movs	r2, #33	@ 0x21
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059e6:	f7fc ff1b 	bl	8002820 <HAL_GetTick>
 80059ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	88fa      	ldrh	r2, [r7, #6]
 80059f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a00:	d108      	bne.n	8005a14 <HAL_UART_Transmit+0x6c>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e003      	b.n	8005a1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a1c:	e02e      	b.n	8005a7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2180      	movs	r1, #128	@ 0x80
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fb01 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e03a      	b.n	8005ab6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	3302      	adds	r3, #2
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	e007      	b.n	8005a6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1cb      	bne.n	8005a1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2140      	movs	r1, #64	@ 0x40
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 facd 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e006      	b.n	8005ab6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_UART_IRQHandler+0x66>
 8005b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fbbc 	bl	800629c <UART_Receive_IT>
      return;
 8005b24:	e25b      	b.n	8005fde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80de 	beq.w	8005cec <HAL_UART_IRQHandler+0x22c>
 8005b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80d1 	beq.w	8005cec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_UART_IRQHandler+0xae>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f043 0201 	orr.w	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_UART_IRQHandler+0xd2>
 8005b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	f043 0202 	orr.w	r2, r3, #2
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <HAL_UART_IRQHandler+0xf6>
 8005b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	f043 0204 	orr.w	r2, r3, #4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d011      	beq.n	8005be6 <HAL_UART_IRQHandler+0x126>
 8005bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d105      	bne.n	8005bda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bde:	f043 0208 	orr.w	r2, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 81f2 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_UART_IRQHandler+0x14e>
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fb47 	bl	800629c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <HAL_UART_IRQHandler+0x17a>
 8005c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d04f      	beq.n	8005cda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa51 	bl	80060e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d041      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3314      	adds	r3, #20
 8005c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1d9      	bne.n	8005c4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d013      	beq.n	8005cca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ea0 <HAL_UART_IRQHandler+0x3e0>)
 8005ca8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fd fb58 	bl	8003364 <HAL_DMA_Abort_IT>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d016      	beq.n	8005ce8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	e00e      	b.n	8005ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f99c 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd0:	e00a      	b.n	8005ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f998 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	e006      	b.n	8005ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f994 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005ce6:	e175      	b.n	8005fd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	bf00      	nop
    return;
 8005cea:	e173      	b.n	8005fd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	f040 814f 	bne.w	8005f94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 8148 	beq.w	8005f94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8141 	beq.w	8005f94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 80b6 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8145 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d56:	429a      	cmp	r2, r3
 8005d58:	f080 813e 	bcs.w	8005fd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	f000 8088 	beq.w	8005e80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d9c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005da8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1d9      	bne.n	8005d70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3314      	adds	r3, #20
 8005dc2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005dcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3314      	adds	r3, #20
 8005ddc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005de0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005de4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005de8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005df2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e1      	bne.n	8005dbc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3314      	adds	r3, #20
 8005dfe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e3      	bne.n	8005df8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e50:	f023 0310 	bic.w	r3, r3, #16
 8005e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e3      	bne.n	8005e3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fd fa37 	bl	80032ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8bf 	bl	800601a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e9c:	e09c      	b.n	8005fd8 <HAL_UART_IRQHandler+0x518>
 8005e9e:	bf00      	nop
 8005ea0:	080061a7 	.word	0x080061a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 808e 	beq.w	8005fdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8089 	beq.w	8005fdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005eee:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ef0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	623b      	str	r3, [r7, #32]
   return(result);
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3314      	adds	r3, #20
 8005f22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e3      	bne.n	8005f02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0310 	bic.w	r3, r3, #16
 8005f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330c      	adds	r3, #12
 8005f68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f6c:	61fa      	str	r2, [r7, #28]
 8005f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	69b9      	ldr	r1, [r7, #24]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	617b      	str	r3, [r7, #20]
   return(result);
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e3      	bne.n	8005f48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f844 	bl	800601a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f92:	e023      	b.n	8005fdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x4f4>
 8005fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f90e 	bl	80061ce <UART_Transmit_IT>
    return;
 8005fb2:	e014      	b.n	8005fde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00e      	beq.n	8005fde <HAL_UART_IRQHandler+0x51e>
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f94d 	bl	800626c <UART_EndTransmit_IT>
    return;
 8005fd2:	e004      	b.n	8005fde <HAL_UART_IRQHandler+0x51e>
    return;
 8005fd4:	bf00      	nop
 8005fd6:	e002      	b.n	8005fde <HAL_UART_IRQHandler+0x51e>
      return;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <HAL_UART_IRQHandler+0x51e>
      return;
 8005fdc:	bf00      	nop
  }
}
 8005fde:	37e8      	adds	r7, #232	@ 0xe8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	4613      	mov	r3, r2
 800603e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006040:	e03b      	b.n	80060ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d037      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fc fbe9 	bl	8002820 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <UART_WaitOnFlagUntilTimeout+0x30>
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e03a      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d023      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b80      	cmp	r3, #128	@ 0x80
 8006076:	d020      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b40      	cmp	r3, #64	@ 0x40
 800607c:	d01d      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b08      	cmp	r3, #8
 800608a:	d116      	bne.n	80060ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f81d 	bl	80060e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2208      	movs	r2, #8
 80060ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e00f      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4013      	ands	r3, r2
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	bf0c      	ite	eq
 80060ca:	2301      	moveq	r3, #1
 80060cc:	2300      	movne	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d0b4      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b095      	sub	sp, #84	@ 0x54
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	330c      	adds	r3, #12
 8006108:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800610a:	643a      	str	r2, [r7, #64]	@ 0x40
 800610c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e5      	bne.n	80060ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	61fb      	str	r3, [r7, #28]
   return(result);
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800613e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006140:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006156:	2b01      	cmp	r3, #1
 8006158:	d119      	bne.n	800618e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	60bb      	str	r3, [r7, #8]
   return(result);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f023 0310 	bic.w	r3, r3, #16
 8006170:	647b      	str	r3, [r7, #68]	@ 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800617a:	61ba      	str	r2, [r7, #24]
 800617c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	613b      	str	r3, [r7, #16]
   return(result);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e5      	bne.n	800615a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800619c:	bf00      	nop
 800619e:	3754      	adds	r7, #84	@ 0x54
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff ff21 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b21      	cmp	r3, #33	@ 0x21
 80061e0:	d13e      	bne.n	8006260 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ea:	d114      	bne.n	8006216 <UART_Transmit_IT+0x48>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d110      	bne.n	8006216 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006208:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	1c9a      	adds	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	621a      	str	r2, [r3, #32]
 8006214:	e008      	b.n	8006228 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6211      	str	r1, [r2, #32]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29b      	uxth	r3, r3
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4619      	mov	r1, r3
 8006236:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10f      	bne.n	800625c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800624a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800625a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006282:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fea9 	bl	8005fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	@ 0x30
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b22      	cmp	r3, #34	@ 0x22
 80062ae:	f040 80ae 	bne.w	800640e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ba:	d117      	bne.n	80062ec <UART_Receive_IT+0x50>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d113      	bne.n	80062ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ea:	e026      	b.n	800633a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fe:	d007      	beq.n	8006310 <UART_Receive_IT+0x74>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <UART_Receive_IT+0x82>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d106      	bne.n	800631e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	e008      	b.n	8006330 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800632a:	b2da      	uxtb	r2, r3
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29b      	uxth	r3, r3
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4619      	mov	r1, r3
 8006348:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800634a:	2b00      	cmp	r3, #0
 800634c:	d15d      	bne.n	800640a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0220 	bic.w	r2, r2, #32
 800635c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800636c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695a      	ldr	r2, [r3, #20]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	2b01      	cmp	r3, #1
 8006392:	d135      	bne.n	8006400 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	613b      	str	r3, [r7, #16]
   return(result);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f023 0310 	bic.w	r3, r3, #16
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	330c      	adds	r3, #12
 80063b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ba:	623a      	str	r2, [r7, #32]
 80063bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	69f9      	ldr	r1, [r7, #28]
 80063c0:	6a3a      	ldr	r2, [r7, #32]
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d10a      	bne.n	80063f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff fe0e 	bl	800601a <HAL_UARTEx_RxEventCallback>
 80063fe:	e002      	b.n	8006406 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff fdf8 	bl	8005ff6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e002      	b.n	8006410 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	e000      	b.n	8006410 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800640e:	2302      	movs	r3, #2
  }
}
 8006410:	4618      	mov	r0, r3
 8006412:	3730      	adds	r7, #48	@ 0x30
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006452:	f023 030c 	bic.w	r3, r3, #12
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	430b      	orrs	r3, r1
 800645e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2c      	ldr	r2, [pc, #176]	@ (800652c <UART_SetConfig+0x114>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d103      	bne.n	8006488 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006480:	f7fe fde0 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	e002      	b.n	800648e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006488:	f7fe fdc8 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 800648c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009a      	lsls	r2, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	4a22      	ldr	r2, [pc, #136]	@ (8006530 <UART_SetConfig+0x118>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	0119      	lsls	r1, r3, #4
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009a      	lsls	r2, r3, #2
 80064b8:	441a      	add	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006530 <UART_SetConfig+0x118>)
 80064c6:	fba3 0302 	umull	r0, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2064      	movs	r0, #100	@ 0x64
 80064ce:	fb00 f303 	mul.w	r3, r0, r3
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	3332      	adds	r3, #50	@ 0x32
 80064d8:	4a15      	ldr	r2, [pc, #84]	@ (8006530 <UART_SetConfig+0x118>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064e4:	4419      	add	r1, r3
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009a      	lsls	r2, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <UART_SetConfig+0x118>)
 80064fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	2064      	movs	r0, #100	@ 0x64
 8006506:	fb00 f303 	mul.w	r3, r0, r3
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	3332      	adds	r3, #50	@ 0x32
 8006510:	4a07      	ldr	r2, [pc, #28]	@ (8006530 <UART_SetConfig+0x118>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	440a      	add	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006524:	bf00      	nop
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40013800 	.word	0x40013800
 8006530:	51eb851f 	.word	0x51eb851f

08006534 <sniprintf>:
 8006534:	b40c      	push	{r2, r3}
 8006536:	b530      	push	{r4, r5, lr}
 8006538:	4b18      	ldr	r3, [pc, #96]	@ (800659c <sniprintf+0x68>)
 800653a:	1e0c      	subs	r4, r1, #0
 800653c:	681d      	ldr	r5, [r3, #0]
 800653e:	b09d      	sub	sp, #116	@ 0x74
 8006540:	da08      	bge.n	8006554 <sniprintf+0x20>
 8006542:	238b      	movs	r3, #139	@ 0x8b
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	b01d      	add	sp, #116	@ 0x74
 800654c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006550:	b002      	add	sp, #8
 8006552:	4770      	bx	lr
 8006554:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006558:	f8ad 3014 	strh.w	r3, [sp, #20]
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006562:	bf0c      	ite	eq
 8006564:	4623      	moveq	r3, r4
 8006566:	f104 33ff 	addne.w	r3, r4, #4294967295
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	9307      	str	r3, [sp, #28]
 800656e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006572:	9002      	str	r0, [sp, #8]
 8006574:	9006      	str	r0, [sp, #24]
 8006576:	f8ad 3016 	strh.w	r3, [sp, #22]
 800657a:	4628      	mov	r0, r5
 800657c:	ab21      	add	r3, sp, #132	@ 0x84
 800657e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006580:	a902      	add	r1, sp, #8
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	f000 f992 	bl	80068ac <_svfiprintf_r>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	bfbc      	itt	lt
 800658c:	238b      	movlt	r3, #139	@ 0x8b
 800658e:	602b      	strlt	r3, [r5, #0]
 8006590:	2c00      	cmp	r4, #0
 8006592:	d0da      	beq.n	800654a <sniprintf+0x16>
 8006594:	2200      	movs	r2, #0
 8006596:	9b02      	ldr	r3, [sp, #8]
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e7d6      	b.n	800654a <sniprintf+0x16>
 800659c:	2000000c 	.word	0x2000000c

080065a0 <memset>:
 80065a0:	4603      	mov	r3, r0
 80065a2:	4402      	add	r2, r0
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d100      	bne.n	80065aa <memset+0xa>
 80065a8:	4770      	bx	lr
 80065aa:	f803 1b01 	strb.w	r1, [r3], #1
 80065ae:	e7f9      	b.n	80065a4 <memset+0x4>

080065b0 <__errno>:
 80065b0:	4b01      	ldr	r3, [pc, #4]	@ (80065b8 <__errno+0x8>)
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	2000000c 	.word	0x2000000c

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	2600      	movs	r6, #0
 80065c0:	4d0c      	ldr	r5, [pc, #48]	@ (80065f4 <__libc_init_array+0x38>)
 80065c2:	4c0d      	ldr	r4, [pc, #52]	@ (80065f8 <__libc_init_array+0x3c>)
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	f001 fda4 	bl	8008118 <_init>
 80065d0:	2600      	movs	r6, #0
 80065d2:	4d0a      	ldr	r5, [pc, #40]	@ (80065fc <__libc_init_array+0x40>)
 80065d4:	4c0a      	ldr	r4, [pc, #40]	@ (8006600 <__libc_init_array+0x44>)
 80065d6:	1b64      	subs	r4, r4, r5
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	42a6      	cmp	r6, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e4:	4798      	blx	r3
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ee:	4798      	blx	r3
 80065f0:	3601      	adds	r6, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	08008268 	.word	0x08008268
 80065f8:	08008268 	.word	0x08008268
 80065fc:	08008268 	.word	0x08008268
 8006600:	0800826c 	.word	0x0800826c

08006604 <__retarget_lock_acquire_recursive>:
 8006604:	4770      	bx	lr

08006606 <__retarget_lock_release_recursive>:
 8006606:	4770      	bx	lr

08006608 <_free_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4605      	mov	r5, r0
 800660c:	2900      	cmp	r1, #0
 800660e:	d040      	beq.n	8006692 <_free_r+0x8a>
 8006610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006614:	1f0c      	subs	r4, r1, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfb8      	it	lt
 800661a:	18e4      	addlt	r4, r4, r3
 800661c:	f000 f8de 	bl	80067dc <__malloc_lock>
 8006620:	4a1c      	ldr	r2, [pc, #112]	@ (8006694 <_free_r+0x8c>)
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	b933      	cbnz	r3, 8006634 <_free_r+0x2c>
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	6014      	str	r4, [r2, #0]
 800662a:	4628      	mov	r0, r5
 800662c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006630:	f000 b8da 	b.w	80067e8 <__malloc_unlock>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d908      	bls.n	800664a <_free_r+0x42>
 8006638:	6820      	ldr	r0, [r4, #0]
 800663a:	1821      	adds	r1, r4, r0
 800663c:	428b      	cmp	r3, r1
 800663e:	bf01      	itttt	eq
 8006640:	6819      	ldreq	r1, [r3, #0]
 8006642:	685b      	ldreq	r3, [r3, #4]
 8006644:	1809      	addeq	r1, r1, r0
 8006646:	6021      	streq	r1, [r4, #0]
 8006648:	e7ed      	b.n	8006626 <_free_r+0x1e>
 800664a:	461a      	mov	r2, r3
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b10b      	cbz	r3, 8006654 <_free_r+0x4c>
 8006650:	42a3      	cmp	r3, r4
 8006652:	d9fa      	bls.n	800664a <_free_r+0x42>
 8006654:	6811      	ldr	r1, [r2, #0]
 8006656:	1850      	adds	r0, r2, r1
 8006658:	42a0      	cmp	r0, r4
 800665a:	d10b      	bne.n	8006674 <_free_r+0x6c>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	4401      	add	r1, r0
 8006660:	1850      	adds	r0, r2, r1
 8006662:	4283      	cmp	r3, r0
 8006664:	6011      	str	r1, [r2, #0]
 8006666:	d1e0      	bne.n	800662a <_free_r+0x22>
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	4408      	add	r0, r1
 800666e:	6010      	str	r0, [r2, #0]
 8006670:	6053      	str	r3, [r2, #4]
 8006672:	e7da      	b.n	800662a <_free_r+0x22>
 8006674:	d902      	bls.n	800667c <_free_r+0x74>
 8006676:	230c      	movs	r3, #12
 8006678:	602b      	str	r3, [r5, #0]
 800667a:	e7d6      	b.n	800662a <_free_r+0x22>
 800667c:	6820      	ldr	r0, [r4, #0]
 800667e:	1821      	adds	r1, r4, r0
 8006680:	428b      	cmp	r3, r1
 8006682:	bf01      	itttt	eq
 8006684:	6819      	ldreq	r1, [r3, #0]
 8006686:	685b      	ldreq	r3, [r3, #4]
 8006688:	1809      	addeq	r1, r1, r0
 800668a:	6021      	streq	r1, [r4, #0]
 800668c:	6063      	str	r3, [r4, #4]
 800668e:	6054      	str	r4, [r2, #4]
 8006690:	e7cb      	b.n	800662a <_free_r+0x22>
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	20000508 	.word	0x20000508

08006698 <sbrk_aligned>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4e0f      	ldr	r6, [pc, #60]	@ (80066d8 <sbrk_aligned+0x40>)
 800669c:	460c      	mov	r4, r1
 800669e:	6831      	ldr	r1, [r6, #0]
 80066a0:	4605      	mov	r5, r0
 80066a2:	b911      	cbnz	r1, 80066aa <sbrk_aligned+0x12>
 80066a4:	f000 fba8 	bl	8006df8 <_sbrk_r>
 80066a8:	6030      	str	r0, [r6, #0]
 80066aa:	4621      	mov	r1, r4
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 fba3 	bl	8006df8 <_sbrk_r>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	d103      	bne.n	80066be <sbrk_aligned+0x26>
 80066b6:	f04f 34ff 	mov.w	r4, #4294967295
 80066ba:	4620      	mov	r0, r4
 80066bc:	bd70      	pop	{r4, r5, r6, pc}
 80066be:	1cc4      	adds	r4, r0, #3
 80066c0:	f024 0403 	bic.w	r4, r4, #3
 80066c4:	42a0      	cmp	r0, r4
 80066c6:	d0f8      	beq.n	80066ba <sbrk_aligned+0x22>
 80066c8:	1a21      	subs	r1, r4, r0
 80066ca:	4628      	mov	r0, r5
 80066cc:	f000 fb94 	bl	8006df8 <_sbrk_r>
 80066d0:	3001      	adds	r0, #1
 80066d2:	d1f2      	bne.n	80066ba <sbrk_aligned+0x22>
 80066d4:	e7ef      	b.n	80066b6 <sbrk_aligned+0x1e>
 80066d6:	bf00      	nop
 80066d8:	20000504 	.word	0x20000504

080066dc <_malloc_r>:
 80066dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e0:	1ccd      	adds	r5, r1, #3
 80066e2:	f025 0503 	bic.w	r5, r5, #3
 80066e6:	3508      	adds	r5, #8
 80066e8:	2d0c      	cmp	r5, #12
 80066ea:	bf38      	it	cc
 80066ec:	250c      	movcc	r5, #12
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	4606      	mov	r6, r0
 80066f2:	db01      	blt.n	80066f8 <_malloc_r+0x1c>
 80066f4:	42a9      	cmp	r1, r5
 80066f6:	d904      	bls.n	8006702 <_malloc_r+0x26>
 80066f8:	230c      	movs	r3, #12
 80066fa:	6033      	str	r3, [r6, #0]
 80066fc:	2000      	movs	r0, #0
 80066fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067d8 <_malloc_r+0xfc>
 8006706:	f000 f869 	bl	80067dc <__malloc_lock>
 800670a:	f8d8 3000 	ldr.w	r3, [r8]
 800670e:	461c      	mov	r4, r3
 8006710:	bb44      	cbnz	r4, 8006764 <_malloc_r+0x88>
 8006712:	4629      	mov	r1, r5
 8006714:	4630      	mov	r0, r6
 8006716:	f7ff ffbf 	bl	8006698 <sbrk_aligned>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	4604      	mov	r4, r0
 800671e:	d158      	bne.n	80067d2 <_malloc_r+0xf6>
 8006720:	f8d8 4000 	ldr.w	r4, [r8]
 8006724:	4627      	mov	r7, r4
 8006726:	2f00      	cmp	r7, #0
 8006728:	d143      	bne.n	80067b2 <_malloc_r+0xd6>
 800672a:	2c00      	cmp	r4, #0
 800672c:	d04b      	beq.n	80067c6 <_malloc_r+0xea>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	4639      	mov	r1, r7
 8006732:	4630      	mov	r0, r6
 8006734:	eb04 0903 	add.w	r9, r4, r3
 8006738:	f000 fb5e 	bl	8006df8 <_sbrk_r>
 800673c:	4581      	cmp	r9, r0
 800673e:	d142      	bne.n	80067c6 <_malloc_r+0xea>
 8006740:	6821      	ldr	r1, [r4, #0]
 8006742:	4630      	mov	r0, r6
 8006744:	1a6d      	subs	r5, r5, r1
 8006746:	4629      	mov	r1, r5
 8006748:	f7ff ffa6 	bl	8006698 <sbrk_aligned>
 800674c:	3001      	adds	r0, #1
 800674e:	d03a      	beq.n	80067c6 <_malloc_r+0xea>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	442b      	add	r3, r5
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	f8d8 3000 	ldr.w	r3, [r8]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	bb62      	cbnz	r2, 80067b8 <_malloc_r+0xdc>
 800675e:	f8c8 7000 	str.w	r7, [r8]
 8006762:	e00f      	b.n	8006784 <_malloc_r+0xa8>
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	1b52      	subs	r2, r2, r5
 8006768:	d420      	bmi.n	80067ac <_malloc_r+0xd0>
 800676a:	2a0b      	cmp	r2, #11
 800676c:	d917      	bls.n	800679e <_malloc_r+0xc2>
 800676e:	1961      	adds	r1, r4, r5
 8006770:	42a3      	cmp	r3, r4
 8006772:	6025      	str	r5, [r4, #0]
 8006774:	bf18      	it	ne
 8006776:	6059      	strne	r1, [r3, #4]
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	bf08      	it	eq
 800677c:	f8c8 1000 	streq.w	r1, [r8]
 8006780:	5162      	str	r2, [r4, r5]
 8006782:	604b      	str	r3, [r1, #4]
 8006784:	4630      	mov	r0, r6
 8006786:	f000 f82f 	bl	80067e8 <__malloc_unlock>
 800678a:	f104 000b 	add.w	r0, r4, #11
 800678e:	1d23      	adds	r3, r4, #4
 8006790:	f020 0007 	bic.w	r0, r0, #7
 8006794:	1ac2      	subs	r2, r0, r3
 8006796:	bf1c      	itt	ne
 8006798:	1a1b      	subne	r3, r3, r0
 800679a:	50a3      	strne	r3, [r4, r2]
 800679c:	e7af      	b.n	80066fe <_malloc_r+0x22>
 800679e:	6862      	ldr	r2, [r4, #4]
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	bf0c      	ite	eq
 80067a4:	f8c8 2000 	streq.w	r2, [r8]
 80067a8:	605a      	strne	r2, [r3, #4]
 80067aa:	e7eb      	b.n	8006784 <_malloc_r+0xa8>
 80067ac:	4623      	mov	r3, r4
 80067ae:	6864      	ldr	r4, [r4, #4]
 80067b0:	e7ae      	b.n	8006710 <_malloc_r+0x34>
 80067b2:	463c      	mov	r4, r7
 80067b4:	687f      	ldr	r7, [r7, #4]
 80067b6:	e7b6      	b.n	8006726 <_malloc_r+0x4a>
 80067b8:	461a      	mov	r2, r3
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	42a3      	cmp	r3, r4
 80067be:	d1fb      	bne.n	80067b8 <_malloc_r+0xdc>
 80067c0:	2300      	movs	r3, #0
 80067c2:	6053      	str	r3, [r2, #4]
 80067c4:	e7de      	b.n	8006784 <_malloc_r+0xa8>
 80067c6:	230c      	movs	r3, #12
 80067c8:	4630      	mov	r0, r6
 80067ca:	6033      	str	r3, [r6, #0]
 80067cc:	f000 f80c 	bl	80067e8 <__malloc_unlock>
 80067d0:	e794      	b.n	80066fc <_malloc_r+0x20>
 80067d2:	6005      	str	r5, [r0, #0]
 80067d4:	e7d6      	b.n	8006784 <_malloc_r+0xa8>
 80067d6:	bf00      	nop
 80067d8:	20000508 	.word	0x20000508

080067dc <__malloc_lock>:
 80067dc:	4801      	ldr	r0, [pc, #4]	@ (80067e4 <__malloc_lock+0x8>)
 80067de:	f7ff bf11 	b.w	8006604 <__retarget_lock_acquire_recursive>
 80067e2:	bf00      	nop
 80067e4:	20000500 	.word	0x20000500

080067e8 <__malloc_unlock>:
 80067e8:	4801      	ldr	r0, [pc, #4]	@ (80067f0 <__malloc_unlock+0x8>)
 80067ea:	f7ff bf0c 	b.w	8006606 <__retarget_lock_release_recursive>
 80067ee:	bf00      	nop
 80067f0:	20000500 	.word	0x20000500

080067f4 <__ssputs_r>:
 80067f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	461f      	mov	r7, r3
 80067fa:	688e      	ldr	r6, [r1, #8]
 80067fc:	4682      	mov	sl, r0
 80067fe:	42be      	cmp	r6, r7
 8006800:	460c      	mov	r4, r1
 8006802:	4690      	mov	r8, r2
 8006804:	680b      	ldr	r3, [r1, #0]
 8006806:	d82d      	bhi.n	8006864 <__ssputs_r+0x70>
 8006808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800680c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006810:	d026      	beq.n	8006860 <__ssputs_r+0x6c>
 8006812:	6965      	ldr	r5, [r4, #20]
 8006814:	6909      	ldr	r1, [r1, #16]
 8006816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800681a:	eba3 0901 	sub.w	r9, r3, r1
 800681e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006822:	1c7b      	adds	r3, r7, #1
 8006824:	444b      	add	r3, r9
 8006826:	106d      	asrs	r5, r5, #1
 8006828:	429d      	cmp	r5, r3
 800682a:	bf38      	it	cc
 800682c:	461d      	movcc	r5, r3
 800682e:	0553      	lsls	r3, r2, #21
 8006830:	d527      	bpl.n	8006882 <__ssputs_r+0x8e>
 8006832:	4629      	mov	r1, r5
 8006834:	f7ff ff52 	bl	80066dc <_malloc_r>
 8006838:	4606      	mov	r6, r0
 800683a:	b360      	cbz	r0, 8006896 <__ssputs_r+0xa2>
 800683c:	464a      	mov	r2, r9
 800683e:	6921      	ldr	r1, [r4, #16]
 8006840:	f000 faf8 	bl	8006e34 <memcpy>
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800684a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	6126      	str	r6, [r4, #16]
 8006852:	444e      	add	r6, r9
 8006854:	6026      	str	r6, [r4, #0]
 8006856:	463e      	mov	r6, r7
 8006858:	6165      	str	r5, [r4, #20]
 800685a:	eba5 0509 	sub.w	r5, r5, r9
 800685e:	60a5      	str	r5, [r4, #8]
 8006860:	42be      	cmp	r6, r7
 8006862:	d900      	bls.n	8006866 <__ssputs_r+0x72>
 8006864:	463e      	mov	r6, r7
 8006866:	4632      	mov	r2, r6
 8006868:	4641      	mov	r1, r8
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	f000 faaa 	bl	8006dc4 <memmove>
 8006870:	2000      	movs	r0, #0
 8006872:	68a3      	ldr	r3, [r4, #8]
 8006874:	1b9b      	subs	r3, r3, r6
 8006876:	60a3      	str	r3, [r4, #8]
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	4433      	add	r3, r6
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006882:	462a      	mov	r2, r5
 8006884:	f000 fae4 	bl	8006e50 <_realloc_r>
 8006888:	4606      	mov	r6, r0
 800688a:	2800      	cmp	r0, #0
 800688c:	d1e0      	bne.n	8006850 <__ssputs_r+0x5c>
 800688e:	4650      	mov	r0, sl
 8006890:	6921      	ldr	r1, [r4, #16]
 8006892:	f7ff feb9 	bl	8006608 <_free_r>
 8006896:	230c      	movs	r3, #12
 8006898:	f8ca 3000 	str.w	r3, [sl]
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	e7e9      	b.n	800687e <__ssputs_r+0x8a>
	...

080068ac <_svfiprintf_r>:
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	4698      	mov	r8, r3
 80068b2:	898b      	ldrh	r3, [r1, #12]
 80068b4:	4607      	mov	r7, r0
 80068b6:	061b      	lsls	r3, r3, #24
 80068b8:	460d      	mov	r5, r1
 80068ba:	4614      	mov	r4, r2
 80068bc:	b09d      	sub	sp, #116	@ 0x74
 80068be:	d510      	bpl.n	80068e2 <_svfiprintf_r+0x36>
 80068c0:	690b      	ldr	r3, [r1, #16]
 80068c2:	b973      	cbnz	r3, 80068e2 <_svfiprintf_r+0x36>
 80068c4:	2140      	movs	r1, #64	@ 0x40
 80068c6:	f7ff ff09 	bl	80066dc <_malloc_r>
 80068ca:	6028      	str	r0, [r5, #0]
 80068cc:	6128      	str	r0, [r5, #16]
 80068ce:	b930      	cbnz	r0, 80068de <_svfiprintf_r+0x32>
 80068d0:	230c      	movs	r3, #12
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	b01d      	add	sp, #116	@ 0x74
 80068da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068de:	2340      	movs	r3, #64	@ 0x40
 80068e0:	616b      	str	r3, [r5, #20]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e6:	2320      	movs	r3, #32
 80068e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068ec:	2330      	movs	r3, #48	@ 0x30
 80068ee:	f04f 0901 	mov.w	r9, #1
 80068f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006a90 <_svfiprintf_r+0x1e4>
 80068fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068fe:	4623      	mov	r3, r4
 8006900:	469a      	mov	sl, r3
 8006902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006906:	b10a      	cbz	r2, 800690c <_svfiprintf_r+0x60>
 8006908:	2a25      	cmp	r2, #37	@ 0x25
 800690a:	d1f9      	bne.n	8006900 <_svfiprintf_r+0x54>
 800690c:	ebba 0b04 	subs.w	fp, sl, r4
 8006910:	d00b      	beq.n	800692a <_svfiprintf_r+0x7e>
 8006912:	465b      	mov	r3, fp
 8006914:	4622      	mov	r2, r4
 8006916:	4629      	mov	r1, r5
 8006918:	4638      	mov	r0, r7
 800691a:	f7ff ff6b 	bl	80067f4 <__ssputs_r>
 800691e:	3001      	adds	r0, #1
 8006920:	f000 80a7 	beq.w	8006a72 <_svfiprintf_r+0x1c6>
 8006924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006926:	445a      	add	r2, fp
 8006928:	9209      	str	r2, [sp, #36]	@ 0x24
 800692a:	f89a 3000 	ldrb.w	r3, [sl]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 809f 	beq.w	8006a72 <_svfiprintf_r+0x1c6>
 8006934:	2300      	movs	r3, #0
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800693e:	f10a 0a01 	add.w	sl, sl, #1
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	9307      	str	r3, [sp, #28]
 8006946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800694a:	931a      	str	r3, [sp, #104]	@ 0x68
 800694c:	4654      	mov	r4, sl
 800694e:	2205      	movs	r2, #5
 8006950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006954:	484e      	ldr	r0, [pc, #312]	@ (8006a90 <_svfiprintf_r+0x1e4>)
 8006956:	f000 fa5f 	bl	8006e18 <memchr>
 800695a:	9a04      	ldr	r2, [sp, #16]
 800695c:	b9d8      	cbnz	r0, 8006996 <_svfiprintf_r+0xea>
 800695e:	06d0      	lsls	r0, r2, #27
 8006960:	bf44      	itt	mi
 8006962:	2320      	movmi	r3, #32
 8006964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006968:	0711      	lsls	r1, r2, #28
 800696a:	bf44      	itt	mi
 800696c:	232b      	movmi	r3, #43	@ 0x2b
 800696e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006972:	f89a 3000 	ldrb.w	r3, [sl]
 8006976:	2b2a      	cmp	r3, #42	@ 0x2a
 8006978:	d015      	beq.n	80069a6 <_svfiprintf_r+0xfa>
 800697a:	4654      	mov	r4, sl
 800697c:	2000      	movs	r0, #0
 800697e:	f04f 0c0a 	mov.w	ip, #10
 8006982:	9a07      	ldr	r2, [sp, #28]
 8006984:	4621      	mov	r1, r4
 8006986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698a:	3b30      	subs	r3, #48	@ 0x30
 800698c:	2b09      	cmp	r3, #9
 800698e:	d94b      	bls.n	8006a28 <_svfiprintf_r+0x17c>
 8006990:	b1b0      	cbz	r0, 80069c0 <_svfiprintf_r+0x114>
 8006992:	9207      	str	r2, [sp, #28]
 8006994:	e014      	b.n	80069c0 <_svfiprintf_r+0x114>
 8006996:	eba0 0308 	sub.w	r3, r0, r8
 800699a:	fa09 f303 	lsl.w	r3, r9, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	46a2      	mov	sl, r4
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	e7d2      	b.n	800694c <_svfiprintf_r+0xa0>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	1d19      	adds	r1, r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	9103      	str	r1, [sp, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfbb      	ittet	lt
 80069b2:	425b      	neglt	r3, r3
 80069b4:	f042 0202 	orrlt.w	r2, r2, #2
 80069b8:	9307      	strge	r3, [sp, #28]
 80069ba:	9307      	strlt	r3, [sp, #28]
 80069bc:	bfb8      	it	lt
 80069be:	9204      	strlt	r2, [sp, #16]
 80069c0:	7823      	ldrb	r3, [r4, #0]
 80069c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80069c4:	d10a      	bne.n	80069dc <_svfiprintf_r+0x130>
 80069c6:	7863      	ldrb	r3, [r4, #1]
 80069c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ca:	d132      	bne.n	8006a32 <_svfiprintf_r+0x186>
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	3402      	adds	r4, #2
 80069d0:	1d1a      	adds	r2, r3, #4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	9203      	str	r2, [sp, #12]
 80069d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069da:	9305      	str	r3, [sp, #20]
 80069dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006a94 <_svfiprintf_r+0x1e8>
 80069e0:	2203      	movs	r2, #3
 80069e2:	4650      	mov	r0, sl
 80069e4:	7821      	ldrb	r1, [r4, #0]
 80069e6:	f000 fa17 	bl	8006e18 <memchr>
 80069ea:	b138      	cbz	r0, 80069fc <_svfiprintf_r+0x150>
 80069ec:	2240      	movs	r2, #64	@ 0x40
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	eba0 000a 	sub.w	r0, r0, sl
 80069f4:	4082      	lsls	r2, r0
 80069f6:	4313      	orrs	r3, r2
 80069f8:	3401      	adds	r4, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a00:	2206      	movs	r2, #6
 8006a02:	4825      	ldr	r0, [pc, #148]	@ (8006a98 <_svfiprintf_r+0x1ec>)
 8006a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a08:	f000 fa06 	bl	8006e18 <memchr>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d036      	beq.n	8006a7e <_svfiprintf_r+0x1d2>
 8006a10:	4b22      	ldr	r3, [pc, #136]	@ (8006a9c <_svfiprintf_r+0x1f0>)
 8006a12:	bb1b      	cbnz	r3, 8006a5c <_svfiprintf_r+0x1b0>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	3307      	adds	r3, #7
 8006a18:	f023 0307 	bic.w	r3, r3, #7
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	9303      	str	r3, [sp, #12]
 8006a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a22:	4433      	add	r3, r6
 8006a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a26:	e76a      	b.n	80068fe <_svfiprintf_r+0x52>
 8006a28:	460c      	mov	r4, r1
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a30:	e7a8      	b.n	8006984 <_svfiprintf_r+0xd8>
 8006a32:	2300      	movs	r3, #0
 8006a34:	f04f 0c0a 	mov.w	ip, #10
 8006a38:	4619      	mov	r1, r3
 8006a3a:	3401      	adds	r4, #1
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a44:	3a30      	subs	r2, #48	@ 0x30
 8006a46:	2a09      	cmp	r2, #9
 8006a48:	d903      	bls.n	8006a52 <_svfiprintf_r+0x1a6>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0c6      	beq.n	80069dc <_svfiprintf_r+0x130>
 8006a4e:	9105      	str	r1, [sp, #20]
 8006a50:	e7c4      	b.n	80069dc <_svfiprintf_r+0x130>
 8006a52:	4604      	mov	r4, r0
 8006a54:	2301      	movs	r3, #1
 8006a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a5a:	e7f0      	b.n	8006a3e <_svfiprintf_r+0x192>
 8006a5c:	ab03      	add	r3, sp, #12
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	462a      	mov	r2, r5
 8006a62:	4638      	mov	r0, r7
 8006a64:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa0 <_svfiprintf_r+0x1f4>)
 8006a66:	a904      	add	r1, sp, #16
 8006a68:	f3af 8000 	nop.w
 8006a6c:	1c42      	adds	r2, r0, #1
 8006a6e:	4606      	mov	r6, r0
 8006a70:	d1d6      	bne.n	8006a20 <_svfiprintf_r+0x174>
 8006a72:	89ab      	ldrh	r3, [r5, #12]
 8006a74:	065b      	lsls	r3, r3, #25
 8006a76:	f53f af2d 	bmi.w	80068d4 <_svfiprintf_r+0x28>
 8006a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a7c:	e72c      	b.n	80068d8 <_svfiprintf_r+0x2c>
 8006a7e:	ab03      	add	r3, sp, #12
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	462a      	mov	r2, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <_svfiprintf_r+0x1f4>)
 8006a88:	a904      	add	r1, sp, #16
 8006a8a:	f000 f87d 	bl	8006b88 <_printf_i>
 8006a8e:	e7ed      	b.n	8006a6c <_svfiprintf_r+0x1c0>
 8006a90:	080081aa 	.word	0x080081aa
 8006a94:	080081b0 	.word	0x080081b0
 8006a98:	080081b4 	.word	0x080081b4
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	080067f5 	.word	0x080067f5

08006aa4 <_printf_common>:
 8006aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	4698      	mov	r8, r3
 8006aac:	688a      	ldr	r2, [r1, #8]
 8006aae:	690b      	ldr	r3, [r1, #16]
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bfb8      	it	lt
 8006ab6:	4613      	movlt	r3, r2
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006abe:	460c      	mov	r4, r1
 8006ac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ac4:	b10a      	cbz	r2, 8006aca <_printf_common+0x26>
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	0699      	lsls	r1, r3, #26
 8006ace:	bf42      	ittt	mi
 8006ad0:	6833      	ldrmi	r3, [r6, #0]
 8006ad2:	3302      	addmi	r3, #2
 8006ad4:	6033      	strmi	r3, [r6, #0]
 8006ad6:	6825      	ldr	r5, [r4, #0]
 8006ad8:	f015 0506 	ands.w	r5, r5, #6
 8006adc:	d106      	bne.n	8006aec <_printf_common+0x48>
 8006ade:	f104 0a19 	add.w	sl, r4, #25
 8006ae2:	68e3      	ldr	r3, [r4, #12]
 8006ae4:	6832      	ldr	r2, [r6, #0]
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	42ab      	cmp	r3, r5
 8006aea:	dc2b      	bgt.n	8006b44 <_printf_common+0xa0>
 8006aec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006af0:	6822      	ldr	r2, [r4, #0]
 8006af2:	3b00      	subs	r3, #0
 8006af4:	bf18      	it	ne
 8006af6:	2301      	movne	r3, #1
 8006af8:	0692      	lsls	r2, r2, #26
 8006afa:	d430      	bmi.n	8006b5e <_printf_common+0xba>
 8006afc:	4641      	mov	r1, r8
 8006afe:	4638      	mov	r0, r7
 8006b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b04:	47c8      	blx	r9
 8006b06:	3001      	adds	r0, #1
 8006b08:	d023      	beq.n	8006b52 <_printf_common+0xae>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	f003 0306 	and.w	r3, r3, #6
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	bf14      	ite	ne
 8006b16:	2500      	movne	r5, #0
 8006b18:	6833      	ldreq	r3, [r6, #0]
 8006b1a:	f04f 0600 	mov.w	r6, #0
 8006b1e:	bf08      	it	eq
 8006b20:	68e5      	ldreq	r5, [r4, #12]
 8006b22:	f104 041a 	add.w	r4, r4, #26
 8006b26:	bf08      	it	eq
 8006b28:	1aed      	subeq	r5, r5, r3
 8006b2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b2e:	bf08      	it	eq
 8006b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b34:	4293      	cmp	r3, r2
 8006b36:	bfc4      	itt	gt
 8006b38:	1a9b      	subgt	r3, r3, r2
 8006b3a:	18ed      	addgt	r5, r5, r3
 8006b3c:	42b5      	cmp	r5, r6
 8006b3e:	d11a      	bne.n	8006b76 <_printf_common+0xd2>
 8006b40:	2000      	movs	r0, #0
 8006b42:	e008      	b.n	8006b56 <_printf_common+0xb2>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4652      	mov	r2, sl
 8006b48:	4641      	mov	r1, r8
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	47c8      	blx	r9
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d103      	bne.n	8006b5a <_printf_common+0xb6>
 8006b52:	f04f 30ff 	mov.w	r0, #4294967295
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	3501      	adds	r5, #1
 8006b5c:	e7c1      	b.n	8006ae2 <_printf_common+0x3e>
 8006b5e:	2030      	movs	r0, #48	@ 0x30
 8006b60:	18e1      	adds	r1, r4, r3
 8006b62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b6c:	4422      	add	r2, r4
 8006b6e:	3302      	adds	r3, #2
 8006b70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b74:	e7c2      	b.n	8006afc <_printf_common+0x58>
 8006b76:	2301      	movs	r3, #1
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	47c8      	blx	r9
 8006b80:	3001      	adds	r0, #1
 8006b82:	d0e6      	beq.n	8006b52 <_printf_common+0xae>
 8006b84:	3601      	adds	r6, #1
 8006b86:	e7d9      	b.n	8006b3c <_printf_common+0x98>

08006b88 <_printf_i>:
 8006b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8c:	7e0f      	ldrb	r7, [r1, #24]
 8006b8e:	4691      	mov	r9, r2
 8006b90:	2f78      	cmp	r7, #120	@ 0x78
 8006b92:	4680      	mov	r8, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	469a      	mov	sl, r3
 8006b98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b9e:	d807      	bhi.n	8006bb0 <_printf_i+0x28>
 8006ba0:	2f62      	cmp	r7, #98	@ 0x62
 8006ba2:	d80a      	bhi.n	8006bba <_printf_i+0x32>
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	f000 80d1 	beq.w	8006d4c <_printf_i+0x1c4>
 8006baa:	2f58      	cmp	r7, #88	@ 0x58
 8006bac:	f000 80b8 	beq.w	8006d20 <_printf_i+0x198>
 8006bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bb8:	e03a      	b.n	8006c30 <_printf_i+0xa8>
 8006bba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bbe:	2b15      	cmp	r3, #21
 8006bc0:	d8f6      	bhi.n	8006bb0 <_printf_i+0x28>
 8006bc2:	a101      	add	r1, pc, #4	@ (adr r1, 8006bc8 <_printf_i+0x40>)
 8006bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc8:	08006c21 	.word	0x08006c21
 8006bcc:	08006c35 	.word	0x08006c35
 8006bd0:	08006bb1 	.word	0x08006bb1
 8006bd4:	08006bb1 	.word	0x08006bb1
 8006bd8:	08006bb1 	.word	0x08006bb1
 8006bdc:	08006bb1 	.word	0x08006bb1
 8006be0:	08006c35 	.word	0x08006c35
 8006be4:	08006bb1 	.word	0x08006bb1
 8006be8:	08006bb1 	.word	0x08006bb1
 8006bec:	08006bb1 	.word	0x08006bb1
 8006bf0:	08006bb1 	.word	0x08006bb1
 8006bf4:	08006d33 	.word	0x08006d33
 8006bf8:	08006c5f 	.word	0x08006c5f
 8006bfc:	08006ced 	.word	0x08006ced
 8006c00:	08006bb1 	.word	0x08006bb1
 8006c04:	08006bb1 	.word	0x08006bb1
 8006c08:	08006d55 	.word	0x08006d55
 8006c0c:	08006bb1 	.word	0x08006bb1
 8006c10:	08006c5f 	.word	0x08006c5f
 8006c14:	08006bb1 	.word	0x08006bb1
 8006c18:	08006bb1 	.word	0x08006bb1
 8006c1c:	08006cf5 	.word	0x08006cf5
 8006c20:	6833      	ldr	r3, [r6, #0]
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6032      	str	r2, [r6, #0]
 8006c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c30:	2301      	movs	r3, #1
 8006c32:	e09c      	b.n	8006d6e <_printf_i+0x1e6>
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	6820      	ldr	r0, [r4, #0]
 8006c38:	1d19      	adds	r1, r3, #4
 8006c3a:	6031      	str	r1, [r6, #0]
 8006c3c:	0606      	lsls	r6, r0, #24
 8006c3e:	d501      	bpl.n	8006c44 <_printf_i+0xbc>
 8006c40:	681d      	ldr	r5, [r3, #0]
 8006c42:	e003      	b.n	8006c4c <_printf_i+0xc4>
 8006c44:	0645      	lsls	r5, r0, #25
 8006c46:	d5fb      	bpl.n	8006c40 <_printf_i+0xb8>
 8006c48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	da03      	bge.n	8006c58 <_printf_i+0xd0>
 8006c50:	232d      	movs	r3, #45	@ 0x2d
 8006c52:	426d      	negs	r5, r5
 8006c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c58:	230a      	movs	r3, #10
 8006c5a:	4858      	ldr	r0, [pc, #352]	@ (8006dbc <_printf_i+0x234>)
 8006c5c:	e011      	b.n	8006c82 <_printf_i+0xfa>
 8006c5e:	6821      	ldr	r1, [r4, #0]
 8006c60:	6833      	ldr	r3, [r6, #0]
 8006c62:	0608      	lsls	r0, r1, #24
 8006c64:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c68:	d402      	bmi.n	8006c70 <_printf_i+0xe8>
 8006c6a:	0649      	lsls	r1, r1, #25
 8006c6c:	bf48      	it	mi
 8006c6e:	b2ad      	uxthmi	r5, r5
 8006c70:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c72:	6033      	str	r3, [r6, #0]
 8006c74:	bf14      	ite	ne
 8006c76:	230a      	movne	r3, #10
 8006c78:	2308      	moveq	r3, #8
 8006c7a:	4850      	ldr	r0, [pc, #320]	@ (8006dbc <_printf_i+0x234>)
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c82:	6866      	ldr	r6, [r4, #4]
 8006c84:	2e00      	cmp	r6, #0
 8006c86:	60a6      	str	r6, [r4, #8]
 8006c88:	db05      	blt.n	8006c96 <_printf_i+0x10e>
 8006c8a:	6821      	ldr	r1, [r4, #0]
 8006c8c:	432e      	orrs	r6, r5
 8006c8e:	f021 0104 	bic.w	r1, r1, #4
 8006c92:	6021      	str	r1, [r4, #0]
 8006c94:	d04b      	beq.n	8006d2e <_printf_i+0x1a6>
 8006c96:	4616      	mov	r6, r2
 8006c98:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c9c:	fb03 5711 	mls	r7, r3, r1, r5
 8006ca0:	5dc7      	ldrb	r7, [r0, r7]
 8006ca2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ca6:	462f      	mov	r7, r5
 8006ca8:	42bb      	cmp	r3, r7
 8006caa:	460d      	mov	r5, r1
 8006cac:	d9f4      	bls.n	8006c98 <_printf_i+0x110>
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d10b      	bne.n	8006cca <_printf_i+0x142>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	07df      	lsls	r7, r3, #31
 8006cb6:	d508      	bpl.n	8006cca <_printf_i+0x142>
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	6861      	ldr	r1, [r4, #4]
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	bfde      	ittt	le
 8006cc0:	2330      	movle	r3, #48	@ 0x30
 8006cc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cca:	1b92      	subs	r2, r2, r6
 8006ccc:	6122      	str	r2, [r4, #16]
 8006cce:	464b      	mov	r3, r9
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	f8cd a000 	str.w	sl, [sp]
 8006cd8:	aa03      	add	r2, sp, #12
 8006cda:	f7ff fee3 	bl	8006aa4 <_printf_common>
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d14a      	bne.n	8006d78 <_printf_i+0x1f0>
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce6:	b004      	add	sp, #16
 8006ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	f043 0320 	orr.w	r3, r3, #32
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	2778      	movs	r7, #120	@ 0x78
 8006cf6:	4832      	ldr	r0, [pc, #200]	@ (8006dc0 <_printf_i+0x238>)
 8006cf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	6831      	ldr	r1, [r6, #0]
 8006d00:	061f      	lsls	r7, r3, #24
 8006d02:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d06:	d402      	bmi.n	8006d0e <_printf_i+0x186>
 8006d08:	065f      	lsls	r7, r3, #25
 8006d0a:	bf48      	it	mi
 8006d0c:	b2ad      	uxthmi	r5, r5
 8006d0e:	6031      	str	r1, [r6, #0]
 8006d10:	07d9      	lsls	r1, r3, #31
 8006d12:	bf44      	itt	mi
 8006d14:	f043 0320 	orrmi.w	r3, r3, #32
 8006d18:	6023      	strmi	r3, [r4, #0]
 8006d1a:	b11d      	cbz	r5, 8006d24 <_printf_i+0x19c>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	e7ad      	b.n	8006c7c <_printf_i+0xf4>
 8006d20:	4826      	ldr	r0, [pc, #152]	@ (8006dbc <_printf_i+0x234>)
 8006d22:	e7e9      	b.n	8006cf8 <_printf_i+0x170>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	f023 0320 	bic.w	r3, r3, #32
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	e7f6      	b.n	8006d1c <_printf_i+0x194>
 8006d2e:	4616      	mov	r6, r2
 8006d30:	e7bd      	b.n	8006cae <_printf_i+0x126>
 8006d32:	6833      	ldr	r3, [r6, #0]
 8006d34:	6825      	ldr	r5, [r4, #0]
 8006d36:	1d18      	adds	r0, r3, #4
 8006d38:	6961      	ldr	r1, [r4, #20]
 8006d3a:	6030      	str	r0, [r6, #0]
 8006d3c:	062e      	lsls	r6, r5, #24
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	d501      	bpl.n	8006d46 <_printf_i+0x1be>
 8006d42:	6019      	str	r1, [r3, #0]
 8006d44:	e002      	b.n	8006d4c <_printf_i+0x1c4>
 8006d46:	0668      	lsls	r0, r5, #25
 8006d48:	d5fb      	bpl.n	8006d42 <_printf_i+0x1ba>
 8006d4a:	8019      	strh	r1, [r3, #0]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4616      	mov	r6, r2
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	e7bc      	b.n	8006cce <_printf_i+0x146>
 8006d54:	6833      	ldr	r3, [r6, #0]
 8006d56:	2100      	movs	r1, #0
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	6032      	str	r2, [r6, #0]
 8006d5c:	681e      	ldr	r6, [r3, #0]
 8006d5e:	6862      	ldr	r2, [r4, #4]
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f859 	bl	8006e18 <memchr>
 8006d66:	b108      	cbz	r0, 8006d6c <_printf_i+0x1e4>
 8006d68:	1b80      	subs	r0, r0, r6
 8006d6a:	6060      	str	r0, [r4, #4]
 8006d6c:	6863      	ldr	r3, [r4, #4]
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	2300      	movs	r3, #0
 8006d72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d76:	e7aa      	b.n	8006cce <_printf_i+0x146>
 8006d78:	4632      	mov	r2, r6
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	47d0      	blx	sl
 8006d82:	3001      	adds	r0, #1
 8006d84:	d0ad      	beq.n	8006ce2 <_printf_i+0x15a>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	079b      	lsls	r3, r3, #30
 8006d8a:	d413      	bmi.n	8006db4 <_printf_i+0x22c>
 8006d8c:	68e0      	ldr	r0, [r4, #12]
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	4298      	cmp	r0, r3
 8006d92:	bfb8      	it	lt
 8006d94:	4618      	movlt	r0, r3
 8006d96:	e7a6      	b.n	8006ce6 <_printf_i+0x15e>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4640      	mov	r0, r8
 8006da0:	47d0      	blx	sl
 8006da2:	3001      	adds	r0, #1
 8006da4:	d09d      	beq.n	8006ce2 <_printf_i+0x15a>
 8006da6:	3501      	adds	r5, #1
 8006da8:	68e3      	ldr	r3, [r4, #12]
 8006daa:	9903      	ldr	r1, [sp, #12]
 8006dac:	1a5b      	subs	r3, r3, r1
 8006dae:	42ab      	cmp	r3, r5
 8006db0:	dcf2      	bgt.n	8006d98 <_printf_i+0x210>
 8006db2:	e7eb      	b.n	8006d8c <_printf_i+0x204>
 8006db4:	2500      	movs	r5, #0
 8006db6:	f104 0619 	add.w	r6, r4, #25
 8006dba:	e7f5      	b.n	8006da8 <_printf_i+0x220>
 8006dbc:	080081bb 	.word	0x080081bb
 8006dc0:	080081cc 	.word	0x080081cc

08006dc4 <memmove>:
 8006dc4:	4288      	cmp	r0, r1
 8006dc6:	b510      	push	{r4, lr}
 8006dc8:	eb01 0402 	add.w	r4, r1, r2
 8006dcc:	d902      	bls.n	8006dd4 <memmove+0x10>
 8006dce:	4284      	cmp	r4, r0
 8006dd0:	4623      	mov	r3, r4
 8006dd2:	d807      	bhi.n	8006de4 <memmove+0x20>
 8006dd4:	1e43      	subs	r3, r0, #1
 8006dd6:	42a1      	cmp	r1, r4
 8006dd8:	d008      	beq.n	8006dec <memmove+0x28>
 8006dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006de2:	e7f8      	b.n	8006dd6 <memmove+0x12>
 8006de4:	4601      	mov	r1, r0
 8006de6:	4402      	add	r2, r0
 8006de8:	428a      	cmp	r2, r1
 8006dea:	d100      	bne.n	8006dee <memmove+0x2a>
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006df6:	e7f7      	b.n	8006de8 <memmove+0x24>

08006df8 <_sbrk_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4d05      	ldr	r5, [pc, #20]	@ (8006e14 <_sbrk_r+0x1c>)
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	f7fb fc52 	bl	80026ac <_sbrk>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_sbrk_r+0x1a>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_sbrk_r+0x1a>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	200004fc 	.word	0x200004fc

08006e18 <memchr>:
 8006e18:	4603      	mov	r3, r0
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	b2c9      	uxtb	r1, r1
 8006e1e:	4402      	add	r2, r0
 8006e20:	4293      	cmp	r3, r2
 8006e22:	4618      	mov	r0, r3
 8006e24:	d101      	bne.n	8006e2a <memchr+0x12>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e003      	b.n	8006e32 <memchr+0x1a>
 8006e2a:	7804      	ldrb	r4, [r0, #0]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	428c      	cmp	r4, r1
 8006e30:	d1f6      	bne.n	8006e20 <memchr+0x8>
 8006e32:	bd10      	pop	{r4, pc}

08006e34 <memcpy>:
 8006e34:	440a      	add	r2, r1
 8006e36:	4291      	cmp	r1, r2
 8006e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e3c:	d100      	bne.n	8006e40 <memcpy+0xc>
 8006e3e:	4770      	bx	lr
 8006e40:	b510      	push	{r4, lr}
 8006e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e46:	4291      	cmp	r1, r2
 8006e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e4c:	d1f9      	bne.n	8006e42 <memcpy+0xe>
 8006e4e:	bd10      	pop	{r4, pc}

08006e50 <_realloc_r>:
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	4607      	mov	r7, r0
 8006e56:	4614      	mov	r4, r2
 8006e58:	460d      	mov	r5, r1
 8006e5a:	b921      	cbnz	r1, 8006e66 <_realloc_r+0x16>
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	f7ff bc3b 	b.w	80066dc <_malloc_r>
 8006e66:	b92a      	cbnz	r2, 8006e74 <_realloc_r+0x24>
 8006e68:	f7ff fbce 	bl	8006608 <_free_r>
 8006e6c:	4625      	mov	r5, r4
 8006e6e:	4628      	mov	r0, r5
 8006e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e74:	f000 f81a 	bl	8006eac <_malloc_usable_size_r>
 8006e78:	4284      	cmp	r4, r0
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	d802      	bhi.n	8006e84 <_realloc_r+0x34>
 8006e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e82:	d8f4      	bhi.n	8006e6e <_realloc_r+0x1e>
 8006e84:	4621      	mov	r1, r4
 8006e86:	4638      	mov	r0, r7
 8006e88:	f7ff fc28 	bl	80066dc <_malloc_r>
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	b908      	cbnz	r0, 8006e94 <_realloc_r+0x44>
 8006e90:	4645      	mov	r5, r8
 8006e92:	e7ec      	b.n	8006e6e <_realloc_r+0x1e>
 8006e94:	42b4      	cmp	r4, r6
 8006e96:	4622      	mov	r2, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	bf28      	it	cs
 8006e9c:	4632      	movcs	r2, r6
 8006e9e:	f7ff ffc9 	bl	8006e34 <memcpy>
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7ff fbaf 	bl	8006608 <_free_r>
 8006eaa:	e7f1      	b.n	8006e90 <_realloc_r+0x40>

08006eac <_malloc_usable_size_r>:
 8006eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb0:	1f18      	subs	r0, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bfbc      	itt	lt
 8006eb6:	580b      	ldrlt	r3, [r1, r0]
 8006eb8:	18c0      	addlt	r0, r0, r3
 8006eba:	4770      	bx	lr

08006ebc <pow>:
 8006ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	461d      	mov	r5, r3
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	4689      	mov	r9, r1
 8006ec8:	f000 f8f2 	bl	80070b0 <__ieee754_pow>
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	f7f9 fd98 	bl	8000a0c <__aeabi_dcmpun>
 8006edc:	bbc8      	cbnz	r0, 8006f52 <pow+0x96>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	f7f9 fd5f 	bl	80009a8 <__aeabi_dcmpeq>
 8006eea:	b1b8      	cbz	r0, 8006f1c <pow+0x60>
 8006eec:	2200      	movs	r2, #0
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7f9 fd58 	bl	80009a8 <__aeabi_dcmpeq>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d141      	bne.n	8006f80 <pow+0xc4>
 8006efc:	4620      	mov	r0, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	f000 f860 	bl	8006fc4 <finite>
 8006f04:	b328      	cbz	r0, 8006f52 <pow+0x96>
 8006f06:	2200      	movs	r2, #0
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	f7f9 fd55 	bl	80009bc <__aeabi_dcmplt>
 8006f12:	b1f0      	cbz	r0, 8006f52 <pow+0x96>
 8006f14:	f7ff fb4c 	bl	80065b0 <__errno>
 8006f18:	2322      	movs	r3, #34	@ 0x22
 8006f1a:	e019      	b.n	8006f50 <pow+0x94>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	4639      	mov	r1, r7
 8006f20:	f000 f850 	bl	8006fc4 <finite>
 8006f24:	b9c8      	cbnz	r0, 8006f5a <pow+0x9e>
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f000 f84b 	bl	8006fc4 <finite>
 8006f2e:	b1a0      	cbz	r0, 8006f5a <pow+0x9e>
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	f000 f846 	bl	8006fc4 <finite>
 8006f38:	b178      	cbz	r0, 8006f5a <pow+0x9e>
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fd63 	bl	8000a0c <__aeabi_dcmpun>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d0e4      	beq.n	8006f14 <pow+0x58>
 8006f4a:	f7ff fb31 	bl	80065b0 <__errno>
 8006f4e:	2321      	movs	r3, #33	@ 0x21
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	4630      	mov	r0, r6
 8006f54:	4639      	mov	r1, r7
 8006f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4630      	mov	r0, r6
 8006f60:	4639      	mov	r1, r7
 8006f62:	f7f9 fd21 	bl	80009a8 <__aeabi_dcmpeq>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d0f3      	beq.n	8006f52 <pow+0x96>
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f000 f829 	bl	8006fc4 <finite>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0ed      	beq.n	8006f52 <pow+0x96>
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f000 f823 	bl	8006fc4 <finite>
 8006f7e:	e7c8      	b.n	8006f12 <pow+0x56>
 8006f80:	2600      	movs	r6, #0
 8006f82:	4f01      	ldr	r7, [pc, #4]	@ (8006f88 <pow+0xcc>)
 8006f84:	e7e5      	b.n	8006f52 <pow+0x96>
 8006f86:	bf00      	nop
 8006f88:	3ff00000 	.word	0x3ff00000

08006f8c <atan2f>:
 8006f8c:	f000 bdbe 	b.w	8007b0c <__ieee754_atan2f>

08006f90 <sqrtf>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4605      	mov	r5, r0
 8006f94:	f000 f81c 	bl	8006fd0 <__ieee754_sqrtf>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f7fa f897 	bl	80010d0 <__aeabi_fcmpun>
 8006fa2:	b968      	cbnz	r0, 8006fc0 <sqrtf+0x30>
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f7fa f86a 	bl	8001080 <__aeabi_fcmplt>
 8006fac:	b140      	cbz	r0, 8006fc0 <sqrtf+0x30>
 8006fae:	f7ff faff 	bl	80065b0 <__errno>
 8006fb2:	2321      	movs	r3, #33	@ 0x21
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	6003      	str	r3, [r0, #0]
 8006fb8:	4608      	mov	r0, r1
 8006fba:	f7f9 ff77 	bl	8000eac <__aeabi_fdiv>
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}

08006fc4 <finite>:
 8006fc4:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006fc8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006fcc:	0fc0      	lsrs	r0, r0, #31
 8006fce:	4770      	bx	lr

08006fd0 <__ieee754_sqrtf>:
 8006fd0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8006fd4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	d30a      	bcc.n	8006ff8 <__ieee754_sqrtf+0x28>
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	f7f9 feae 	bl	8000d44 <__aeabi_fmul>
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4620      	mov	r0, r4
 8006fec:	f7f9 fda2 	bl	8000b34 <__addsf3>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	d0fa      	beq.n	8006ff2 <__ieee754_sqrtf+0x22>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	da06      	bge.n	800700e <__ieee754_sqrtf+0x3e>
 8007000:	4601      	mov	r1, r0
 8007002:	f7f9 fd95 	bl	8000b30 <__aeabi_fsub>
 8007006:	4601      	mov	r1, r0
 8007008:	f7f9 ff50 	bl	8000eac <__aeabi_fdiv>
 800700c:	e7f0      	b.n	8006ff0 <__ieee754_sqrtf+0x20>
 800700e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8007012:	d03c      	beq.n	800708e <__ieee754_sqrtf+0xbe>
 8007014:	15c2      	asrs	r2, r0, #23
 8007016:	2400      	movs	r4, #0
 8007018:	2019      	movs	r0, #25
 800701a:	4626      	mov	r6, r4
 800701c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8007020:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007024:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8007028:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800702c:	07d2      	lsls	r2, r2, #31
 800702e:	bf58      	it	pl
 8007030:	005b      	lslpl	r3, r3, #1
 8007032:	106d      	asrs	r5, r5, #1
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	1872      	adds	r2, r6, r1
 8007038:	429a      	cmp	r2, r3
 800703a:	bfcf      	iteee	gt
 800703c:	461a      	movgt	r2, r3
 800703e:	1856      	addle	r6, r2, r1
 8007040:	1864      	addle	r4, r4, r1
 8007042:	1a9a      	suble	r2, r3, r2
 8007044:	3801      	subs	r0, #1
 8007046:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800704a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800704e:	d1f2      	bne.n	8007036 <__ieee754_sqrtf+0x66>
 8007050:	b1ba      	cbz	r2, 8007082 <__ieee754_sqrtf+0xb2>
 8007052:	4e15      	ldr	r6, [pc, #84]	@ (80070a8 <__ieee754_sqrtf+0xd8>)
 8007054:	4f15      	ldr	r7, [pc, #84]	@ (80070ac <__ieee754_sqrtf+0xdc>)
 8007056:	6830      	ldr	r0, [r6, #0]
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	f7f9 fd69 	bl	8000b30 <__aeabi_fsub>
 800705e:	f8d6 8000 	ldr.w	r8, [r6]
 8007062:	4601      	mov	r1, r0
 8007064:	4640      	mov	r0, r8
 8007066:	f7fa f815 	bl	8001094 <__aeabi_fcmple>
 800706a:	b150      	cbz	r0, 8007082 <__ieee754_sqrtf+0xb2>
 800706c:	6830      	ldr	r0, [r6, #0]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	f7f9 fd60 	bl	8000b34 <__addsf3>
 8007074:	6836      	ldr	r6, [r6, #0]
 8007076:	4601      	mov	r1, r0
 8007078:	4630      	mov	r0, r6
 800707a:	f7fa f801 	bl	8001080 <__aeabi_fcmplt>
 800707e:	b170      	cbz	r0, 800709e <__ieee754_sqrtf+0xce>
 8007080:	3402      	adds	r4, #2
 8007082:	1064      	asrs	r4, r4, #1
 8007084:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8007088:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800708c:	e7b1      	b.n	8006ff2 <__ieee754_sqrtf+0x22>
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	0218      	lsls	r0, r3, #8
 8007092:	460a      	mov	r2, r1
 8007094:	f101 0101 	add.w	r1, r1, #1
 8007098:	d5f9      	bpl.n	800708e <__ieee754_sqrtf+0xbe>
 800709a:	4252      	negs	r2, r2
 800709c:	e7bb      	b.n	8007016 <__ieee754_sqrtf+0x46>
 800709e:	3401      	adds	r4, #1
 80070a0:	f024 0401 	bic.w	r4, r4, #1
 80070a4:	e7ed      	b.n	8007082 <__ieee754_sqrtf+0xb2>
 80070a6:	bf00      	nop
 80070a8:	080081e4 	.word	0x080081e4
 80070ac:	080081e0 	.word	0x080081e0

080070b0 <__ieee754_pow>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	b091      	sub	sp, #68	@ 0x44
 80070b6:	e9cd 2300 	strd	r2, r3, [sp]
 80070ba:	468b      	mov	fp, r1
 80070bc:	e9dd 1800 	ldrd	r1, r8, [sp]
 80070c0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80070c4:	4682      	mov	sl, r0
 80070c6:	ea57 0001 	orrs.w	r0, r7, r1
 80070ca:	d112      	bne.n	80070f2 <__ieee754_pow+0x42>
 80070cc:	4653      	mov	r3, sl
 80070ce:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80070d2:	18db      	adds	r3, r3, r3
 80070d4:	4152      	adcs	r2, r2
 80070d6:	4298      	cmp	r0, r3
 80070d8:	4b93      	ldr	r3, [pc, #588]	@ (8007328 <__ieee754_pow+0x278>)
 80070da:	4193      	sbcs	r3, r2
 80070dc:	f080 84cd 	bcs.w	8007a7a <__ieee754_pow+0x9ca>
 80070e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 f840 	bl	800016c <__adddf3>
 80070ec:	b011      	add	sp, #68	@ 0x44
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	4b8e      	ldr	r3, [pc, #568]	@ (800732c <__ieee754_pow+0x27c>)
 80070f4:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 80070f8:	429d      	cmp	r5, r3
 80070fa:	465e      	mov	r6, fp
 80070fc:	46d1      	mov	r9, sl
 80070fe:	d80b      	bhi.n	8007118 <__ieee754_pow+0x68>
 8007100:	d105      	bne.n	800710e <__ieee754_pow+0x5e>
 8007102:	f1ba 0f00 	cmp.w	sl, #0
 8007106:	d1eb      	bne.n	80070e0 <__ieee754_pow+0x30>
 8007108:	42af      	cmp	r7, r5
 800710a:	d8e9      	bhi.n	80070e0 <__ieee754_pow+0x30>
 800710c:	e001      	b.n	8007112 <__ieee754_pow+0x62>
 800710e:	429f      	cmp	r7, r3
 8007110:	d802      	bhi.n	8007118 <__ieee754_pow+0x68>
 8007112:	429f      	cmp	r7, r3
 8007114:	d10f      	bne.n	8007136 <__ieee754_pow+0x86>
 8007116:	b171      	cbz	r1, 8007136 <__ieee754_pow+0x86>
 8007118:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800711c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007120:	ea56 0609 	orrs.w	r6, r6, r9
 8007124:	d1dc      	bne.n	80070e0 <__ieee754_pow+0x30>
 8007126:	e9dd 3200 	ldrd	r3, r2, [sp]
 800712a:	18db      	adds	r3, r3, r3
 800712c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007130:	4152      	adcs	r2, r2
 8007132:	429e      	cmp	r6, r3
 8007134:	e7d0      	b.n	80070d8 <__ieee754_pow+0x28>
 8007136:	2e00      	cmp	r6, #0
 8007138:	462b      	mov	r3, r5
 800713a:	da42      	bge.n	80071c2 <__ieee754_pow+0x112>
 800713c:	4a7c      	ldr	r2, [pc, #496]	@ (8007330 <__ieee754_pow+0x280>)
 800713e:	4297      	cmp	r7, r2
 8007140:	d856      	bhi.n	80071f0 <__ieee754_pow+0x140>
 8007142:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007146:	4297      	cmp	r7, r2
 8007148:	f240 84a6 	bls.w	8007a98 <__ieee754_pow+0x9e8>
 800714c:	153a      	asrs	r2, r7, #20
 800714e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007152:	2a14      	cmp	r2, #20
 8007154:	dd18      	ble.n	8007188 <__ieee754_pow+0xd8>
 8007156:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800715a:	fa21 f402 	lsr.w	r4, r1, r2
 800715e:	fa04 f202 	lsl.w	r2, r4, r2
 8007162:	428a      	cmp	r2, r1
 8007164:	f040 8498 	bne.w	8007a98 <__ieee754_pow+0x9e8>
 8007168:	f004 0401 	and.w	r4, r4, #1
 800716c:	f1c4 0402 	rsb	r4, r4, #2
 8007170:	2900      	cmp	r1, #0
 8007172:	d159      	bne.n	8007228 <__ieee754_pow+0x178>
 8007174:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007178:	d149      	bne.n	800720e <__ieee754_pow+0x15e>
 800717a:	4652      	mov	r2, sl
 800717c:	465b      	mov	r3, fp
 800717e:	4650      	mov	r0, sl
 8007180:	4659      	mov	r1, fp
 8007182:	f7f9 f9a9 	bl	80004d8 <__aeabi_dmul>
 8007186:	e7b1      	b.n	80070ec <__ieee754_pow+0x3c>
 8007188:	2900      	cmp	r1, #0
 800718a:	d14c      	bne.n	8007226 <__ieee754_pow+0x176>
 800718c:	f1c2 0214 	rsb	r2, r2, #20
 8007190:	fa47 f402 	asr.w	r4, r7, r2
 8007194:	fa04 f202 	lsl.w	r2, r4, r2
 8007198:	42ba      	cmp	r2, r7
 800719a:	f040 847a 	bne.w	8007a92 <__ieee754_pow+0x9e2>
 800719e:	f004 0401 	and.w	r4, r4, #1
 80071a2:	f1c4 0402 	rsb	r4, r4, #2
 80071a6:	4a63      	ldr	r2, [pc, #396]	@ (8007334 <__ieee754_pow+0x284>)
 80071a8:	4297      	cmp	r7, r2
 80071aa:	d1e3      	bne.n	8007174 <__ieee754_pow+0xc4>
 80071ac:	f1b8 0f00 	cmp.w	r8, #0
 80071b0:	f280 846b 	bge.w	8007a8a <__ieee754_pow+0x9da>
 80071b4:	4652      	mov	r2, sl
 80071b6:	465b      	mov	r3, fp
 80071b8:	2000      	movs	r0, #0
 80071ba:	495e      	ldr	r1, [pc, #376]	@ (8007334 <__ieee754_pow+0x284>)
 80071bc:	f7f9 fab6 	bl	800072c <__aeabi_ddiv>
 80071c0:	e794      	b.n	80070ec <__ieee754_pow+0x3c>
 80071c2:	2400      	movs	r4, #0
 80071c4:	bb81      	cbnz	r1, 8007228 <__ieee754_pow+0x178>
 80071c6:	4a59      	ldr	r2, [pc, #356]	@ (800732c <__ieee754_pow+0x27c>)
 80071c8:	4297      	cmp	r7, r2
 80071ca:	d1ec      	bne.n	80071a6 <__ieee754_pow+0xf6>
 80071cc:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 80071d0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80071d4:	ea53 0309 	orrs.w	r3, r3, r9
 80071d8:	f000 844f 	beq.w	8007a7a <__ieee754_pow+0x9ca>
 80071dc:	4b56      	ldr	r3, [pc, #344]	@ (8007338 <__ieee754_pow+0x288>)
 80071de:	429d      	cmp	r5, r3
 80071e0:	d908      	bls.n	80071f4 <__ieee754_pow+0x144>
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	f280 844c 	bge.w	8007a82 <__ieee754_pow+0x9d2>
 80071ea:	2000      	movs	r0, #0
 80071ec:	2100      	movs	r1, #0
 80071ee:	e77d      	b.n	80070ec <__ieee754_pow+0x3c>
 80071f0:	2402      	movs	r4, #2
 80071f2:	e7e7      	b.n	80071c4 <__ieee754_pow+0x114>
 80071f4:	f1b8 0f00 	cmp.w	r8, #0
 80071f8:	f04f 0000 	mov.w	r0, #0
 80071fc:	f04f 0100 	mov.w	r1, #0
 8007200:	f6bf af74 	bge.w	80070ec <__ieee754_pow+0x3c>
 8007204:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007208:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800720c:	e76e      	b.n	80070ec <__ieee754_pow+0x3c>
 800720e:	4a4b      	ldr	r2, [pc, #300]	@ (800733c <__ieee754_pow+0x28c>)
 8007210:	4590      	cmp	r8, r2
 8007212:	d109      	bne.n	8007228 <__ieee754_pow+0x178>
 8007214:	2e00      	cmp	r6, #0
 8007216:	db07      	blt.n	8007228 <__ieee754_pow+0x178>
 8007218:	4650      	mov	r0, sl
 800721a:	4659      	mov	r1, fp
 800721c:	b011      	add	sp, #68	@ 0x44
 800721e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007222:	f000 bea7 	b.w	8007f74 <__ieee754_sqrt>
 8007226:	2400      	movs	r4, #0
 8007228:	4650      	mov	r0, sl
 800722a:	4659      	mov	r1, fp
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	f000 fc69 	bl	8007b04 <fabs>
 8007232:	9b02      	ldr	r3, [sp, #8]
 8007234:	f1b9 0f00 	cmp.w	r9, #0
 8007238:	d127      	bne.n	800728a <__ieee754_pow+0x1da>
 800723a:	4a3e      	ldr	r2, [pc, #248]	@ (8007334 <__ieee754_pow+0x284>)
 800723c:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8007240:	4594      	cmp	ip, r2
 8007242:	d000      	beq.n	8007246 <__ieee754_pow+0x196>
 8007244:	bb0d      	cbnz	r5, 800728a <__ieee754_pow+0x1da>
 8007246:	f1b8 0f00 	cmp.w	r8, #0
 800724a:	da05      	bge.n	8007258 <__ieee754_pow+0x1a8>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	2000      	movs	r0, #0
 8007252:	4938      	ldr	r1, [pc, #224]	@ (8007334 <__ieee754_pow+0x284>)
 8007254:	f7f9 fa6a 	bl	800072c <__aeabi_ddiv>
 8007258:	2e00      	cmp	r6, #0
 800725a:	f6bf af47 	bge.w	80070ec <__ieee754_pow+0x3c>
 800725e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007262:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007266:	4325      	orrs	r5, r4
 8007268:	d108      	bne.n	800727c <__ieee754_pow+0x1cc>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	f7f8 ff79 	bl	8000168 <__aeabi_dsub>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	e79f      	b.n	80071bc <__ieee754_pow+0x10c>
 800727c:	2c01      	cmp	r4, #1
 800727e:	f47f af35 	bne.w	80070ec <__ieee754_pow+0x3c>
 8007282:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007286:	4619      	mov	r1, r3
 8007288:	e730      	b.n	80070ec <__ieee754_pow+0x3c>
 800728a:	0ff2      	lsrs	r2, r6, #31
 800728c:	3a01      	subs	r2, #1
 800728e:	ea52 0c04 	orrs.w	ip, r2, r4
 8007292:	d102      	bne.n	800729a <__ieee754_pow+0x1ea>
 8007294:	4652      	mov	r2, sl
 8007296:	465b      	mov	r3, fp
 8007298:	e7e9      	b.n	800726e <__ieee754_pow+0x1be>
 800729a:	f04f 0900 	mov.w	r9, #0
 800729e:	3c01      	subs	r4, #1
 80072a0:	4314      	orrs	r4, r2
 80072a2:	bf14      	ite	ne
 80072a4:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8007334 <__ieee754_pow+0x284>
 80072a8:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8007340 <__ieee754_pow+0x290>
 80072ac:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80072b0:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80072b4:	f240 8104 	bls.w	80074c0 <__ieee754_pow+0x410>
 80072b8:	4b22      	ldr	r3, [pc, #136]	@ (8007344 <__ieee754_pow+0x294>)
 80072ba:	429f      	cmp	r7, r3
 80072bc:	4b1e      	ldr	r3, [pc, #120]	@ (8007338 <__ieee754_pow+0x288>)
 80072be:	d913      	bls.n	80072e8 <__ieee754_pow+0x238>
 80072c0:	429d      	cmp	r5, r3
 80072c2:	d808      	bhi.n	80072d6 <__ieee754_pow+0x226>
 80072c4:	f1b8 0f00 	cmp.w	r8, #0
 80072c8:	da08      	bge.n	80072dc <__ieee754_pow+0x22c>
 80072ca:	2000      	movs	r0, #0
 80072cc:	b011      	add	sp, #68	@ 0x44
 80072ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d2:	f000 be49 	b.w	8007f68 <__math_oflow>
 80072d6:	f1b8 0f00 	cmp.w	r8, #0
 80072da:	dcf6      	bgt.n	80072ca <__ieee754_pow+0x21a>
 80072dc:	2000      	movs	r0, #0
 80072de:	b011      	add	sp, #68	@ 0x44
 80072e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	f000 be3b 	b.w	8007f5e <__math_uflow>
 80072e8:	429d      	cmp	r5, r3
 80072ea:	d20c      	bcs.n	8007306 <__ieee754_pow+0x256>
 80072ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2300      	movs	r3, #0
 80072f4:	f7f9 fb62 	bl	80009bc <__aeabi_dcmplt>
 80072f8:	3800      	subs	r0, #0
 80072fa:	bf18      	it	ne
 80072fc:	2001      	movne	r0, #1
 80072fe:	f1b8 0f00 	cmp.w	r8, #0
 8007302:	daec      	bge.n	80072de <__ieee754_pow+0x22e>
 8007304:	e7e2      	b.n	80072cc <__ieee754_pow+0x21c>
 8007306:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <__ieee754_pow+0x284>)
 8007308:	2200      	movs	r2, #0
 800730a:	429d      	cmp	r5, r3
 800730c:	d91c      	bls.n	8007348 <__ieee754_pow+0x298>
 800730e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007312:	2300      	movs	r3, #0
 8007314:	f7f9 fb52 	bl	80009bc <__aeabi_dcmplt>
 8007318:	3800      	subs	r0, #0
 800731a:	bf18      	it	ne
 800731c:	2001      	movne	r0, #1
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	dcd3      	bgt.n	80072cc <__ieee754_pow+0x21c>
 8007324:	e7db      	b.n	80072de <__ieee754_pow+0x22e>
 8007326:	bf00      	nop
 8007328:	fff00000 	.word	0xfff00000
 800732c:	7ff00000 	.word	0x7ff00000
 8007330:	433fffff 	.word	0x433fffff
 8007334:	3ff00000 	.word	0x3ff00000
 8007338:	3fefffff 	.word	0x3fefffff
 800733c:	3fe00000 	.word	0x3fe00000
 8007340:	bff00000 	.word	0xbff00000
 8007344:	43f00000 	.word	0x43f00000
 8007348:	4b59      	ldr	r3, [pc, #356]	@ (80074b0 <__ieee754_pow+0x400>)
 800734a:	f7f8 ff0d 	bl	8000168 <__aeabi_dsub>
 800734e:	a350      	add	r3, pc, #320	@ (adr r3, 8007490 <__ieee754_pow+0x3e0>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	4604      	mov	r4, r0
 8007356:	460d      	mov	r5, r1
 8007358:	f7f9 f8be 	bl	80004d8 <__aeabi_dmul>
 800735c:	a34e      	add	r3, pc, #312	@ (adr r3, 8007498 <__ieee754_pow+0x3e8>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	4606      	mov	r6, r0
 8007364:	460f      	mov	r7, r1
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f9 f8b5 	bl	80004d8 <__aeabi_dmul>
 800736e:	2200      	movs	r2, #0
 8007370:	4682      	mov	sl, r0
 8007372:	468b      	mov	fp, r1
 8007374:	4620      	mov	r0, r4
 8007376:	4629      	mov	r1, r5
 8007378:	4b4e      	ldr	r3, [pc, #312]	@ (80074b4 <__ieee754_pow+0x404>)
 800737a:	f7f9 f8ad 	bl	80004d8 <__aeabi_dmul>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	a147      	add	r1, pc, #284	@ (adr r1, 80074a0 <__ieee754_pow+0x3f0>)
 8007384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007388:	f7f8 feee 	bl	8000168 <__aeabi_dsub>
 800738c:	4622      	mov	r2, r4
 800738e:	462b      	mov	r3, r5
 8007390:	f7f9 f8a2 	bl	80004d8 <__aeabi_dmul>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	2000      	movs	r0, #0
 800739a:	4947      	ldr	r1, [pc, #284]	@ (80074b8 <__ieee754_pow+0x408>)
 800739c:	f7f8 fee4 	bl	8000168 <__aeabi_dsub>
 80073a0:	4622      	mov	r2, r4
 80073a2:	4680      	mov	r8, r0
 80073a4:	4689      	mov	r9, r1
 80073a6:	462b      	mov	r3, r5
 80073a8:	4620      	mov	r0, r4
 80073aa:	4629      	mov	r1, r5
 80073ac:	f7f9 f894 	bl	80004d8 <__aeabi_dmul>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4640      	mov	r0, r8
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f9 f88e 	bl	80004d8 <__aeabi_dmul>
 80073bc:	a33a      	add	r3, pc, #232	@ (adr r3, 80074a8 <__ieee754_pow+0x3f8>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f9 f889 	bl	80004d8 <__aeabi_dmul>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4650      	mov	r0, sl
 80073cc:	4659      	mov	r1, fp
 80073ce:	f7f8 fecb 	bl	8000168 <__aeabi_dsub>
 80073d2:	2400      	movs	r4, #0
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4680      	mov	r8, r0
 80073da:	4689      	mov	r9, r1
 80073dc:	4630      	mov	r0, r6
 80073de:	4639      	mov	r1, r7
 80073e0:	f7f8 fec4 	bl	800016c <__adddf3>
 80073e4:	4632      	mov	r2, r6
 80073e6:	463b      	mov	r3, r7
 80073e8:	4620      	mov	r0, r4
 80073ea:	460d      	mov	r5, r1
 80073ec:	f7f8 febc 	bl	8000168 <__aeabi_dsub>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4640      	mov	r0, r8
 80073f6:	4649      	mov	r1, r9
 80073f8:	f7f8 feb6 	bl	8000168 <__aeabi_dsub>
 80073fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007400:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007404:	2300      	movs	r3, #0
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007414:	465b      	mov	r3, fp
 8007416:	4652      	mov	r2, sl
 8007418:	f7f8 fea6 	bl	8000168 <__aeabi_dsub>
 800741c:	4622      	mov	r2, r4
 800741e:	462b      	mov	r3, r5
 8007420:	f7f9 f85a 	bl	80004d8 <__aeabi_dmul>
 8007424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007428:	4680      	mov	r8, r0
 800742a:	4689      	mov	r9, r1
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f9 f852 	bl	80004d8 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4640      	mov	r0, r8
 800743a:	4649      	mov	r1, r9
 800743c:	f7f8 fe96 	bl	800016c <__adddf3>
 8007440:	465b      	mov	r3, fp
 8007442:	4606      	mov	r6, r0
 8007444:	460f      	mov	r7, r1
 8007446:	4652      	mov	r2, sl
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f9 f844 	bl	80004d8 <__aeabi_dmul>
 8007450:	460b      	mov	r3, r1
 8007452:	4602      	mov	r2, r0
 8007454:	4680      	mov	r8, r0
 8007456:	4689      	mov	r9, r1
 8007458:	4630      	mov	r0, r6
 800745a:	4639      	mov	r1, r7
 800745c:	f7f8 fe86 	bl	800016c <__adddf3>
 8007460:	4b16      	ldr	r3, [pc, #88]	@ (80074bc <__ieee754_pow+0x40c>)
 8007462:	4604      	mov	r4, r0
 8007464:	4299      	cmp	r1, r3
 8007466:	460d      	mov	r5, r1
 8007468:	468b      	mov	fp, r1
 800746a:	f340 81fd 	ble.w	8007868 <__ieee754_pow+0x7b8>
 800746e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007472:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007476:	4303      	orrs	r3, r0
 8007478:	f000 81dc 	beq.w	8007834 <__ieee754_pow+0x784>
 800747c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	2300      	movs	r3, #0
 8007484:	f7f9 fa9a 	bl	80009bc <__aeabi_dcmplt>
 8007488:	3800      	subs	r0, #0
 800748a:	bf18      	it	ne
 800748c:	2001      	movne	r0, #1
 800748e:	e71d      	b.n	80072cc <__ieee754_pow+0x21c>
 8007490:	60000000 	.word	0x60000000
 8007494:	3ff71547 	.word	0x3ff71547
 8007498:	f85ddf44 	.word	0xf85ddf44
 800749c:	3e54ae0b 	.word	0x3e54ae0b
 80074a0:	55555555 	.word	0x55555555
 80074a4:	3fd55555 	.word	0x3fd55555
 80074a8:	652b82fe 	.word	0x652b82fe
 80074ac:	3ff71547 	.word	0x3ff71547
 80074b0:	3ff00000 	.word	0x3ff00000
 80074b4:	3fd00000 	.word	0x3fd00000
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	408fffff 	.word	0x408fffff
 80074c0:	4ad3      	ldr	r2, [pc, #844]	@ (8007810 <__ieee754_pow+0x760>)
 80074c2:	4032      	ands	r2, r6
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	f040 817a 	bne.w	80077be <__ieee754_pow+0x70e>
 80074ca:	4bd2      	ldr	r3, [pc, #840]	@ (8007814 <__ieee754_pow+0x764>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	f7f9 f803 	bl	80004d8 <__aeabi_dmul>
 80074d2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80074d6:	460b      	mov	r3, r1
 80074d8:	151a      	asrs	r2, r3, #20
 80074da:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80074de:	4422      	add	r2, r4
 80074e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80074e2:	4acd      	ldr	r2, [pc, #820]	@ (8007818 <__ieee754_pow+0x768>)
 80074e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80074ec:	4293      	cmp	r3, r2
 80074ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80074f2:	dd08      	ble.n	8007506 <__ieee754_pow+0x456>
 80074f4:	4ac9      	ldr	r2, [pc, #804]	@ (800781c <__ieee754_pow+0x76c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	f340 8163 	ble.w	80077c2 <__ieee754_pow+0x712>
 80074fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074fe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007502:	3301      	adds	r3, #1
 8007504:	930a      	str	r3, [sp, #40]	@ 0x28
 8007506:	2600      	movs	r6, #0
 8007508:	00f3      	lsls	r3, r6, #3
 800750a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800750c:	4bc4      	ldr	r3, [pc, #784]	@ (8007820 <__ieee754_pow+0x770>)
 800750e:	4629      	mov	r1, r5
 8007510:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007514:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007518:	461a      	mov	r2, r3
 800751a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800751e:	4623      	mov	r3, r4
 8007520:	4682      	mov	sl, r0
 8007522:	f7f8 fe21 	bl	8000168 <__aeabi_dsub>
 8007526:	4652      	mov	r2, sl
 8007528:	462b      	mov	r3, r5
 800752a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800752e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007532:	f7f8 fe1b 	bl	800016c <__adddf3>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	2000      	movs	r0, #0
 800753c:	49b9      	ldr	r1, [pc, #740]	@ (8007824 <__ieee754_pow+0x774>)
 800753e:	f7f9 f8f5 	bl	800072c <__aeabi_ddiv>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800754a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800754e:	f7f8 ffc3 	bl	80004d8 <__aeabi_dmul>
 8007552:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007556:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800755a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	46ab      	mov	fp, r5
 8007564:	106d      	asrs	r5, r5, #1
 8007566:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007570:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007574:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007578:	4640      	mov	r0, r8
 800757a:	4649      	mov	r1, r9
 800757c:	4614      	mov	r4, r2
 800757e:	461d      	mov	r5, r3
 8007580:	f7f8 ffaa 	bl	80004d8 <__aeabi_dmul>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800758c:	f7f8 fdec 	bl	8000168 <__aeabi_dsub>
 8007590:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007594:	4606      	mov	r6, r0
 8007596:	460f      	mov	r7, r1
 8007598:	4620      	mov	r0, r4
 800759a:	4629      	mov	r1, r5
 800759c:	f7f8 fde4 	bl	8000168 <__aeabi_dsub>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4650      	mov	r0, sl
 80075a6:	4659      	mov	r1, fp
 80075a8:	f7f8 fdde 	bl	8000168 <__aeabi_dsub>
 80075ac:	4642      	mov	r2, r8
 80075ae:	464b      	mov	r3, r9
 80075b0:	f7f8 ff92 	bl	80004d8 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f8 fdd4 	bl	8000168 <__aeabi_dsub>
 80075c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075c4:	f7f8 ff88 	bl	80004d8 <__aeabi_dmul>
 80075c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075d0:	4610      	mov	r0, r2
 80075d2:	4619      	mov	r1, r3
 80075d4:	f7f8 ff80 	bl	80004d8 <__aeabi_dmul>
 80075d8:	a37b      	add	r3, pc, #492	@ (adr r3, 80077c8 <__ieee754_pow+0x718>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	4604      	mov	r4, r0
 80075e0:	460d      	mov	r5, r1
 80075e2:	f7f8 ff79 	bl	80004d8 <__aeabi_dmul>
 80075e6:	a37a      	add	r3, pc, #488	@ (adr r3, 80077d0 <__ieee754_pow+0x720>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f8 fdbe 	bl	800016c <__adddf3>
 80075f0:	4622      	mov	r2, r4
 80075f2:	462b      	mov	r3, r5
 80075f4:	f7f8 ff70 	bl	80004d8 <__aeabi_dmul>
 80075f8:	a377      	add	r3, pc, #476	@ (adr r3, 80077d8 <__ieee754_pow+0x728>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f8 fdb5 	bl	800016c <__adddf3>
 8007602:	4622      	mov	r2, r4
 8007604:	462b      	mov	r3, r5
 8007606:	f7f8 ff67 	bl	80004d8 <__aeabi_dmul>
 800760a:	a375      	add	r3, pc, #468	@ (adr r3, 80077e0 <__ieee754_pow+0x730>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fdac 	bl	800016c <__adddf3>
 8007614:	4622      	mov	r2, r4
 8007616:	462b      	mov	r3, r5
 8007618:	f7f8 ff5e 	bl	80004d8 <__aeabi_dmul>
 800761c:	a372      	add	r3, pc, #456	@ (adr r3, 80077e8 <__ieee754_pow+0x738>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f8 fda3 	bl	800016c <__adddf3>
 8007626:	4622      	mov	r2, r4
 8007628:	462b      	mov	r3, r5
 800762a:	f7f8 ff55 	bl	80004d8 <__aeabi_dmul>
 800762e:	a370      	add	r3, pc, #448	@ (adr r3, 80077f0 <__ieee754_pow+0x740>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f7f8 fd9a 	bl	800016c <__adddf3>
 8007638:	4622      	mov	r2, r4
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	462b      	mov	r3, r5
 8007640:	4620      	mov	r0, r4
 8007642:	4629      	mov	r1, r5
 8007644:	f7f8 ff48 	bl	80004d8 <__aeabi_dmul>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f7f8 ff42 	bl	80004d8 <__aeabi_dmul>
 8007654:	4604      	mov	r4, r0
 8007656:	460d      	mov	r5, r1
 8007658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765c:	4642      	mov	r2, r8
 800765e:	464b      	mov	r3, r9
 8007660:	f7f8 fd84 	bl	800016c <__adddf3>
 8007664:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007668:	f7f8 ff36 	bl	80004d8 <__aeabi_dmul>
 800766c:	4622      	mov	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	f7f8 fd7c 	bl	800016c <__adddf3>
 8007674:	4642      	mov	r2, r8
 8007676:	4682      	mov	sl, r0
 8007678:	468b      	mov	fp, r1
 800767a:	464b      	mov	r3, r9
 800767c:	4640      	mov	r0, r8
 800767e:	4649      	mov	r1, r9
 8007680:	f7f8 ff2a 	bl	80004d8 <__aeabi_dmul>
 8007684:	2200      	movs	r2, #0
 8007686:	4b68      	ldr	r3, [pc, #416]	@ (8007828 <__ieee754_pow+0x778>)
 8007688:	4606      	mov	r6, r0
 800768a:	460f      	mov	r7, r1
 800768c:	f7f8 fd6e 	bl	800016c <__adddf3>
 8007690:	4652      	mov	r2, sl
 8007692:	465b      	mov	r3, fp
 8007694:	f7f8 fd6a 	bl	800016c <__adddf3>
 8007698:	2400      	movs	r4, #0
 800769a:	460d      	mov	r5, r1
 800769c:	4622      	mov	r2, r4
 800769e:	460b      	mov	r3, r1
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	f7f8 ff18 	bl	80004d8 <__aeabi_dmul>
 80076a8:	2200      	movs	r2, #0
 80076aa:	4680      	mov	r8, r0
 80076ac:	4689      	mov	r9, r1
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007828 <__ieee754_pow+0x778>)
 80076b4:	f7f8 fd58 	bl	8000168 <__aeabi_dsub>
 80076b8:	4632      	mov	r2, r6
 80076ba:	463b      	mov	r3, r7
 80076bc:	f7f8 fd54 	bl	8000168 <__aeabi_dsub>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4650      	mov	r0, sl
 80076c6:	4659      	mov	r1, fp
 80076c8:	f7f8 fd4e 	bl	8000168 <__aeabi_dsub>
 80076cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076d0:	f7f8 ff02 	bl	80004d8 <__aeabi_dmul>
 80076d4:	4622      	mov	r2, r4
 80076d6:	4606      	mov	r6, r0
 80076d8:	460f      	mov	r7, r1
 80076da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076de:	462b      	mov	r3, r5
 80076e0:	f7f8 fefa 	bl	80004d8 <__aeabi_dmul>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f8 fd3e 	bl	800016c <__adddf3>
 80076f0:	2400      	movs	r4, #0
 80076f2:	4606      	mov	r6, r0
 80076f4:	460f      	mov	r7, r1
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f8 fd35 	bl	800016c <__adddf3>
 8007702:	a33d      	add	r3, pc, #244	@ (adr r3, 80077f8 <__ieee754_pow+0x748>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	4620      	mov	r0, r4
 800770a:	460d      	mov	r5, r1
 800770c:	f7f8 fee4 	bl	80004d8 <__aeabi_dmul>
 8007710:	4642      	mov	r2, r8
 8007712:	464b      	mov	r3, r9
 8007714:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	f7f8 fd24 	bl	8000168 <__aeabi_dsub>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4630      	mov	r0, r6
 8007726:	4639      	mov	r1, r7
 8007728:	f7f8 fd1e 	bl	8000168 <__aeabi_dsub>
 800772c:	a334      	add	r3, pc, #208	@ (adr r3, 8007800 <__ieee754_pow+0x750>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fed1 	bl	80004d8 <__aeabi_dmul>
 8007736:	a334      	add	r3, pc, #208	@ (adr r3, 8007808 <__ieee754_pow+0x758>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 fec8 	bl	80004d8 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f7f8 fd0c 	bl	800016c <__adddf3>
 8007754:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007756:	4b35      	ldr	r3, [pc, #212]	@ (800782c <__ieee754_pow+0x77c>)
 8007758:	2400      	movs	r4, #0
 800775a:	4413      	add	r3, r2
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f7f8 fd04 	bl	800016c <__adddf3>
 8007764:	4682      	mov	sl, r0
 8007766:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007768:	468b      	mov	fp, r1
 800776a:	f7f8 fe4b 	bl	8000404 <__aeabi_i2d>
 800776e:	4606      	mov	r6, r0
 8007770:	460f      	mov	r7, r1
 8007772:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007774:	4b2e      	ldr	r3, [pc, #184]	@ (8007830 <__ieee754_pow+0x780>)
 8007776:	4413      	add	r3, r2
 8007778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800777c:	4652      	mov	r2, sl
 800777e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007782:	465b      	mov	r3, fp
 8007784:	f7f8 fcf2 	bl	800016c <__adddf3>
 8007788:	4642      	mov	r2, r8
 800778a:	464b      	mov	r3, r9
 800778c:	f7f8 fcee 	bl	800016c <__adddf3>
 8007790:	4632      	mov	r2, r6
 8007792:	463b      	mov	r3, r7
 8007794:	f7f8 fcea 	bl	800016c <__adddf3>
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	4620      	mov	r0, r4
 800779e:	460d      	mov	r5, r1
 80077a0:	f7f8 fce2 	bl	8000168 <__aeabi_dsub>
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	f7f8 fcde 	bl	8000168 <__aeabi_dsub>
 80077ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077b0:	f7f8 fcda 	bl	8000168 <__aeabi_dsub>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	e61c      	b.n	80073f8 <__ieee754_pow+0x348>
 80077be:	2400      	movs	r4, #0
 80077c0:	e68a      	b.n	80074d8 <__ieee754_pow+0x428>
 80077c2:	2601      	movs	r6, #1
 80077c4:	e6a0      	b.n	8007508 <__ieee754_pow+0x458>
 80077c6:	bf00      	nop
 80077c8:	4a454eef 	.word	0x4a454eef
 80077cc:	3fca7e28 	.word	0x3fca7e28
 80077d0:	93c9db65 	.word	0x93c9db65
 80077d4:	3fcd864a 	.word	0x3fcd864a
 80077d8:	a91d4101 	.word	0xa91d4101
 80077dc:	3fd17460 	.word	0x3fd17460
 80077e0:	518f264d 	.word	0x518f264d
 80077e4:	3fd55555 	.word	0x3fd55555
 80077e8:	db6fabff 	.word	0xdb6fabff
 80077ec:	3fdb6db6 	.word	0x3fdb6db6
 80077f0:	33333303 	.word	0x33333303
 80077f4:	3fe33333 	.word	0x3fe33333
 80077f8:	e0000000 	.word	0xe0000000
 80077fc:	3feec709 	.word	0x3feec709
 8007800:	dc3a03fd 	.word	0xdc3a03fd
 8007804:	3feec709 	.word	0x3feec709
 8007808:	145b01f5 	.word	0x145b01f5
 800780c:	be3e2fe0 	.word	0xbe3e2fe0
 8007810:	7ff00000 	.word	0x7ff00000
 8007814:	43400000 	.word	0x43400000
 8007818:	0003988e 	.word	0x0003988e
 800781c:	000bb679 	.word	0x000bb679
 8007820:	08008208 	.word	0x08008208
 8007824:	3ff00000 	.word	0x3ff00000
 8007828:	40080000 	.word	0x40080000
 800782c:	080081e8 	.word	0x080081e8
 8007830:	080081f8 	.word	0x080081f8
 8007834:	a39a      	add	r3, pc, #616	@ (adr r3, 8007aa0 <__ieee754_pow+0x9f0>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	f7f8 fc95 	bl	800016c <__adddf3>
 8007842:	4642      	mov	r2, r8
 8007844:	e9cd 0100 	strd	r0, r1, [sp]
 8007848:	464b      	mov	r3, r9
 800784a:	4620      	mov	r0, r4
 800784c:	4629      	mov	r1, r5
 800784e:	f7f8 fc8b 	bl	8000168 <__aeabi_dsub>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800785a:	f7f9 f8cd 	bl	80009f8 <__aeabi_dcmpgt>
 800785e:	2800      	cmp	r0, #0
 8007860:	f47f ae0c 	bne.w	800747c <__ieee754_pow+0x3cc>
 8007864:	4ba0      	ldr	r3, [pc, #640]	@ (8007ae8 <__ieee754_pow+0xa38>)
 8007866:	e022      	b.n	80078ae <__ieee754_pow+0x7fe>
 8007868:	4ca0      	ldr	r4, [pc, #640]	@ (8007aec <__ieee754_pow+0xa3c>)
 800786a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800786e:	42a3      	cmp	r3, r4
 8007870:	d919      	bls.n	80078a6 <__ieee754_pow+0x7f6>
 8007872:	4b9f      	ldr	r3, [pc, #636]	@ (8007af0 <__ieee754_pow+0xa40>)
 8007874:	440b      	add	r3, r1
 8007876:	4303      	orrs	r3, r0
 8007878:	d009      	beq.n	800788e <__ieee754_pow+0x7de>
 800787a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	2300      	movs	r3, #0
 8007882:	f7f9 f89b 	bl	80009bc <__aeabi_dcmplt>
 8007886:	3800      	subs	r0, #0
 8007888:	bf18      	it	ne
 800788a:	2001      	movne	r0, #1
 800788c:	e527      	b.n	80072de <__ieee754_pow+0x22e>
 800788e:	4642      	mov	r2, r8
 8007890:	464b      	mov	r3, r9
 8007892:	f7f8 fc69 	bl	8000168 <__aeabi_dsub>
 8007896:	4632      	mov	r2, r6
 8007898:	463b      	mov	r3, r7
 800789a:	f7f9 f8a3 	bl	80009e4 <__aeabi_dcmpge>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d1eb      	bne.n	800787a <__ieee754_pow+0x7ca>
 80078a2:	4b94      	ldr	r3, [pc, #592]	@ (8007af4 <__ieee754_pow+0xa44>)
 80078a4:	e003      	b.n	80078ae <__ieee754_pow+0x7fe>
 80078a6:	4a94      	ldr	r2, [pc, #592]	@ (8007af8 <__ieee754_pow+0xa48>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	f240 80e1 	bls.w	8007a70 <__ieee754_pow+0x9c0>
 80078ae:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80078b2:	151b      	asrs	r3, r3, #20
 80078b4:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80078b8:	fa4a fa03 	asr.w	sl, sl, r3
 80078bc:	44da      	add	sl, fp
 80078be:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80078c2:	488e      	ldr	r0, [pc, #568]	@ (8007afc <__ieee754_pow+0xa4c>)
 80078c4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80078c8:	4108      	asrs	r0, r1
 80078ca:	ea00 030a 	and.w	r3, r0, sl
 80078ce:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80078d2:	f1c1 0114 	rsb	r1, r1, #20
 80078d6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80078da:	4640      	mov	r0, r8
 80078dc:	fa4a fa01 	asr.w	sl, sl, r1
 80078e0:	f1bb 0f00 	cmp.w	fp, #0
 80078e4:	4649      	mov	r1, r9
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	bfb8      	it	lt
 80078ec:	f1ca 0a00 	rsblt	sl, sl, #0
 80078f0:	f7f8 fc3a 	bl	8000168 <__aeabi_dsub>
 80078f4:	4680      	mov	r8, r0
 80078f6:	4689      	mov	r9, r1
 80078f8:	2400      	movs	r4, #0
 80078fa:	4632      	mov	r2, r6
 80078fc:	463b      	mov	r3, r7
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f8 fc33 	bl	800016c <__adddf3>
 8007906:	a368      	add	r3, pc, #416	@ (adr r3, 8007aa8 <__ieee754_pow+0x9f8>)
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	4620      	mov	r0, r4
 800790e:	460d      	mov	r5, r1
 8007910:	f7f8 fde2 	bl	80004d8 <__aeabi_dmul>
 8007914:	4642      	mov	r2, r8
 8007916:	464b      	mov	r3, r9
 8007918:	e9cd 0100 	strd	r0, r1, [sp]
 800791c:	4620      	mov	r0, r4
 800791e:	4629      	mov	r1, r5
 8007920:	f7f8 fc22 	bl	8000168 <__aeabi_dsub>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4630      	mov	r0, r6
 800792a:	4639      	mov	r1, r7
 800792c:	f7f8 fc1c 	bl	8000168 <__aeabi_dsub>
 8007930:	a35f      	add	r3, pc, #380	@ (adr r3, 8007ab0 <__ieee754_pow+0xa00>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fdcf 	bl	80004d8 <__aeabi_dmul>
 800793a:	a35f      	add	r3, pc, #380	@ (adr r3, 8007ab8 <__ieee754_pow+0xa08>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	4680      	mov	r8, r0
 8007942:	4689      	mov	r9, r1
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f8 fdc6 	bl	80004d8 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	f7f8 fc0a 	bl	800016c <__adddf3>
 8007958:	4604      	mov	r4, r0
 800795a:	460d      	mov	r5, r1
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007964:	f7f8 fc02 	bl	800016c <__adddf3>
 8007968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800796c:	4680      	mov	r8, r0
 800796e:	4689      	mov	r9, r1
 8007970:	f7f8 fbfa 	bl	8000168 <__aeabi_dsub>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4620      	mov	r0, r4
 800797a:	4629      	mov	r1, r5
 800797c:	f7f8 fbf4 	bl	8000168 <__aeabi_dsub>
 8007980:	4642      	mov	r2, r8
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	464b      	mov	r3, r9
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	f7f8 fda4 	bl	80004d8 <__aeabi_dmul>
 8007990:	a34b      	add	r3, pc, #300	@ (adr r3, 8007ac0 <__ieee754_pow+0xa10>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	4604      	mov	r4, r0
 8007998:	460d      	mov	r5, r1
 800799a:	f7f8 fd9d 	bl	80004d8 <__aeabi_dmul>
 800799e:	a34a      	add	r3, pc, #296	@ (adr r3, 8007ac8 <__ieee754_pow+0xa18>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f7f8 fbe0 	bl	8000168 <__aeabi_dsub>
 80079a8:	4622      	mov	r2, r4
 80079aa:	462b      	mov	r3, r5
 80079ac:	f7f8 fd94 	bl	80004d8 <__aeabi_dmul>
 80079b0:	a347      	add	r3, pc, #284	@ (adr r3, 8007ad0 <__ieee754_pow+0xa20>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f7f8 fbd9 	bl	800016c <__adddf3>
 80079ba:	4622      	mov	r2, r4
 80079bc:	462b      	mov	r3, r5
 80079be:	f7f8 fd8b 	bl	80004d8 <__aeabi_dmul>
 80079c2:	a345      	add	r3, pc, #276	@ (adr r3, 8007ad8 <__ieee754_pow+0xa28>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 fbce 	bl	8000168 <__aeabi_dsub>
 80079cc:	4622      	mov	r2, r4
 80079ce:	462b      	mov	r3, r5
 80079d0:	f7f8 fd82 	bl	80004d8 <__aeabi_dmul>
 80079d4:	a342      	add	r3, pc, #264	@ (adr r3, 8007ae0 <__ieee754_pow+0xa30>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f7f8 fbc7 	bl	800016c <__adddf3>
 80079de:	4622      	mov	r2, r4
 80079e0:	462b      	mov	r3, r5
 80079e2:	f7f8 fd79 	bl	80004d8 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4640      	mov	r0, r8
 80079ec:	4649      	mov	r1, r9
 80079ee:	f7f8 fbbb 	bl	8000168 <__aeabi_dsub>
 80079f2:	4604      	mov	r4, r0
 80079f4:	460d      	mov	r5, r1
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	f7f8 fd6b 	bl	80004d8 <__aeabi_dmul>
 8007a02:	2200      	movs	r2, #0
 8007a04:	e9cd 0100 	strd	r0, r1, [sp]
 8007a08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fbaa 	bl	8000168 <__aeabi_dsub>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a1c:	f7f8 fe86 	bl	800072c <__aeabi_ddiv>
 8007a20:	4632      	mov	r2, r6
 8007a22:	4604      	mov	r4, r0
 8007a24:	460d      	mov	r5, r1
 8007a26:	463b      	mov	r3, r7
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f8 fd54 	bl	80004d8 <__aeabi_dmul>
 8007a30:	4632      	mov	r2, r6
 8007a32:	463b      	mov	r3, r7
 8007a34:	f7f8 fb9a 	bl	800016c <__adddf3>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f7f8 fb92 	bl	8000168 <__aeabi_dsub>
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	f7f8 fb8e 	bl	8000168 <__aeabi_dsub>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	2000      	movs	r0, #0
 8007a52:	492b      	ldr	r1, [pc, #172]	@ (8007b00 <__ieee754_pow+0xa50>)
 8007a54:	f7f8 fb88 	bl	8000168 <__aeabi_dsub>
 8007a58:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007a5c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007a60:	da09      	bge.n	8007a76 <__ieee754_pow+0x9c6>
 8007a62:	4652      	mov	r2, sl
 8007a64:	f000 f9ec 	bl	8007e40 <scalbn>
 8007a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a6c:	f7ff bb89 	b.w	8007182 <__ieee754_pow+0xd2>
 8007a70:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007a74:	e740      	b.n	80078f8 <__ieee754_pow+0x848>
 8007a76:	4621      	mov	r1, r4
 8007a78:	e7f6      	b.n	8007a68 <__ieee754_pow+0x9b8>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	4920      	ldr	r1, [pc, #128]	@ (8007b00 <__ieee754_pow+0xa50>)
 8007a7e:	f7ff bb35 	b.w	80070ec <__ieee754_pow+0x3c>
 8007a82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a86:	f7ff bb31 	b.w	80070ec <__ieee754_pow+0x3c>
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	f7ff bb2d 	b.w	80070ec <__ieee754_pow+0x3c>
 8007a92:	460c      	mov	r4, r1
 8007a94:	f7ff bb87 	b.w	80071a6 <__ieee754_pow+0xf6>
 8007a98:	2400      	movs	r4, #0
 8007a9a:	f7ff bb69 	b.w	8007170 <__ieee754_pow+0xc0>
 8007a9e:	bf00      	nop
 8007aa0:	652b82fe 	.word	0x652b82fe
 8007aa4:	3c971547 	.word	0x3c971547
 8007aa8:	00000000 	.word	0x00000000
 8007aac:	3fe62e43 	.word	0x3fe62e43
 8007ab0:	fefa39ef 	.word	0xfefa39ef
 8007ab4:	3fe62e42 	.word	0x3fe62e42
 8007ab8:	0ca86c39 	.word	0x0ca86c39
 8007abc:	be205c61 	.word	0xbe205c61
 8007ac0:	72bea4d0 	.word	0x72bea4d0
 8007ac4:	3e663769 	.word	0x3e663769
 8007ac8:	c5d26bf1 	.word	0xc5d26bf1
 8007acc:	3ebbbd41 	.word	0x3ebbbd41
 8007ad0:	af25de2c 	.word	0xaf25de2c
 8007ad4:	3f11566a 	.word	0x3f11566a
 8007ad8:	16bebd93 	.word	0x16bebd93
 8007adc:	3f66c16c 	.word	0x3f66c16c
 8007ae0:	5555553e 	.word	0x5555553e
 8007ae4:	3fc55555 	.word	0x3fc55555
 8007ae8:	40900000 	.word	0x40900000
 8007aec:	4090cbff 	.word	0x4090cbff
 8007af0:	3f6f3400 	.word	0x3f6f3400
 8007af4:	4090cc00 	.word	0x4090cc00
 8007af8:	3fe00000 	.word	0x3fe00000
 8007afc:	fff00000 	.word	0xfff00000
 8007b00:	3ff00000 	.word	0x3ff00000

08007b04 <fabs>:
 8007b04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4770      	bx	lr

08007b0c <__ieee754_atan2f>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8007b12:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8007b16:	4603      	mov	r3, r0
 8007b18:	d805      	bhi.n	8007b26 <__ieee754_atan2f+0x1a>
 8007b1a:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007b1e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007b22:	4607      	mov	r7, r0
 8007b24:	d904      	bls.n	8007b30 <__ieee754_atan2f+0x24>
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7f9 f804 	bl	8000b34 <__addsf3>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	e010      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007b30:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8007b34:	d103      	bne.n	8007b3e <__ieee754_atan2f+0x32>
 8007b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b3a:	f000 b86f 	b.w	8007c1c <atanf>
 8007b3e:	178c      	asrs	r4, r1, #30
 8007b40:	f004 0402 	and.w	r4, r4, #2
 8007b44:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007b48:	b92a      	cbnz	r2, 8007b56 <__ieee754_atan2f+0x4a>
 8007b4a:	2c02      	cmp	r4, #2
 8007b4c:	d04b      	beq.n	8007be6 <__ieee754_atan2f+0xda>
 8007b4e:	2c03      	cmp	r4, #3
 8007b50:	d04b      	beq.n	8007bea <__ieee754_atan2f+0xde>
 8007b52:	4618      	mov	r0, r3
 8007b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b56:	b91e      	cbnz	r6, 8007b60 <__ieee754_atan2f+0x54>
 8007b58:	2f00      	cmp	r7, #0
 8007b5a:	db4c      	blt.n	8007bf6 <__ieee754_atan2f+0xea>
 8007b5c:	4b27      	ldr	r3, [pc, #156]	@ (8007bfc <__ieee754_atan2f+0xf0>)
 8007b5e:	e7f8      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007b60:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8007b64:	d10e      	bne.n	8007b84 <__ieee754_atan2f+0x78>
 8007b66:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007b6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b6e:	d105      	bne.n	8007b7c <__ieee754_atan2f+0x70>
 8007b70:	2c02      	cmp	r4, #2
 8007b72:	d83c      	bhi.n	8007bee <__ieee754_atan2f+0xe2>
 8007b74:	4b22      	ldr	r3, [pc, #136]	@ (8007c00 <__ieee754_atan2f+0xf4>)
 8007b76:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007b7a:	e7ea      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007b7c:	2c02      	cmp	r4, #2
 8007b7e:	d838      	bhi.n	8007bf2 <__ieee754_atan2f+0xe6>
 8007b80:	4b20      	ldr	r3, [pc, #128]	@ (8007c04 <__ieee754_atan2f+0xf8>)
 8007b82:	e7f8      	b.n	8007b76 <__ieee754_atan2f+0x6a>
 8007b84:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007b88:	d0e6      	beq.n	8007b58 <__ieee754_atan2f+0x4c>
 8007b8a:	1b92      	subs	r2, r2, r6
 8007b8c:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8007b90:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8007b94:	da17      	bge.n	8007bc6 <__ieee754_atan2f+0xba>
 8007b96:	2900      	cmp	r1, #0
 8007b98:	da01      	bge.n	8007b9e <__ieee754_atan2f+0x92>
 8007b9a:	303c      	adds	r0, #60	@ 0x3c
 8007b9c:	db15      	blt.n	8007bca <__ieee754_atan2f+0xbe>
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7f9 f984 	bl	8000eac <__aeabi_fdiv>
 8007ba4:	f000 f946 	bl	8007e34 <fabsf>
 8007ba8:	f000 f838 	bl	8007c1c <atanf>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2c01      	cmp	r4, #1
 8007bb0:	d00d      	beq.n	8007bce <__ieee754_atan2f+0xc2>
 8007bb2:	2c02      	cmp	r4, #2
 8007bb4:	d00e      	beq.n	8007bd4 <__ieee754_atan2f+0xc8>
 8007bb6:	2c00      	cmp	r4, #0
 8007bb8:	d0cb      	beq.n	8007b52 <__ieee754_atan2f+0x46>
 8007bba:	4913      	ldr	r1, [pc, #76]	@ (8007c08 <__ieee754_atan2f+0xfc>)
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7f8 ffb9 	bl	8000b34 <__addsf3>
 8007bc2:	4912      	ldr	r1, [pc, #72]	@ (8007c0c <__ieee754_atan2f+0x100>)
 8007bc4:	e00c      	b.n	8007be0 <__ieee754_atan2f+0xd4>
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bfc <__ieee754_atan2f+0xf0>)
 8007bc8:	e7f1      	b.n	8007bae <__ieee754_atan2f+0xa2>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e7ef      	b.n	8007bae <__ieee754_atan2f+0xa2>
 8007bce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007bd2:	e7be      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007bd4:	490c      	ldr	r1, [pc, #48]	@ (8007c08 <__ieee754_atan2f+0xfc>)
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7f8 ffac 	bl	8000b34 <__addsf3>
 8007bdc:	4601      	mov	r1, r0
 8007bde:	480b      	ldr	r0, [pc, #44]	@ (8007c0c <__ieee754_atan2f+0x100>)
 8007be0:	f7f8 ffa6 	bl	8000b30 <__aeabi_fsub>
 8007be4:	e7a2      	b.n	8007b2c <__ieee754_atan2f+0x20>
 8007be6:	4b09      	ldr	r3, [pc, #36]	@ (8007c0c <__ieee754_atan2f+0x100>)
 8007be8:	e7b3      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007bea:	4b09      	ldr	r3, [pc, #36]	@ (8007c10 <__ieee754_atan2f+0x104>)
 8007bec:	e7b1      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007bee:	4b09      	ldr	r3, [pc, #36]	@ (8007c14 <__ieee754_atan2f+0x108>)
 8007bf0:	e7af      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e7ad      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007bf6:	4b08      	ldr	r3, [pc, #32]	@ (8007c18 <__ieee754_atan2f+0x10c>)
 8007bf8:	e7ab      	b.n	8007b52 <__ieee754_atan2f+0x46>
 8007bfa:	bf00      	nop
 8007bfc:	3fc90fdb 	.word	0x3fc90fdb
 8007c00:	08008224 	.word	0x08008224
 8007c04:	08008218 	.word	0x08008218
 8007c08:	33bbbd2e 	.word	0x33bbbd2e
 8007c0c:	40490fdb 	.word	0x40490fdb
 8007c10:	c0490fdb 	.word	0xc0490fdb
 8007c14:	3f490fdb 	.word	0x3f490fdb
 8007c18:	bfc90fdb 	.word	0xbfc90fdb

08007c1c <atanf>:
 8007c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c20:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8007c24:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8007c28:	4604      	mov	r4, r0
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	d30e      	bcc.n	8007c4c <atanf+0x30>
 8007c2e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007c32:	d904      	bls.n	8007c3e <atanf+0x22>
 8007c34:	4601      	mov	r1, r0
 8007c36:	f7f8 ff7d 	bl	8000b34 <__addsf3>
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	e003      	b.n	8007c46 <atanf+0x2a>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	f340 80ce 	ble.w	8007de0 <atanf+0x1c4>
 8007c44:	4c67      	ldr	r4, [pc, #412]	@ (8007de4 <atanf+0x1c8>)
 8007c46:	4620      	mov	r0, r4
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	4b66      	ldr	r3, [pc, #408]	@ (8007de8 <atanf+0x1cc>)
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	d80e      	bhi.n	8007c70 <atanf+0x54>
 8007c52:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8007c56:	d208      	bcs.n	8007c6a <atanf+0x4e>
 8007c58:	4964      	ldr	r1, [pc, #400]	@ (8007dec <atanf+0x1d0>)
 8007c5a:	f7f8 ff6b 	bl	8000b34 <__addsf3>
 8007c5e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007c62:	f7f9 fa2b 	bl	80010bc <__aeabi_fcmpgt>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d1ed      	bne.n	8007c46 <atanf+0x2a>
 8007c6a:	f04f 36ff 	mov.w	r6, #4294967295
 8007c6e:	e01c      	b.n	8007caa <atanf+0x8e>
 8007c70:	f000 f8e0 	bl	8007e34 <fabsf>
 8007c74:	4b5e      	ldr	r3, [pc, #376]	@ (8007df0 <atanf+0x1d4>)
 8007c76:	4604      	mov	r4, r0
 8007c78:	429d      	cmp	r5, r3
 8007c7a:	d87c      	bhi.n	8007d76 <atanf+0x15a>
 8007c7c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8007c80:	429d      	cmp	r5, r3
 8007c82:	d867      	bhi.n	8007d54 <atanf+0x138>
 8007c84:	4601      	mov	r1, r0
 8007c86:	f7f8 ff55 	bl	8000b34 <__addsf3>
 8007c8a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007c8e:	f7f8 ff4f 	bl	8000b30 <__aeabi_fsub>
 8007c92:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007c96:	4605      	mov	r5, r0
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7f8 ff4b 	bl	8000b34 <__addsf3>
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f7f9 f903 	bl	8000eac <__aeabi_fdiv>
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	4604      	mov	r4, r0
 8007caa:	4621      	mov	r1, r4
 8007cac:	4620      	mov	r0, r4
 8007cae:	f7f9 f849 	bl	8000d44 <__aeabi_fmul>
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	f7f9 f845 	bl	8000d44 <__aeabi_fmul>
 8007cba:	4605      	mov	r5, r0
 8007cbc:	494d      	ldr	r1, [pc, #308]	@ (8007df4 <atanf+0x1d8>)
 8007cbe:	f7f9 f841 	bl	8000d44 <__aeabi_fmul>
 8007cc2:	494d      	ldr	r1, [pc, #308]	@ (8007df8 <atanf+0x1dc>)
 8007cc4:	f7f8 ff36 	bl	8000b34 <__addsf3>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f9 f83b 	bl	8000d44 <__aeabi_fmul>
 8007cce:	494b      	ldr	r1, [pc, #300]	@ (8007dfc <atanf+0x1e0>)
 8007cd0:	f7f8 ff30 	bl	8000b34 <__addsf3>
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	f7f9 f835 	bl	8000d44 <__aeabi_fmul>
 8007cda:	4949      	ldr	r1, [pc, #292]	@ (8007e00 <atanf+0x1e4>)
 8007cdc:	f7f8 ff2a 	bl	8000b34 <__addsf3>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f9 f82f 	bl	8000d44 <__aeabi_fmul>
 8007ce6:	4947      	ldr	r1, [pc, #284]	@ (8007e04 <atanf+0x1e8>)
 8007ce8:	f7f8 ff24 	bl	8000b34 <__addsf3>
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f9 f829 	bl	8000d44 <__aeabi_fmul>
 8007cf2:	4945      	ldr	r1, [pc, #276]	@ (8007e08 <atanf+0x1ec>)
 8007cf4:	f7f8 ff1e 	bl	8000b34 <__addsf3>
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f9 f823 	bl	8000d44 <__aeabi_fmul>
 8007cfe:	4943      	ldr	r1, [pc, #268]	@ (8007e0c <atanf+0x1f0>)
 8007d00:	4607      	mov	r7, r0
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7f9 f81e 	bl	8000d44 <__aeabi_fmul>
 8007d08:	4941      	ldr	r1, [pc, #260]	@ (8007e10 <atanf+0x1f4>)
 8007d0a:	f7f8 ff11 	bl	8000b30 <__aeabi_fsub>
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f7f9 f818 	bl	8000d44 <__aeabi_fmul>
 8007d14:	493f      	ldr	r1, [pc, #252]	@ (8007e14 <atanf+0x1f8>)
 8007d16:	f7f8 ff0b 	bl	8000b30 <__aeabi_fsub>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f7f9 f812 	bl	8000d44 <__aeabi_fmul>
 8007d20:	493d      	ldr	r1, [pc, #244]	@ (8007e18 <atanf+0x1fc>)
 8007d22:	f7f8 ff05 	bl	8000b30 <__aeabi_fsub>
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7f9 f80c 	bl	8000d44 <__aeabi_fmul>
 8007d2c:	493b      	ldr	r1, [pc, #236]	@ (8007e1c <atanf+0x200>)
 8007d2e:	f7f8 feff 	bl	8000b30 <__aeabi_fsub>
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7f9 f806 	bl	8000d44 <__aeabi_fmul>
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7f8 fefa 	bl	8000b34 <__addsf3>
 8007d40:	4621      	mov	r1, r4
 8007d42:	f7f8 ffff 	bl	8000d44 <__aeabi_fmul>
 8007d46:	1c73      	adds	r3, r6, #1
 8007d48:	4601      	mov	r1, r0
 8007d4a:	d133      	bne.n	8007db4 <atanf+0x198>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f7f8 feef 	bl	8000b30 <__aeabi_fsub>
 8007d52:	e772      	b.n	8007c3a <atanf+0x1e>
 8007d54:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007d58:	f7f8 feea 	bl	8000b30 <__aeabi_fsub>
 8007d5c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007d60:	4605      	mov	r5, r0
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7f8 fee6 	bl	8000b34 <__addsf3>
 8007d68:	4601      	mov	r1, r0
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f7f9 f89e 	bl	8000eac <__aeabi_fdiv>
 8007d70:	2601      	movs	r6, #1
 8007d72:	4604      	mov	r4, r0
 8007d74:	e799      	b.n	8007caa <atanf+0x8e>
 8007d76:	4b2a      	ldr	r3, [pc, #168]	@ (8007e20 <atanf+0x204>)
 8007d78:	429d      	cmp	r5, r3
 8007d7a:	d814      	bhi.n	8007da6 <atanf+0x18a>
 8007d7c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8007d80:	f7f8 fed6 	bl	8000b30 <__aeabi_fsub>
 8007d84:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8007d88:	4605      	mov	r5, r0
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f7f8 ffda 	bl	8000d44 <__aeabi_fmul>
 8007d90:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007d94:	f7f8 fece 	bl	8000b34 <__addsf3>
 8007d98:	4601      	mov	r1, r0
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7f9 f886 	bl	8000eac <__aeabi_fdiv>
 8007da0:	2602      	movs	r6, #2
 8007da2:	4604      	mov	r4, r0
 8007da4:	e781      	b.n	8007caa <atanf+0x8e>
 8007da6:	4601      	mov	r1, r0
 8007da8:	481e      	ldr	r0, [pc, #120]	@ (8007e24 <atanf+0x208>)
 8007daa:	f7f9 f87f 	bl	8000eac <__aeabi_fdiv>
 8007dae:	2603      	movs	r6, #3
 8007db0:	4604      	mov	r4, r0
 8007db2:	e77a      	b.n	8007caa <atanf+0x8e>
 8007db4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e28 <atanf+0x20c>)
 8007db6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8007dba:	f7f8 feb9 	bl	8000b30 <__aeabi_fsub>
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	f7f8 feb6 	bl	8000b30 <__aeabi_fsub>
 8007dc4:	4b19      	ldr	r3, [pc, #100]	@ (8007e2c <atanf+0x210>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007dcc:	f7f8 feb0 	bl	8000b30 <__aeabi_fsub>
 8007dd0:	f1b8 0f00 	cmp.w	r8, #0
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	f6bf af36 	bge.w	8007c46 <atanf+0x2a>
 8007dda:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007dde:	e732      	b.n	8007c46 <atanf+0x2a>
 8007de0:	4c13      	ldr	r4, [pc, #76]	@ (8007e30 <atanf+0x214>)
 8007de2:	e730      	b.n	8007c46 <atanf+0x2a>
 8007de4:	3fc90fdb 	.word	0x3fc90fdb
 8007de8:	3edfffff 	.word	0x3edfffff
 8007dec:	7149f2ca 	.word	0x7149f2ca
 8007df0:	3f97ffff 	.word	0x3f97ffff
 8007df4:	3c8569d7 	.word	0x3c8569d7
 8007df8:	3d4bda59 	.word	0x3d4bda59
 8007dfc:	3d886b35 	.word	0x3d886b35
 8007e00:	3dba2e6e 	.word	0x3dba2e6e
 8007e04:	3e124925 	.word	0x3e124925
 8007e08:	3eaaaaab 	.word	0x3eaaaaab
 8007e0c:	bd15a221 	.word	0xbd15a221
 8007e10:	3d6ef16b 	.word	0x3d6ef16b
 8007e14:	3d9d8795 	.word	0x3d9d8795
 8007e18:	3de38e38 	.word	0x3de38e38
 8007e1c:	3e4ccccd 	.word	0x3e4ccccd
 8007e20:	401bffff 	.word	0x401bffff
 8007e24:	bf800000 	.word	0xbf800000
 8007e28:	08008230 	.word	0x08008230
 8007e2c:	08008240 	.word	0x08008240
 8007e30:	bfc90fdb 	.word	0xbfc90fdb

08007e34 <fabsf>:
 8007e34:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007e38:	4770      	bx	lr
 8007e3a:	0000      	movs	r0, r0
 8007e3c:	0000      	movs	r0, r0
	...

08007e40 <scalbn>:
 8007e40:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007e44:	4616      	mov	r6, r2
 8007e46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e4a:	4683      	mov	fp, r0
 8007e4c:	468c      	mov	ip, r1
 8007e4e:	460b      	mov	r3, r1
 8007e50:	b982      	cbnz	r2, 8007e74 <scalbn+0x34>
 8007e52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007e56:	4303      	orrs	r3, r0
 8007e58:	d035      	beq.n	8007ec6 <scalbn+0x86>
 8007e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f10 <scalbn+0xd0>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f7f8 fb3b 	bl	80004d8 <__aeabi_dmul>
 8007e62:	4b2c      	ldr	r3, [pc, #176]	@ (8007f14 <scalbn+0xd4>)
 8007e64:	4683      	mov	fp, r0
 8007e66:	429e      	cmp	r6, r3
 8007e68:	468c      	mov	ip, r1
 8007e6a:	da0d      	bge.n	8007e88 <scalbn+0x48>
 8007e6c:	a324      	add	r3, pc, #144	@ (adr r3, 8007f00 <scalbn+0xc0>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	e019      	b.n	8007ea8 <scalbn+0x68>
 8007e74:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007e78:	42ba      	cmp	r2, r7
 8007e7a:	d109      	bne.n	8007e90 <scalbn+0x50>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	f7f8 f975 	bl	800016c <__adddf3>
 8007e82:	4683      	mov	fp, r0
 8007e84:	468c      	mov	ip, r1
 8007e86:	e01e      	b.n	8007ec6 <scalbn+0x86>
 8007e88:	460b      	mov	r3, r1
 8007e8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e8e:	3a36      	subs	r2, #54	@ 0x36
 8007e90:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007e94:	428e      	cmp	r6, r1
 8007e96:	dd0a      	ble.n	8007eae <scalbn+0x6e>
 8007e98:	a31b      	add	r3, pc, #108	@ (adr r3, 8007f08 <scalbn+0xc8>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	4665      	mov	r5, ip
 8007ea0:	f363 051e 	bfi	r5, r3, #0, #31
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	481c      	ldr	r0, [pc, #112]	@ (8007f18 <scalbn+0xd8>)
 8007ea8:	f7f8 fb16 	bl	80004d8 <__aeabi_dmul>
 8007eac:	e7e9      	b.n	8007e82 <scalbn+0x42>
 8007eae:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007eb2:	4432      	add	r2, r6
 8007eb4:	428a      	cmp	r2, r1
 8007eb6:	dcef      	bgt.n	8007e98 <scalbn+0x58>
 8007eb8:	2a00      	cmp	r2, #0
 8007eba:	dd08      	ble.n	8007ece <scalbn+0x8e>
 8007ebc:	f36f 531e 	bfc	r3, #20, #11
 8007ec0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ec4:	46ac      	mov	ip, r5
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	4661      	mov	r1, ip
 8007eca:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007ece:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007ed2:	da09      	bge.n	8007ee8 <scalbn+0xa8>
 8007ed4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007ed8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8007edc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007ee0:	480e      	ldr	r0, [pc, #56]	@ (8007f1c <scalbn+0xdc>)
 8007ee2:	f041 011f 	orr.w	r1, r1, #31
 8007ee6:	e7c1      	b.n	8007e6c <scalbn+0x2c>
 8007ee8:	3236      	adds	r2, #54	@ 0x36
 8007eea:	f36f 531e 	bfc	r3, #20, #11
 8007eee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ef2:	4658      	mov	r0, fp
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4b09      	ldr	r3, [pc, #36]	@ (8007f20 <scalbn+0xe0>)
 8007efa:	e7d5      	b.n	8007ea8 <scalbn+0x68>
 8007efc:	f3af 8000 	nop.w
 8007f00:	c2f8f359 	.word	0xc2f8f359
 8007f04:	01a56e1f 	.word	0x01a56e1f
 8007f08:	8800759c 	.word	0x8800759c
 8007f0c:	7e37e43c 	.word	0x7e37e43c
 8007f10:	43500000 	.word	0x43500000
 8007f14:	ffff3cb0 	.word	0xffff3cb0
 8007f18:	8800759c 	.word	0x8800759c
 8007f1c:	c2f8f359 	.word	0xc2f8f359
 8007f20:	3c900000 	.word	0x3c900000

08007f24 <with_errno>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	460d      	mov	r5, r1
 8007f2a:	4616      	mov	r6, r2
 8007f2c:	f7fe fb40 	bl	80065b0 <__errno>
 8007f30:	4629      	mov	r1, r5
 8007f32:	6006      	str	r6, [r0, #0]
 8007f34:	4620      	mov	r0, r4
 8007f36:	bd70      	pop	{r4, r5, r6, pc}

08007f38 <xflow>:
 8007f38:	b513      	push	{r0, r1, r4, lr}
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	b10c      	cbz	r4, 8007f46 <xflow+0xe>
 8007f42:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007f46:	e9cd 2300 	strd	r2, r3, [sp]
 8007f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4e:	f7f8 fac3 	bl	80004d8 <__aeabi_dmul>
 8007f52:	2222      	movs	r2, #34	@ 0x22
 8007f54:	b002      	add	sp, #8
 8007f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5a:	f7ff bfe3 	b.w	8007f24 <with_errno>

08007f5e <__math_uflow>:
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007f64:	f7ff bfe8 	b.w	8007f38 <xflow>

08007f68 <__math_oflow>:
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8007f6e:	f7ff bfe3 	b.w	8007f38 <xflow>
	...

08007f74 <__ieee754_sqrt>:
 8007f74:	4a65      	ldr	r2, [pc, #404]	@ (800810c <__ieee754_sqrt+0x198>)
 8007f76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	438a      	bics	r2, r1
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	460f      	mov	r7, r1
 8007f80:	460b      	mov	r3, r1
 8007f82:	4604      	mov	r4, r0
 8007f84:	d10e      	bne.n	8007fa4 <__ieee754_sqrt+0x30>
 8007f86:	4602      	mov	r2, r0
 8007f88:	f7f8 faa6 	bl	80004d8 <__aeabi_dmul>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 f8ea 	bl	800016c <__adddf3>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	dc0c      	bgt.n	8007fc2 <__ieee754_sqrt+0x4e>
 8007fa8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007fac:	4302      	orrs	r2, r0
 8007fae:	d0f5      	beq.n	8007f9c <__ieee754_sqrt+0x28>
 8007fb0:	b189      	cbz	r1, 8007fd6 <__ieee754_sqrt+0x62>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	f7f8 f8d8 	bl	8000168 <__aeabi_dsub>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	f7f8 fbb6 	bl	800072c <__aeabi_ddiv>
 8007fc0:	e7ea      	b.n	8007f98 <__ieee754_sqrt+0x24>
 8007fc2:	150a      	asrs	r2, r1, #20
 8007fc4:	d115      	bne.n	8007ff2 <__ieee754_sqrt+0x7e>
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	e009      	b.n	8007fde <__ieee754_sqrt+0x6a>
 8007fca:	0ae3      	lsrs	r3, r4, #11
 8007fcc:	3a15      	subs	r2, #21
 8007fce:	0564      	lsls	r4, r4, #21
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0fa      	beq.n	8007fca <__ieee754_sqrt+0x56>
 8007fd4:	e7f7      	b.n	8007fc6 <__ieee754_sqrt+0x52>
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	e7fa      	b.n	8007fd0 <__ieee754_sqrt+0x5c>
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	3101      	adds	r1, #1
 8007fde:	02d8      	lsls	r0, r3, #11
 8007fe0:	d5fb      	bpl.n	8007fda <__ieee754_sqrt+0x66>
 8007fe2:	1e48      	subs	r0, r1, #1
 8007fe4:	1a12      	subs	r2, r2, r0
 8007fe6:	f1c1 0020 	rsb	r0, r1, #32
 8007fea:	fa24 f000 	lsr.w	r0, r4, r0
 8007fee:	4303      	orrs	r3, r0
 8007ff0:	408c      	lsls	r4, r1
 8007ff2:	2700      	movs	r7, #0
 8007ff4:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8007ff8:	2116      	movs	r1, #22
 8007ffa:	07d2      	lsls	r2, r2, #31
 8007ffc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008000:	463a      	mov	r2, r7
 8008002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800800a:	bf5c      	itt	pl
 800800c:	005b      	lslpl	r3, r3, #1
 800800e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008012:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008016:	bf58      	it	pl
 8008018:	0064      	lslpl	r4, r4, #1
 800801a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800801e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008022:	0064      	lsls	r4, r4, #1
 8008024:	1815      	adds	r5, r2, r0
 8008026:	429d      	cmp	r5, r3
 8008028:	bfde      	ittt	le
 800802a:	182a      	addle	r2, r5, r0
 800802c:	1b5b      	suble	r3, r3, r5
 800802e:	183f      	addle	r7, r7, r0
 8008030:	0fe5      	lsrs	r5, r4, #31
 8008032:	3901      	subs	r1, #1
 8008034:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008038:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800803c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008040:	d1f0      	bne.n	8008024 <__ieee754_sqrt+0xb0>
 8008042:	460d      	mov	r5, r1
 8008044:	2620      	movs	r6, #32
 8008046:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800804a:	4293      	cmp	r3, r2
 800804c:	eb00 0c01 	add.w	ip, r0, r1
 8008050:	dc02      	bgt.n	8008058 <__ieee754_sqrt+0xe4>
 8008052:	d113      	bne.n	800807c <__ieee754_sqrt+0x108>
 8008054:	45a4      	cmp	ip, r4
 8008056:	d811      	bhi.n	800807c <__ieee754_sqrt+0x108>
 8008058:	f1bc 0f00 	cmp.w	ip, #0
 800805c:	eb0c 0100 	add.w	r1, ip, r0
 8008060:	da3e      	bge.n	80080e0 <__ieee754_sqrt+0x16c>
 8008062:	2900      	cmp	r1, #0
 8008064:	db3c      	blt.n	80080e0 <__ieee754_sqrt+0x16c>
 8008066:	f102 0e01 	add.w	lr, r2, #1
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	4672      	mov	r2, lr
 800806e:	45a4      	cmp	ip, r4
 8008070:	bf88      	it	hi
 8008072:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008076:	eba4 040c 	sub.w	r4, r4, ip
 800807a:	4405      	add	r5, r0
 800807c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008080:	3e01      	subs	r6, #1
 8008082:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008086:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800808a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800808e:	d1dc      	bne.n	800804a <__ieee754_sqrt+0xd6>
 8008090:	431c      	orrs	r4, r3
 8008092:	d01a      	beq.n	80080ca <__ieee754_sqrt+0x156>
 8008094:	4c1e      	ldr	r4, [pc, #120]	@ (8008110 <__ieee754_sqrt+0x19c>)
 8008096:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8008114 <__ieee754_sqrt+0x1a0>
 800809a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800809e:	e9d9 2300 	ldrd	r2, r3, [r9]
 80080a2:	f7f8 f861 	bl	8000168 <__aeabi_dsub>
 80080a6:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4650      	mov	r0, sl
 80080b0:	4659      	mov	r1, fp
 80080b2:	f7f8 fc8d 	bl	80009d0 <__aeabi_dcmple>
 80080b6:	b140      	cbz	r0, 80080ca <__ieee754_sqrt+0x156>
 80080b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80080bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80080c0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80080c4:	d10e      	bne.n	80080e4 <__ieee754_sqrt+0x170>
 80080c6:	4635      	mov	r5, r6
 80080c8:	3701      	adds	r7, #1
 80080ca:	107b      	asrs	r3, r7, #1
 80080cc:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80080d0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80080d4:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 80080d8:	086b      	lsrs	r3, r5, #1
 80080da:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 80080de:	e75b      	b.n	8007f98 <__ieee754_sqrt+0x24>
 80080e0:	4696      	mov	lr, r2
 80080e2:	e7c2      	b.n	800806a <__ieee754_sqrt+0xf6>
 80080e4:	f7f8 f842 	bl	800016c <__adddf3>
 80080e8:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4650      	mov	r0, sl
 80080f2:	4659      	mov	r1, fp
 80080f4:	f7f8 fc62 	bl	80009bc <__aeabi_dcmplt>
 80080f8:	b120      	cbz	r0, 8008104 <__ieee754_sqrt+0x190>
 80080fa:	1cab      	adds	r3, r5, #2
 80080fc:	bf08      	it	eq
 80080fe:	3701      	addeq	r7, #1
 8008100:	3502      	adds	r5, #2
 8008102:	e7e2      	b.n	80080ca <__ieee754_sqrt+0x156>
 8008104:	1c6b      	adds	r3, r5, #1
 8008106:	f023 0501 	bic.w	r5, r3, #1
 800810a:	e7de      	b.n	80080ca <__ieee754_sqrt+0x156>
 800810c:	7ff00000 	.word	0x7ff00000
 8008110:	08008258 	.word	0x08008258
 8008114:	08008250 	.word	0x08008250

08008118 <_init>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	bf00      	nop
 800811c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811e:	bc08      	pop	{r3}
 8008120:	469e      	mov	lr, r3
 8008122:	4770      	bx	lr

08008124 <_fini>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	bf00      	nop
 8008128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812a:	bc08      	pop	{r3}
 800812c:	469e      	mov	lr, r3
 800812e:	4770      	bx	lr
